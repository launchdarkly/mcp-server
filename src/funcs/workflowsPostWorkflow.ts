/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LaunchdarklyMcpServerCore } from "../core.js";
import { encodeFormQuery, encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Create workflow
 *
 * @remarks
 * Create a workflow for a feature flag. You can create a workflow directly, or you can apply a template to create a new workflow.
 *
 * ### Creating a workflow
 *
 * You can use the create workflow endpoint to create a workflow directly by adding a `stages` array to the request body.
 *
 * For each stage, define the `name`, `conditions` when the stage should be executed, and `action` that describes the stage.
 *
 * <details>
 * <summary>Click to expand example</summary>
 *
 * _Example request body_
 * ```json
 * {
 *   "name": "Progressive rollout starting in two days",
 *   "description": "Turn flag targeting on and increase feature rollout in 10% increments each day",
 *   "stages": [
 *     {
 *       "name": "10% rollout on day 1",
 *       "conditions": [
 *         {
 *           "kind": "schedule",
 *           "scheduleKind": "relative", // or "absolute"
 *               //  If "scheduleKind" is "absolute", set "executionDate";
 *               // "waitDuration" and "waitDurationUnit" will be ignored
 *           "waitDuration": 2,
 *           "waitDurationUnit": "calendarDay"
 *         },
 *         {
 *           "kind": "ld-approval",
 *           "notifyMemberIds": [ "507f1f77bcf86cd799439011" ],
 *           "notifyTeamKeys": [ "team-key-123abc" ]
 *         }
 *       ],
 *       "action": {
 *         "instructions": [
 *           {
 *             "kind": "turnFlagOn"
 *           },
 *           {
 *             "kind": "updateFallthroughVariationOrRollout",
 *             "rolloutWeights": {
 *               "452f5fb5-7320-4ba3-81a1-8f4324f79d49": 90000,
 *               "fc15f6a4-05d3-4aa4-a997-446be461345d": 10000
 *             }
 *           }
 *         ]
 *       }
 *     }
 *   ]
 * }
 * ```
 * </details>
 *
 * ### Creating a workflow by applying a workflow template
 *
 * You can also create a workflow by applying a workflow template. If you pass a valid workflow template key as the `templateKey` query parameter with the request, the API will attempt to create a new workflow with the stages defined in the workflow template with the corresponding key.
 *
 * #### Applicability of stages
 * Templates are created in the context of a particular flag in a particular environment in a particular project. However, because workflows created from a template can be applied to any project, environment, and flag, some steps of the workflow may need to be updated in order to be applicable for the target resource.
 *
 * You can pass a `dryRun` query parameter to tell the API to return a report of which steps of the workflow template are applicable in the target project/environment/flag, and which will need to be updated. When the `dryRun` query parameter is present the response body includes a `meta` property that holds a list of parameters that could potentially be inapplicable for the target resource. Each of these parameters will include a `valid` field. You will need to update any invalid parameters in order to create the new workflow. You can do this using the `parameters` property, which overrides the workflow template parameters.
 *
 * #### Overriding template parameters
 * You can use the `parameters` property in the request body to tell the API to override the specified workflow template parameters with new values that are specific to your target project/environment/flag.
 *
 * <details>
 * <summary>Click to expand example</summary>
 *
 * _Example request body_
 * ```json
 * {
 * 	"name": "workflow created from my-template",
 * 	"description": "description of my workflow",
 * 	"parameters": [
 * 		{
 * 			"_id": "62cf2bc4cadbeb7697943f3b",
 * 			"path": "/clauses/0/values",
 * 			"default": {
 * 				"value": ["updated-segment"]
 * 			}
 * 		},
 * 		{
 * 			"_id": "62cf2bc4cadbeb7697943f3d",
 * 			"path": "/variationId",
 * 			"default": {
 * 				"value": "abcd1234-abcd-1234-abcd-1234abcd12"
 * 			}
 * 		}
 * 	]
 * }
 * ```
 * </details>
 *
 * If there are any steps in the template that are not applicable to the target resource, the workflow will not be created, and the `meta` property will be included in the response body detailing which parameters need to be updated.
 */
export function workflowsPostWorkflow(
  client: LaunchdarklyMcpServerCore,
  request: operations.PostWorkflowRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.CustomWorkflowOutput,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.NotFoundErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: LaunchdarklyMcpServerCore,
  request: operations.PostWorkflowRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.CustomWorkflowOutput,
      | errors.InvalidRequestErrorRep
      | errors.UnauthorizedErrorRep
      | errors.ForbiddenErrorRep
      | errors.NotFoundErrorRep
      | errors.RateLimitedErrorRep
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.PostWorkflowRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.CustomWorkflowInput, {
    explode: true,
  });

  const pathParams = {
    environmentKey: encodeSimple("environmentKey", payload.environmentKey, {
      explode: false,
      charEncoding: "percent",
    }),
    featureFlagKey: encodeSimple("featureFlagKey", payload.featureFlagKey, {
      explode: false,
      charEncoding: "percent",
    }),
    projectKey: encodeSimple("projectKey", payload.projectKey, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/workflows",
  )(pathParams);

  const query = encodeFormQuery({
    "dryRun": payload.dryRun,
    "templateKey": payload.templateKey,
  });

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "postWorkflow",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "429", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.CustomWorkflowOutput,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.NotFoundErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(201, models.CustomWorkflowOutput$inboundSchema),
    M.jsonErr(400, errors.InvalidRequestErrorRep$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedErrorRep$inboundSchema),
    M.jsonErr(403, errors.ForbiddenErrorRep$inboundSchema),
    M.jsonErr(404, errors.NotFoundErrorRep$inboundSchema),
    M.jsonErr(429, errors.RateLimitedErrorRep$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
