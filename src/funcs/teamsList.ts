/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LaunchDarklyCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * List teams
 *
 * @remarks
 * Return a list of teams.
 *
 * By default, this returns the first 20 teams. Page through this list with the `limit` parameter and by following the `first`, `prev`, `next`, and `last` links in the `_links` field that returns. If those links do not appear, the pages they refer to don't exist. For example, the `first` and `prev` links will be missing from the response on the first page, because there is no previous page and you cannot return to the first page when you are already on the first page.
 *
 * ### Filtering teams
 *
 * LaunchDarkly supports the following fields for filters:
 *
 * - `query` is a string that matches against the teams' names and keys. It is not case-sensitive.
 *   - A request with `query:abc` returns teams with the string `abc` in their name or key.
 * - `nomembers` is a boolean that filters the list of teams who have 0 members
 *   - A request with `nomembers:true` returns teams that have 0 members
 *   - A request with `nomembers:false` returns teams that have 1 or more members
 *
 * ### Expanding the teams response
 * LaunchDarkly supports expanding several fields in the "List teams" response. By default, these fields are **not** included in the response.
 *
 * To expand the response, append the `expand` query parameter and add a comma-separated list with any of the following fields:
 *
 * * `members` includes the total count of members that belong to the team.
 * * `roles` includes a paginated list of the custom roles that you have assigned to the team.
 * * `roleAttributes` includes a list of the role attributes that you have assigned to the team.
 * * `projects` includes a paginated list of the projects that the team has any write access to.
 * * `maintainers` includes a paginated list of the maintainers that you have assigned to the team.
 *
 * For example, `expand=members,maintainers` includes the `members` and `maintainers` fields in the response.
 */
export function teamsList(
  client: LaunchDarklyCore,
  request: operations.GetTeamsRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.Teams,
    | errors.UnauthorizedErrorRep
    | errors.MethodNotAllowedErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: LaunchDarklyCore,
  request: operations.GetTeamsRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.Teams,
      | errors.UnauthorizedErrorRep
      | errors.MethodNotAllowedErrorRep
      | errors.RateLimitedErrorRep
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetTeamsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/api/v2/teams")();

  const query = encodeFormQuery({
    "expand": payload.expand,
    "filter": payload.filter,
    "limit": payload.limit,
    "offset": payload.offset,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "getTeams",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["401", "405", "429", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.Teams,
    | errors.UnauthorizedErrorRep
    | errors.MethodNotAllowedErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.Teams$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedErrorRep$inboundSchema),
    M.jsonErr(405, errors.MethodNotAllowedErrorRep$inboundSchema),
    M.jsonErr(429, errors.RateLimitedErrorRep$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
