/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LaunchdarklyMcpServerCore } from "../core.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Modify account members
 *
 * @remarks
 * > ### Full use of this API resource is an Enterprise feature
 * >
 * > The ability to perform a partial update to multiple members is available to customers on an Enterprise plan. If you are on another plan, you can update members individually. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact Sales](https://launchdarkly.com/contact-sales/).
 *
 * Perform a partial update to multiple members. Updating members uses the semantic patch format.
 *
 * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
 *
 * ### Instructions
 *
 * Semantic patch requests support the following `kind` instructions for updating members.
 *
 * <details>
 * <summary>Click to expand instructions for <strong>updating members</strong></summary>
 *
 * #### replaceMembersRoles
 *
 * Replaces the roles of the specified members. This also removes all custom roles assigned to the specified members.
 *
 * ##### Parameters
 *
 * - `value`: The new role. Must be a valid built-in role. To learn more about built-in roles, read [LaunchDarkly's built-in roles](https://launchdarkly.com/docs/home/account/built-in-roles).
 * - `memberIDs`: List of member IDs.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "replaceMemberRoles",
 *     "value": "reader",
 *     "memberIDs": [
 *       "1234a56b7c89d012345e678f",
 *       "507f1f77bcf86cd799439011"
 *     ]
 *   }]
 * }
 * ```
 *
 * #### replaceAllMembersRoles
 *
 * Replaces the roles of all members. This also removes all custom roles assigned to the specified members.
 *
 * Members that match any of the filters are **excluded** from the update.
 *
 * ##### Parameters
 *
 * - `value`: The new role. Must be a valid built-in role. To learn more about built-in roles, read [LaunchDarkly's built-in roles](https://launchdarkly.com/docs/home/account/built-in-roles).
 * - `filterLastSeen`: (Optional) A JSON object with one of the following formats:
 *   - `{"never": true}` - Members that have never been active, such as those who have not accepted their invitation to LaunchDarkly, or have not logged in after being provisioned via SCIM.
 *   - `{"noData": true}` - Members that have not been active since LaunchDarkly began recording last seen timestamps.
 *   - `{"before": 1608672063611}` - Members that have not been active since the provided value, which should be a timestamp in Unix epoch milliseconds.
 * - `filterQuery`: (Optional) A string that matches against the members' emails and names. It is not case sensitive.
 * - `filterRoles`: (Optional) A `|` separated list of roles and custom roles. For the purposes of this filtering, `Owner` counts as `Admin`.
 * - `filterTeamKey`: (Optional) A string that matches against the key of the team the members belong to. It is not case sensitive.
 * - `ignoredMemberIDs`: (Optional) A list of member IDs.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "replaceAllMembersRoles",
 *     "value": "reader",
 *     "filterLastSeen": { "never": true }
 *   }]
 * }
 * ```
 *
 * #### replaceMembersCustomRoles
 *
 * Replaces the custom roles of the specified members.
 *
 * ##### Parameters
 *
 * - `values`: List of new custom roles. Must be a valid custom role key or ID.
 * - `memberIDs`: List of member IDs.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "replaceMembersCustomRoles",
 *     "values": [ "example-custom-role" ],
 *     "memberIDs": [
 *       "1234a56b7c89d012345e678f",
 *       "507f1f77bcf86cd799439011"
 *     ]
 *   }]
 * }
 * ```
 *
 * #### replaceAllMembersCustomRoles
 *
 * Replaces the custom roles of all members. Members that match any of the filters are **excluded** from the update.
 *
 * ##### Parameters
 *
 * - `values`: List of new roles. Must be a valid custom role key or ID.
 * - `filterLastSeen`: (Optional) A JSON object with one of the following formats:
 *   - `{"never": true}` - Members that have never been active, such as those who have not accepted their invitation to LaunchDarkly, or have not logged in after being provisioned via SCIM.
 *   - `{"noData": true}` - Members that have not been active since LaunchDarkly began recording last seen timestamps.
 *   - `{"before": 1608672063611}` - Members that have not been active since the provided value, which should be a timestamp in Unix epoch milliseconds.
 * - `filterQuery`: (Optional) A string that matches against the members' emails and names. It is not case sensitive.
 * - `filterRoles`: (Optional) A `|` separated list of roles and custom roles. For the purposes of this filtering, `Owner` counts as `Admin`.
 * - `filterTeamKey`: (Optional) A string that matches against the key of the team the members belong to. It is not case sensitive.
 * - `ignoredMemberIDs`: (Optional) A list of member IDs.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "replaceAllMembersCustomRoles",
 *     "values": [ "example-custom-role" ],
 *     "filterLastSeen": { "never": true }
 *   }]
 * }
 * ```
 *
 * #### replaceMembersRoleAttributes
 *
 * Replaces the role attributes of the specified members.
 *
 * ##### Parameters
 *
 * - `value`: Map of role attribute keys to lists of values.
 * - `memberIDs`: List of member IDs.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "replaceMembersRoleAttributes",
 *     "value": {
 *       "myRoleProjectKey": ["mobile", "web"],
 *       "myRoleEnvironmentKey": ["production"]
 *     },
 *     "memberIDs": [
 *       "1234a56b7c89d012345e678f",
 *       "507f1f77bcf86cd799439011"
 *     ]
 *   }]
 * }
 * ```
 *
 * </details>
 */
export function accountMembersBetaPatchMembers(
  client: LaunchdarklyMcpServerCore,
  request: models.MembersPatchInput,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.BulkEditMembersRep,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: LaunchdarklyMcpServerCore,
  request: models.MembersPatchInput,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.BulkEditMembersRep,
      | errors.InvalidRequestErrorRep
      | errors.UnauthorizedErrorRep
      | errors.ForbiddenErrorRep
      | errors.StatusConflictErrorRep
      | errors.RateLimitedErrorRep
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => models.MembersPatchInput$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload, { explode: true });

  const path = pathToFunc("/api/v2/members")();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "patchMembers",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PATCH",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "409", "429", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.BulkEditMembersRep,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, models.BulkEditMembersRep$inboundSchema),
    M.jsonErr(400, errors.InvalidRequestErrorRep$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedErrorRep$inboundSchema),
    M.jsonErr(403, errors.ForbiddenErrorRep$inboundSchema),
    M.jsonErr(409, errors.StatusConflictErrorRep$inboundSchema),
    M.jsonErr(429, errors.RateLimitedErrorRep$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
