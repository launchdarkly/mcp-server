/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LaunchDarklyCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Create Data Export destination
 *
 * @remarks
 *
 * Create a new Data Export destination.
 *
 * In the `config` request body parameter, the fields required depend on the type of Data Export destination.
 *
 * <details>
 * <summary>Click to expand <code>config</code> parameter details</summary>
 *
 * #### Azure Event Hubs
 *
 * To create a Data Export destination with a `kind` of `azure-event-hubs`, the `config` object requires the following fields:
 *
 * * `namespace`: The Event Hub Namespace name
 * * `name`: The Event Hub name
 * * `policyName`: The shared access signature policy name. You can find your policy name in the settings of your Azure Event Hubs Namespace.
 * * `policyKey`: The shared access signature key. You can find your policy key in the settings of your Azure Event Hubs Namespace.
 *
 * #### Google Cloud Pub/Sub
 *
 * To create a Data Export destination with a `kind` of `google-pubsub`, the `config` object requires the following fields:
 *
 * * `project`: The Google PubSub project ID for the project to publish to
 * * `topic`: The Google PubSub topic ID for the topic to publish to
 *
 * #### Amazon Kinesis
 *
 * To create a Data Export destination with a `kind` of `kinesis`, the `config` object requires the following fields:
 *
 * * `region`: The Kinesis stream's AWS region key
 * * `roleArn`: The Amazon Resource Name (ARN) of the AWS role that will be writing to Kinesis
 * * `streamName`: The name of the Kinesis stream that LaunchDarkly is sending events to. This is not the ARN of the stream.
 *
 * #### mParticle
 *
 * To create a Data Export destination with a `kind` of `mparticle`, the `config` object requires the following fields:
 *
 * * `apiKey`: The mParticle API key
 * * `secret`: The mParticle API secret
 * * `userIdentity`: The type of identifier you use to identify your end users in mParticle
 * * `anonymousUserIdentity`: The type of identifier you use to identify your anonymous end users in mParticle
 *
 * #### Segment
 *
 * To create a Data Export destination with a `kind` of `segment`, the `config` object requires the following fields:
 *
 * * `writeKey`: The Segment write key. This is used to authenticate LaunchDarkly's calls to Segment.
 *
 * #### Snowflake
 *
 * To create a Data Export destination with a `kind` of `snowflake-v2`, the `config` object requires the following fields:
 *
 * * `publicKey`: The `publicKey` is returned as part of the [Generate Snowflake destination key pair](https://launchdarkly.com/docs/api/data-export-destinations/post-generate-warehouse-destination-key-pair) response. It is the `public_key` field.
 * * `snowflakeHostAddress`: Your Snowflake account URL.
 *
 * </details>
 */
export function dataExportDestinationsCreate(
  client: LaunchDarklyCore,
  request: operations.PostDestinationRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.Destination,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: LaunchDarklyCore,
  request: operations.PostDestinationRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.Destination,
      | errors.InvalidRequestErrorRep
      | errors.UnauthorizedErrorRep
      | errors.ForbiddenErrorRep
      | errors.StatusConflictErrorRep
      | errors.RateLimitedErrorRep
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.PostDestinationRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.DestinationPost, { explode: true });

  const pathParams = {
    environmentKey: encodeSimple("environmentKey", payload.environmentKey, {
      explode: false,
      charEncoding: "percent",
    }),
    projectKey: encodeSimple("projectKey", payload.projectKey, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/v2/destinations/{projectKey}/{environmentKey}")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "postDestination",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "409", "429", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.Destination,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(201, components.Destination$inboundSchema),
    M.jsonErr(400, errors.InvalidRequestErrorRep$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedErrorRep$inboundSchema),
    M.jsonErr(403, errors.ForbiddenErrorRep$inboundSchema),
    M.jsonErr(409, errors.StatusConflictErrorRep$inboundSchema),
    M.jsonErr(429, errors.RateLimitedErrorRep$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
