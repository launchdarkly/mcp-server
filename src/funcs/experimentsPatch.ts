/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LaunchDarklyCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Patch experiment
 *
 * @remarks
 * Update an experiment. Updating an experiment uses the semantic patch format.
 *
 * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
 *
 * ### Instructions
 *
 * Semantic patch requests support the following `kind` instructions for updating experiments.
 *
 * #### updateName
 *
 * Updates the experiment name.
 *
 * ##### Parameters
 *
 * - `value`: The new name.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "updateName",
 *     "value": "Example updated experiment name"
 *   }]
 * }
 * ```
 *
 * #### updateDescription
 *
 * Updates the experiment description.
 *
 * ##### Parameters
 *
 * - `value`: The new description.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "updateDescription",
 *     "value": "Example updated description"
 *   }]
 * }
 * ```
 *
 * #### startIteration
 *
 * Starts a new iteration for this experiment. You must [create a new iteration](https://launchdarkly.com/docs/ld-docs/api/experiments/create-iteration) before calling this instruction.
 *
 * An iteration may not be started until it meets the following criteria:
 *
 * * Its associated flag is toggled on and is not archived
 * * Its `randomizationUnit` is set
 * * At least one of its `treatments` has a non-zero `allocationPercent`
 *
 * ##### Parameters
 *
 * - `changeJustification`: The reason for starting a new iteration. Required when you call `startIteration` on an already running experiment, otherwise optional.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "startIteration",
 *     "changeJustification": "It's time to start a new iteration"
 *   }]
 * }
 * ```
 *
 * #### stopIteration
 *
 * Stops the current iteration for this experiment.
 *
 * ##### Parameters
 *
 * - `winningTreatmentId`: The ID of the winning treatment. Treatment IDs are returned as part of the [Get experiment](https://launchdarkly.com/docs/ld-docs/api/experiments/get-experiment) response. They are the `_id` of each element in the `treatments` array.
 * - `winningReason`: The reason for the winner
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{
 *     "kind": "stopIteration",
 *     "winningTreatmentId": "3a548ec2-72ac-4e59-8518-5c24f5609ccf",
 *     "winningReason": "Example reason to stop the iteration"
 *   }]
 * }
 * ```
 *
 * #### archiveExperiment
 *
 * Archives this experiment. Archived experiments are hidden by default in the LaunchDarkly user interface. You cannot start new iterations for archived experiments.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{ "kind": "archiveExperiment" }]
 * }
 * ```
 *
 * #### restoreExperiment
 *
 * Restores an archived experiment. After restoring an experiment, you can start new iterations for it again.
 *
 * Here's an example:
 *
 * ```json
 * {
 *   "instructions": [{ "kind": "restoreExperiment" }]
 * }
 * ```
 */
export function experimentsPatch(
  client: LaunchDarklyCore,
  request: operations.PatchExperimentRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.Experiment,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.NotFoundErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: LaunchDarklyCore,
  request: operations.PatchExperimentRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.Experiment,
      | errors.InvalidRequestErrorRep
      | errors.UnauthorizedErrorRep
      | errors.ForbiddenErrorRep
      | errors.NotFoundErrorRep
      | errors.StatusConflictErrorRep
      | errors.RateLimitedErrorRep
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.PatchExperimentRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.ExperimentPatchInput, {
    explode: true,
  });

  const pathParams = {
    environmentKey: encodeSimple("environmentKey", payload.environmentKey, {
      explode: false,
      charEncoding: "percent",
    }),
    experimentKey: encodeSimple("experimentKey", payload.experimentKey, {
      explode: false,
      charEncoding: "percent",
    }),
    projectKey: encodeSimple("projectKey", payload.projectKey, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/api/v2/projects/{projectKey}/environments/{environmentKey}/experiments/{experimentKey}",
  )(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "patchExperiment",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PATCH",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "409", "429", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.Experiment,
    | errors.InvalidRequestErrorRep
    | errors.UnauthorizedErrorRep
    | errors.ForbiddenErrorRep
    | errors.NotFoundErrorRep
    | errors.StatusConflictErrorRep
    | errors.RateLimitedErrorRep
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.Experiment$inboundSchema),
    M.jsonErr(400, errors.InvalidRequestErrorRep$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedErrorRep$inboundSchema),
    M.jsonErr(403, errors.ForbiddenErrorRep$inboundSchema),
    M.jsonErr(404, errors.NotFoundErrorRep$inboundSchema),
    M.jsonErr(409, errors.StatusConflictErrorRep$inboundSchema),
    M.jsonErr(429, errors.RateLimitedErrorRep$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
