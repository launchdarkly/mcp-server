/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ContextKindRep = {
  /**
   * The context kind key
   */
  key: string;
  /**
   * The context kind name
   */
  name: string;
  /**
   * The context kind description
   */
  description: string;
  /**
   * The context kind version
   */
  version: number;
  creationDate: number;
  lastModified: number;
  lastSeen?: number | undefined;
  createdFrom: string;
  /**
   * Alias for archived.
   */
  hideInTargeting?: boolean | undefined;
  /**
   * Whether the context kind is archived. Archived context kinds are unavailable for targeting.
   */
  archived?: boolean | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const ContextKindRep$inboundSchema: z.ZodType<
  ContextKindRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
  lastSeen: z.number().int().optional(),
  createdFrom: z.string(),
  hideInTargeting: z.boolean().optional(),
  archived: z.boolean().optional(),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ContextKindRep$Outbound = {
  key: string;
  name: string;
  description: string;
  version: number;
  creationDate: number;
  lastModified: number;
  lastSeen?: number | undefined;
  createdFrom: string;
  hideInTargeting?: boolean | undefined;
  archived?: boolean | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const ContextKindRep$outboundSchema: z.ZodType<
  ContextKindRep$Outbound,
  z.ZodTypeDef,
  ContextKindRep
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
  version: z.number().int(),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
  lastSeen: z.number().int().optional(),
  createdFrom: z.string(),
  hideInTargeting: z.boolean().optional(),
  archived: z.boolean().optional(),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextKindRep$ {
  /** @deprecated use `ContextKindRep$inboundSchema` instead. */
  export const inboundSchema = ContextKindRep$inboundSchema;
  /** @deprecated use `ContextKindRep$outboundSchema` instead. */
  export const outboundSchema = ContextKindRep$outboundSchema;
  /** @deprecated use `ContextKindRep$Outbound` instead. */
  export type Outbound = ContextKindRep$Outbound;
}

export function contextKindRepToJSON(contextKindRep: ContextKindRep): string {
  return JSON.stringify(ContextKindRep$outboundSchema.parse(contextKindRep));
}

export function contextKindRepFromJSON(
  jsonString: string,
): SafeParseResult<ContextKindRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextKindRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextKindRep' from JSON`,
  );
}
