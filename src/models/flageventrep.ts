/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagEventExperimentCollection,
  FlagEventExperimentCollection$inboundSchema,
  FlagEventExperimentCollection$Outbound,
  FlagEventExperimentCollection$outboundSchema,
} from "./flageventexperimentcollection.js";
import {
  FlagEventImpactRep,
  FlagEventImpactRep$inboundSchema,
  FlagEventImpactRep$Outbound,
  FlagEventImpactRep$outboundSchema,
} from "./flageventimpactrep.js";
import {
  FlagEventMemberRep,
  FlagEventMemberRep$inboundSchema,
  FlagEventMemberRep$Outbound,
  FlagEventMemberRep$outboundSchema,
} from "./flageventmemberrep.js";

export type FlagEventRep = {
  /**
   * The flag event ID
   */
  id: string;
  /**
   * The project ID
   */
  projectId: string;
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment ID
   */
  environmentId?: string | undefined;
  /**
   * The environment key
   */
  environmentKey?: string | undefined;
  /**
   * The flag key
   */
  flagKey: string;
  eventType: string;
  eventTime: number;
  /**
   * The event description
   */
  description: string;
  /**
   * The audit log entry ID
   */
  auditLogEntryId?: string | undefined;
  member?: FlagEventMemberRep | undefined;
  /**
   * The resource actions
   */
  actions?: Array<string> | undefined;
  impact: FlagEventImpactRep;
  experiments?: FlagEventExperimentCollection | undefined;
};

/** @internal */
export const FlagEventRep$inboundSchema: z.ZodType<
  FlagEventRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  projectKey: z.string(),
  environmentId: z.string().optional(),
  environmentKey: z.string().optional(),
  flagKey: z.string(),
  eventType: z.string(),
  eventTime: z.number().int(),
  description: z.string(),
  auditLogEntryId: z.string().optional(),
  member: FlagEventMemberRep$inboundSchema.optional(),
  actions: z.array(z.string()).optional(),
  impact: FlagEventImpactRep$inboundSchema,
  experiments: FlagEventExperimentCollection$inboundSchema.optional(),
});

/** @internal */
export type FlagEventRep$Outbound = {
  id: string;
  projectId: string;
  projectKey: string;
  environmentId?: string | undefined;
  environmentKey?: string | undefined;
  flagKey: string;
  eventType: string;
  eventTime: number;
  description: string;
  auditLogEntryId?: string | undefined;
  member?: FlagEventMemberRep$Outbound | undefined;
  actions?: Array<string> | undefined;
  impact: FlagEventImpactRep$Outbound;
  experiments?: FlagEventExperimentCollection$Outbound | undefined;
};

/** @internal */
export const FlagEventRep$outboundSchema: z.ZodType<
  FlagEventRep$Outbound,
  z.ZodTypeDef,
  FlagEventRep
> = z.object({
  id: z.string(),
  projectId: z.string(),
  projectKey: z.string(),
  environmentId: z.string().optional(),
  environmentKey: z.string().optional(),
  flagKey: z.string(),
  eventType: z.string(),
  eventTime: z.number().int(),
  description: z.string(),
  auditLogEntryId: z.string().optional(),
  member: FlagEventMemberRep$outboundSchema.optional(),
  actions: z.array(z.string()).optional(),
  impact: FlagEventImpactRep$outboundSchema,
  experiments: FlagEventExperimentCollection$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagEventRep$ {
  /** @deprecated use `FlagEventRep$inboundSchema` instead. */
  export const inboundSchema = FlagEventRep$inboundSchema;
  /** @deprecated use `FlagEventRep$outboundSchema` instead. */
  export const outboundSchema = FlagEventRep$outboundSchema;
  /** @deprecated use `FlagEventRep$Outbound` instead. */
  export type Outbound = FlagEventRep$Outbound;
}

export function flagEventRepToJSON(flagEventRep: FlagEventRep): string {
  return JSON.stringify(FlagEventRep$outboundSchema.parse(flagEventRep));
}

export function flagEventRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagEventRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagEventRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagEventRep' from JSON`,
  );
}
