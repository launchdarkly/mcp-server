/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DependentFlagEnvironment,
  DependentFlagEnvironment$inboundSchema,
  DependentFlagEnvironment$Outbound,
  DependentFlagEnvironment$outboundSchema,
} from "./dependentflagenvironment.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MultiEnvironmentDependentFlag = {
  /**
   * The flag name
   */
  name?: string | undefined;
  /**
   * The flag key
   */
  key: string;
  /**
   * A list of environments in which the dependent flag appears
   */
  environments: Array<DependentFlagEnvironment>;
};

/** @internal */
export const MultiEnvironmentDependentFlag$inboundSchema: z.ZodType<
  MultiEnvironmentDependentFlag,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  environments: z.array(DependentFlagEnvironment$inboundSchema),
});

/** @internal */
export type MultiEnvironmentDependentFlag$Outbound = {
  name?: string | undefined;
  key: string;
  environments: Array<DependentFlagEnvironment$Outbound>;
};

/** @internal */
export const MultiEnvironmentDependentFlag$outboundSchema: z.ZodType<
  MultiEnvironmentDependentFlag$Outbound,
  z.ZodTypeDef,
  MultiEnvironmentDependentFlag
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  environments: z.array(DependentFlagEnvironment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultiEnvironmentDependentFlag$ {
  /** @deprecated use `MultiEnvironmentDependentFlag$inboundSchema` instead. */
  export const inboundSchema = MultiEnvironmentDependentFlag$inboundSchema;
  /** @deprecated use `MultiEnvironmentDependentFlag$outboundSchema` instead. */
  export const outboundSchema = MultiEnvironmentDependentFlag$outboundSchema;
  /** @deprecated use `MultiEnvironmentDependentFlag$Outbound` instead. */
  export type Outbound = MultiEnvironmentDependentFlag$Outbound;
}

export function multiEnvironmentDependentFlagToJSON(
  multiEnvironmentDependentFlag: MultiEnvironmentDependentFlag,
): string {
  return JSON.stringify(
    MultiEnvironmentDependentFlag$outboundSchema.parse(
      multiEnvironmentDependentFlag,
    ),
  );
}

export function multiEnvironmentDependentFlagFromJSON(
  jsonString: string,
): SafeParseResult<MultiEnvironmentDependentFlag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MultiEnvironmentDependentFlag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MultiEnvironmentDependentFlag' from JSON`,
  );
}
