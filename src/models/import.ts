/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileRep,
  FileRep$inboundSchema,
  FileRep$Outbound,
  FileRep$outboundSchema,
} from "./filerep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The import status
 */
export const ImportStatus = {
  Preparing: "preparing",
  PendingApproval: "pending_approval",
  Ready: "ready",
  InProgress: "in_progress",
  Complete: "complete",
  Stopped: "stopped",
} as const;
/**
 * The import status
 */
export type ImportStatus = ClosedEnum<typeof ImportStatus>;

export type Import = {
  /**
   * The import ID
   */
  id: string;
  /**
   * The segment key
   */
  segmentKey: string;
  creationTime: number;
  /**
   * The import mode used, either <code>merge</code> or <code>replace</code>
   */
  mode: string;
  /**
   * The import status
   */
  status: ImportStatus;
  /**
   * The imported files and their status
   */
  files?: Array<FileRep> | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ImportStatus$inboundSchema: z.ZodNativeEnum<typeof ImportStatus> =
  z.nativeEnum(ImportStatus);

/** @internal */
export const ImportStatus$outboundSchema: z.ZodNativeEnum<typeof ImportStatus> =
  ImportStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportStatus$ {
  /** @deprecated use `ImportStatus$inboundSchema` instead. */
  export const inboundSchema = ImportStatus$inboundSchema;
  /** @deprecated use `ImportStatus$outboundSchema` instead. */
  export const outboundSchema = ImportStatus$outboundSchema;
}

/** @internal */
export const Import$inboundSchema: z.ZodType<Import, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    segmentKey: z.string(),
    creationTime: z.number().int(),
    mode: z.string(),
    status: ImportStatus$inboundSchema,
    files: z.array(FileRep$inboundSchema).optional(),
    _links: z.record(Link$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Import$Outbound = {
  id: string;
  segmentKey: string;
  creationTime: number;
  mode: string;
  status: string;
  files?: Array<FileRep$Outbound> | undefined;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const Import$outboundSchema: z.ZodType<
  Import$Outbound,
  z.ZodTypeDef,
  Import
> = z.object({
  id: z.string(),
  segmentKey: z.string(),
  creationTime: z.number().int(),
  mode: z.string(),
  status: ImportStatus$outboundSchema,
  files: z.array(FileRep$outboundSchema).optional(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Import$ {
  /** @deprecated use `Import$inboundSchema` instead. */
  export const inboundSchema = Import$inboundSchema;
  /** @deprecated use `Import$outboundSchema` instead. */
  export const outboundSchema = Import$outboundSchema;
  /** @deprecated use `Import$Outbound` instead. */
  export type Outbound = Import$Outbound;
}

export function importToJSON(value: Import): string {
  return JSON.stringify(Import$outboundSchema.parse(value));
}

export function importFromJSON(
  jsonString: string,
): SafeParseResult<Import, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Import$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Import' from JSON`,
  );
}
