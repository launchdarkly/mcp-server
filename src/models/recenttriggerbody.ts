/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RecentTriggerBody = {
  timestamp?: number | undefined;
  /**
   * The marshalled JSON request body for the incoming trigger webhook. If this is empty or contains invalid JSON, the timestamp is recorded but this field will be empty.
   */
  jsonBody?: { [k: string]: any } | undefined;
};

/** @internal */
export const RecentTriggerBody$inboundSchema: z.ZodType<
  RecentTriggerBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.number().int().optional(),
  jsonBody: z.record(z.any()).optional(),
});

/** @internal */
export type RecentTriggerBody$Outbound = {
  timestamp?: number | undefined;
  jsonBody?: { [k: string]: any } | undefined;
};

/** @internal */
export const RecentTriggerBody$outboundSchema: z.ZodType<
  RecentTriggerBody$Outbound,
  z.ZodTypeDef,
  RecentTriggerBody
> = z.object({
  timestamp: z.number().int().optional(),
  jsonBody: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecentTriggerBody$ {
  /** @deprecated use `RecentTriggerBody$inboundSchema` instead. */
  export const inboundSchema = RecentTriggerBody$inboundSchema;
  /** @deprecated use `RecentTriggerBody$outboundSchema` instead. */
  export const outboundSchema = RecentTriggerBody$outboundSchema;
  /** @deprecated use `RecentTriggerBody$Outbound` instead. */
  export type Outbound = RecentTriggerBody$Outbound;
}

export function recentTriggerBodyToJSON(
  recentTriggerBody: RecentTriggerBody,
): string {
  return JSON.stringify(
    RecentTriggerBody$outboundSchema.parse(recentTriggerBody),
  );
}

export function recentTriggerBodyFromJSON(
  jsonString: string,
): SafeParseResult<RecentTriggerBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecentTriggerBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecentTriggerBody' from JSON`,
  );
}
