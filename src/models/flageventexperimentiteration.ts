/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FlagEventExperimentIteration = {
  /**
   * The experiment iteration ID
   */
  id: string;
  status: string;
  startedAt: number;
  endedAt?: number | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const FlagEventExperimentIteration$inboundSchema: z.ZodType<
  FlagEventExperimentIteration,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  startedAt: z.number().int(),
  endedAt: z.number().int().optional(),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FlagEventExperimentIteration$Outbound = {
  id: string;
  status: string;
  startedAt: number;
  endedAt?: number | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const FlagEventExperimentIteration$outboundSchema: z.ZodType<
  FlagEventExperimentIteration$Outbound,
  z.ZodTypeDef,
  FlagEventExperimentIteration
> = z.object({
  id: z.string(),
  status: z.string(),
  startedAt: z.number().int(),
  endedAt: z.number().int().optional(),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagEventExperimentIteration$ {
  /** @deprecated use `FlagEventExperimentIteration$inboundSchema` instead. */
  export const inboundSchema = FlagEventExperimentIteration$inboundSchema;
  /** @deprecated use `FlagEventExperimentIteration$outboundSchema` instead. */
  export const outboundSchema = FlagEventExperimentIteration$outboundSchema;
  /** @deprecated use `FlagEventExperimentIteration$Outbound` instead. */
  export type Outbound = FlagEventExperimentIteration$Outbound;
}

export function flagEventExperimentIterationToJSON(
  flagEventExperimentIteration: FlagEventExperimentIteration,
): string {
  return JSON.stringify(
    FlagEventExperimentIteration$outboundSchema.parse(
      flagEventExperimentIteration,
    ),
  );
}

export function flagEventExperimentIterationFromJSON(
  jsonString: string,
): SafeParseResult<FlagEventExperimentIteration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagEventExperimentIteration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagEventExperimentIteration' from JSON`,
  );
}
