/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  StatusResponse,
  StatusResponse$inboundSchema,
  StatusResponse$Outbound,
  StatusResponse$outboundSchema,
} from "./statusresponse.js";

/**
 * The current status of the import integrations related import job
 */
export const FlagImportStatusStatus = {
  Complete: "complete",
  Importing: "importing",
  Pending: "pending",
  Failed: "failed",
  Partial: "partial",
} as const;
/**
 * The current status of the import integrations related import job
 */
export type FlagImportStatusStatus = ClosedEnum<typeof FlagImportStatusStatus>;

export type FlagImportStatus = {
  /**
   * The current status of the import integrations related import job
   */
  status?: FlagImportStatusStatus | undefined;
  lastImport?: number | undefined;
  lastError?: number | undefined;
  errors?: Array<StatusResponse> | undefined;
};

/** @internal */
export const FlagImportStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof FlagImportStatusStatus
> = z.nativeEnum(FlagImportStatusStatus);

/** @internal */
export const FlagImportStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof FlagImportStatusStatus
> = FlagImportStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportStatusStatus$ {
  /** @deprecated use `FlagImportStatusStatus$inboundSchema` instead. */
  export const inboundSchema = FlagImportStatusStatus$inboundSchema;
  /** @deprecated use `FlagImportStatusStatus$outboundSchema` instead. */
  export const outboundSchema = FlagImportStatusStatus$outboundSchema;
}

/** @internal */
export const FlagImportStatus$inboundSchema: z.ZodType<
  FlagImportStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: FlagImportStatusStatus$inboundSchema.optional(),
  lastImport: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errors: z.array(StatusResponse$inboundSchema).optional(),
});

/** @internal */
export type FlagImportStatus$Outbound = {
  status?: string | undefined;
  lastImport?: number | undefined;
  lastError?: number | undefined;
  errors?: Array<StatusResponse$Outbound> | undefined;
};

/** @internal */
export const FlagImportStatus$outboundSchema: z.ZodType<
  FlagImportStatus$Outbound,
  z.ZodTypeDef,
  FlagImportStatus
> = z.object({
  status: FlagImportStatusStatus$outboundSchema.optional(),
  lastImport: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errors: z.array(StatusResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportStatus$ {
  /** @deprecated use `FlagImportStatus$inboundSchema` instead. */
  export const inboundSchema = FlagImportStatus$inboundSchema;
  /** @deprecated use `FlagImportStatus$outboundSchema` instead. */
  export const outboundSchema = FlagImportStatus$outboundSchema;
  /** @deprecated use `FlagImportStatus$Outbound` instead. */
  export type Outbound = FlagImportStatus$Outbound;
}

export function flagImportStatusToJSON(
  flagImportStatus: FlagImportStatus,
): string {
  return JSON.stringify(
    FlagImportStatus$outboundSchema.parse(flagImportStatus),
  );
}

export function flagImportStatusFromJSON(
  jsonString: string,
): SafeParseResult<FlagImportStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagImportStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagImportStatus' from JSON`,
  );
}
