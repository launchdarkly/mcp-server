/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Experiment,
  Experiment$inboundSchema,
  Experiment$Outbound,
  Experiment$outboundSchema,
} from "./experiment.js";

export const HoldoutDetailRepStatus = {
  Created: "created",
  Enabled: "enabled",
  Running: "running",
  Ended: "ended",
} as const;
export type HoldoutDetailRepStatus = ClosedEnum<typeof HoldoutDetailRepStatus>;

export type HoldoutDetailRep = {
  id: string;
  status: HoldoutDetailRepStatus;
  description?: string | undefined;
  /**
   * The percentage of traffic allocated to this holdout.
   */
  holdoutAmount: string;
  /**
   * Indicates if the holdout experiment is running and if any related experiments are running.
   */
  isDirty?: boolean | undefined;
  createdAt: number;
  updatedAt: number;
  baseExperiment: Experiment;
  relatedExperiments?: Array<Experiment> | undefined;
};

/** @internal */
export const HoldoutDetailRepStatus$inboundSchema: z.ZodNativeEnum<
  typeof HoldoutDetailRepStatus
> = z.nativeEnum(HoldoutDetailRepStatus);

/** @internal */
export const HoldoutDetailRepStatus$outboundSchema: z.ZodNativeEnum<
  typeof HoldoutDetailRepStatus
> = HoldoutDetailRepStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutDetailRepStatus$ {
  /** @deprecated use `HoldoutDetailRepStatus$inboundSchema` instead. */
  export const inboundSchema = HoldoutDetailRepStatus$inboundSchema;
  /** @deprecated use `HoldoutDetailRepStatus$outboundSchema` instead. */
  export const outboundSchema = HoldoutDetailRepStatus$outboundSchema;
}

/** @internal */
export const HoldoutDetailRep$inboundSchema: z.ZodType<
  HoldoutDetailRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  status: HoldoutDetailRepStatus$inboundSchema,
  description: z.string().optional(),
  holdoutAmount: z.string(),
  isDirty: z.boolean().optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  baseExperiment: Experiment$inboundSchema,
  relatedExperiments: z.array(Experiment$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type HoldoutDetailRep$Outbound = {
  _id: string;
  status: string;
  description?: string | undefined;
  holdoutAmount: string;
  isDirty?: boolean | undefined;
  createdAt: number;
  updatedAt: number;
  baseExperiment: Experiment$Outbound;
  relatedExperiments?: Array<Experiment$Outbound> | undefined;
};

/** @internal */
export const HoldoutDetailRep$outboundSchema: z.ZodType<
  HoldoutDetailRep$Outbound,
  z.ZodTypeDef,
  HoldoutDetailRep
> = z.object({
  id: z.string(),
  status: HoldoutDetailRepStatus$outboundSchema,
  description: z.string().optional(),
  holdoutAmount: z.string(),
  isDirty: z.boolean().optional(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  baseExperiment: Experiment$outboundSchema,
  relatedExperiments: z.array(Experiment$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutDetailRep$ {
  /** @deprecated use `HoldoutDetailRep$inboundSchema` instead. */
  export const inboundSchema = HoldoutDetailRep$inboundSchema;
  /** @deprecated use `HoldoutDetailRep$outboundSchema` instead. */
  export const outboundSchema = HoldoutDetailRep$outboundSchema;
  /** @deprecated use `HoldoutDetailRep$Outbound` instead. */
  export type Outbound = HoldoutDetailRep$Outbound;
}

export function holdoutDetailRepToJSON(
  holdoutDetailRep: HoldoutDetailRep,
): string {
  return JSON.stringify(
    HoldoutDetailRep$outboundSchema.parse(holdoutDetailRep),
  );
}

export function holdoutDetailRepFromJSON(
  jsonString: string,
): SafeParseResult<HoldoutDetailRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HoldoutDetailRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HoldoutDetailRep' from JSON`,
  );
}
