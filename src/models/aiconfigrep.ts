/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AIConfigRep = {
  /**
   * The key of the AI Config
   */
  key: string;
  /**
   * The name of the AI Config
   */
  name: string;
};

/** @internal */
export const AIConfigRep$inboundSchema: z.ZodType<
  AIConfigRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
});

/** @internal */
export type AIConfigRep$Outbound = {
  key: string;
  name: string;
};

/** @internal */
export const AIConfigRep$outboundSchema: z.ZodType<
  AIConfigRep$Outbound,
  z.ZodTypeDef,
  AIConfigRep
> = z.object({
  key: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigRep$ {
  /** @deprecated use `AIConfigRep$inboundSchema` instead. */
  export const inboundSchema = AIConfigRep$inboundSchema;
  /** @deprecated use `AIConfigRep$outboundSchema` instead. */
  export const outboundSchema = AIConfigRep$outboundSchema;
  /** @deprecated use `AIConfigRep$Outbound` instead. */
  export type Outbound = AIConfigRep$Outbound;
}

export function aiConfigRepToJSON(aiConfigRep: AIConfigRep): string {
  return JSON.stringify(AIConfigRep$outboundSchema.parse(aiConfigRep));
}

export function aiConfigRepFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigRep' from JSON`,
  );
}
