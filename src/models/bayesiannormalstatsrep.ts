/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BayesianNormalStatsRep = {
  /**
   * The precision weight of the data mean
   */
  dataWeight?: number | undefined;
  /**
   * Mean of the prior distribution
   */
  priorMean?: number | undefined;
};

/** @internal */
export const BayesianNormalStatsRep$inboundSchema: z.ZodType<
  BayesianNormalStatsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataWeight: z.number().optional(),
  priorMean: z.number().optional(),
});

/** @internal */
export type BayesianNormalStatsRep$Outbound = {
  dataWeight?: number | undefined;
  priorMean?: number | undefined;
};

/** @internal */
export const BayesianNormalStatsRep$outboundSchema: z.ZodType<
  BayesianNormalStatsRep$Outbound,
  z.ZodTypeDef,
  BayesianNormalStatsRep
> = z.object({
  dataWeight: z.number().optional(),
  priorMean: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BayesianNormalStatsRep$ {
  /** @deprecated use `BayesianNormalStatsRep$inboundSchema` instead. */
  export const inboundSchema = BayesianNormalStatsRep$inboundSchema;
  /** @deprecated use `BayesianNormalStatsRep$outboundSchema` instead. */
  export const outboundSchema = BayesianNormalStatsRep$outboundSchema;
  /** @deprecated use `BayesianNormalStatsRep$Outbound` instead. */
  export type Outbound = BayesianNormalStatsRep$Outbound;
}

export function bayesianNormalStatsRepToJSON(
  bayesianNormalStatsRep: BayesianNormalStatsRep,
): string {
  return JSON.stringify(
    BayesianNormalStatsRep$outboundSchema.parse(bayesianNormalStatsRep),
  );
}

export function bayesianNormalStatsRepFromJSON(
  jsonString: string,
): SafeParseResult<BayesianNormalStatsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BayesianNormalStatsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BayesianNormalStatsRep' from JSON`,
  );
}
