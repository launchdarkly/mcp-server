/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FlagListingRep = {
  /**
   * The flag name
   */
  name: string;
  /**
   * The flag key
   */
  key: string;
  links?: { [k: string]: Link } | undefined;
  site?: Link | undefined;
};

/** @internal */
export const FlagListingRep$inboundSchema: z.ZodType<
  FlagListingRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  _links: z.record(Link$inboundSchema).optional(),
  _site: Link$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_site": "site",
  });
});

/** @internal */
export type FlagListingRep$Outbound = {
  name: string;
  key: string;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _site?: Link$Outbound | undefined;
};

/** @internal */
export const FlagListingRep$outboundSchema: z.ZodType<
  FlagListingRep$Outbound,
  z.ZodTypeDef,
  FlagListingRep
> = z.object({
  name: z.string(),
  key: z.string(),
  links: z.record(Link$outboundSchema).optional(),
  site: Link$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    site: "_site",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagListingRep$ {
  /** @deprecated use `FlagListingRep$inboundSchema` instead. */
  export const inboundSchema = FlagListingRep$inboundSchema;
  /** @deprecated use `FlagListingRep$outboundSchema` instead. */
  export const outboundSchema = FlagListingRep$outboundSchema;
  /** @deprecated use `FlagListingRep$Outbound` instead. */
  export type Outbound = FlagListingRep$Outbound;
}

export function flagListingRepToJSON(flagListingRep: FlagListingRep): string {
  return JSON.stringify(FlagListingRep$outboundSchema.parse(flagListingRep));
}

export function flagListingRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagListingRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagListingRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagListingRep' from JSON`,
  );
}
