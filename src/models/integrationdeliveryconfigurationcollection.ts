/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IntegrationDeliveryConfiguration,
  IntegrationDeliveryConfiguration$inboundSchema,
  IntegrationDeliveryConfiguration$Outbound,
  IntegrationDeliveryConfiguration$outboundSchema,
} from "./integrationdeliveryconfiguration.js";
import {
  IntegrationDeliveryConfigurationCollectionLinks,
  IntegrationDeliveryConfigurationCollectionLinks$inboundSchema,
  IntegrationDeliveryConfigurationCollectionLinks$Outbound,
  IntegrationDeliveryConfigurationCollectionLinks$outboundSchema,
} from "./integrationdeliveryconfigurationcollectionlinks.js";

export type IntegrationDeliveryConfigurationCollection = {
  links: IntegrationDeliveryConfigurationCollectionLinks;
  /**
   * An array of integration delivery configurations
   */
  items: Array<IntegrationDeliveryConfiguration>;
};

/** @internal */
export const IntegrationDeliveryConfigurationCollection$inboundSchema:
  z.ZodType<IntegrationDeliveryConfigurationCollection, z.ZodTypeDef, unknown> =
    z.object({
      _links: IntegrationDeliveryConfigurationCollectionLinks$inboundSchema,
      items: z.array(IntegrationDeliveryConfiguration$inboundSchema),
    }).transform((v) => {
      return remap$(v, {
        "_links": "links",
      });
    });

/** @internal */
export type IntegrationDeliveryConfigurationCollection$Outbound = {
  _links: IntegrationDeliveryConfigurationCollectionLinks$Outbound;
  items: Array<IntegrationDeliveryConfiguration$Outbound>;
};

/** @internal */
export const IntegrationDeliveryConfigurationCollection$outboundSchema:
  z.ZodType<
    IntegrationDeliveryConfigurationCollection$Outbound,
    z.ZodTypeDef,
    IntegrationDeliveryConfigurationCollection
  > = z.object({
    links: IntegrationDeliveryConfigurationCollectionLinks$outboundSchema,
    items: z.array(IntegrationDeliveryConfiguration$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationDeliveryConfigurationCollection$ {
  /** @deprecated use `IntegrationDeliveryConfigurationCollection$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationDeliveryConfigurationCollection$inboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationCollection$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationDeliveryConfigurationCollection$outboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationCollection$Outbound` instead. */
  export type Outbound = IntegrationDeliveryConfigurationCollection$Outbound;
}

export function integrationDeliveryConfigurationCollectionToJSON(
  integrationDeliveryConfigurationCollection:
    IntegrationDeliveryConfigurationCollection,
): string {
  return JSON.stringify(
    IntegrationDeliveryConfigurationCollection$outboundSchema.parse(
      integrationDeliveryConfigurationCollection,
    ),
  );
}

export function integrationDeliveryConfigurationCollectionFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationDeliveryConfigurationCollection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationDeliveryConfigurationCollection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IntegrationDeliveryConfigurationCollection' from JSON`,
  );
}
