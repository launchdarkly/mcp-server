/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IntegrationSubscriptionStatusRep,
  IntegrationSubscriptionStatusRep$inboundSchema,
  IntegrationSubscriptionStatusRep$Outbound,
  IntegrationSubscriptionStatusRep$outboundSchema,
} from "./integrationsubscriptionstatusrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Statement,
  Statement$inboundSchema,
  Statement$Outbound,
  Statement$outboundSchema,
} from "./statement.js";

export type Integration = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The ID for this integration audit log subscription
   */
  id?: string | undefined;
  /**
   * The type of integration
   */
  kind?: string | undefined;
  /**
   * A human-friendly name for the integration
   */
  name?: string | undefined;
  /**
   * Details on configuration for an integration of this type. Refer to the <code>formVariables</code> field in the corresponding <code>manifest.json</code> for a full list of fields for each integration.
   */
  config?: { [k: string]: any } | undefined;
  /**
   * Represents a Custom role policy, defining a resource kinds filter the integration audit log subscription responds to.
   */
  statements?: Array<Statement> | undefined;
  /**
   * Whether the integration is currently active
   */
  on?: boolean | undefined;
  /**
   * An array of tags for this integration
   */
  tags?: Array<string> | undefined;
  access?: Access | undefined;
  status?: IntegrationSubscriptionStatusRep | undefined;
  /**
   * Slack webhook receiver URL. Only used for legacy Slack webhook integrations.
   */
  url?: string | undefined;
  /**
   * Datadog API key. Only used for legacy Datadog webhook integrations.
   */
  apiKey?: string | undefined;
};

/** @internal */
export const Integration$inboundSchema: z.ZodType<
  Integration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  _id: z.string().optional(),
  kind: z.string().optional(),
  name: z.string().optional(),
  config: z.record(z.any()).optional(),
  statements: z.array(Statement$inboundSchema).optional(),
  on: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  _access: Access$inboundSchema.optional(),
  _status: IntegrationSubscriptionStatusRep$inboundSchema.optional(),
  url: z.string().optional(),
  apiKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
    "_access": "access",
    "_status": "status",
  });
});

/** @internal */
export type Integration$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  _id?: string | undefined;
  kind?: string | undefined;
  name?: string | undefined;
  config?: { [k: string]: any } | undefined;
  statements?: Array<Statement$Outbound> | undefined;
  on?: boolean | undefined;
  tags?: Array<string> | undefined;
  _access?: Access$Outbound | undefined;
  _status?: IntegrationSubscriptionStatusRep$Outbound | undefined;
  url?: string | undefined;
  apiKey?: string | undefined;
};

/** @internal */
export const Integration$outboundSchema: z.ZodType<
  Integration$Outbound,
  z.ZodTypeDef,
  Integration
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  id: z.string().optional(),
  kind: z.string().optional(),
  name: z.string().optional(),
  config: z.record(z.any()).optional(),
  statements: z.array(Statement$outboundSchema).optional(),
  on: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  access: Access$outboundSchema.optional(),
  status: IntegrationSubscriptionStatusRep$outboundSchema.optional(),
  url: z.string().optional(),
  apiKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
    status: "_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integration$ {
  /** @deprecated use `Integration$inboundSchema` instead. */
  export const inboundSchema = Integration$inboundSchema;
  /** @deprecated use `Integration$outboundSchema` instead. */
  export const outboundSchema = Integration$outboundSchema;
  /** @deprecated use `Integration$Outbound` instead. */
  export type Outbound = Integration$Outbound;
}

export function integrationToJSON(integration: Integration): string {
  return JSON.stringify(Integration$outboundSchema.parse(integration));
}

export function integrationFromJSON(
  jsonString: string,
): SafeParseResult<Integration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integration' from JSON`,
  );
}
