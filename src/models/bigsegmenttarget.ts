/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BigSegmentTarget = {
  /**
   * The target key
   */
  userKey: string;
  /**
   * Indicates whether the target is included.<br />Included targets are always segment members, regardless of segment rules.
   */
  included: boolean;
  /**
   * Indicates whether the target is excluded.<br />Segment rules bypass excluded targets, so they will never be included based on rules. Excluded targets may still be included explicitly.
   */
  excluded: boolean;
};

/** @internal */
export const BigSegmentTarget$inboundSchema: z.ZodType<
  BigSegmentTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  userKey: z.string(),
  included: z.boolean(),
  excluded: z.boolean(),
});

/** @internal */
export type BigSegmentTarget$Outbound = {
  userKey: string;
  included: boolean;
  excluded: boolean;
};

/** @internal */
export const BigSegmentTarget$outboundSchema: z.ZodType<
  BigSegmentTarget$Outbound,
  z.ZodTypeDef,
  BigSegmentTarget
> = z.object({
  userKey: z.string(),
  included: z.boolean(),
  excluded: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BigSegmentTarget$ {
  /** @deprecated use `BigSegmentTarget$inboundSchema` instead. */
  export const inboundSchema = BigSegmentTarget$inboundSchema;
  /** @deprecated use `BigSegmentTarget$outboundSchema` instead. */
  export const outboundSchema = BigSegmentTarget$outboundSchema;
  /** @deprecated use `BigSegmentTarget$Outbound` instead. */
  export type Outbound = BigSegmentTarget$Outbound;
}

export function bigSegmentTargetToJSON(
  bigSegmentTarget: BigSegmentTarget,
): string {
  return JSON.stringify(
    BigSegmentTarget$outboundSchema.parse(bigSegmentTarget),
  );
}

export function bigSegmentTargetFromJSON(
  jsonString: string,
): SafeParseResult<BigSegmentTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BigSegmentTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BigSegmentTarget' from JSON`,
  );
}
