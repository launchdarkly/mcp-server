/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreatePhaseInput,
  CreatePhaseInput$inboundSchema,
  CreatePhaseInput$Outbound,
  CreatePhaseInput$outboundSchema,
} from "./createphaseinput.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateReleasePipelineInput = {
  /**
   * The release pipeline description
   */
  description?: string | undefined;
  /**
   * The unique identifier of this release pipeline
   */
  key: string;
  /**
   * The name of the release pipeline
   */
  name: string;
  /**
   * A logical grouping of one or more environments that share attributes for rolling out changes
   */
  phases: Array<CreatePhaseInput>;
  /**
   * A list of tags for this release pipeline
   */
  tags?: Array<string> | undefined;
  /**
   * Whether or not the newly created pipeline should be set as the default pipeline for this project
   */
  isProjectDefault?: boolean | undefined;
  /**
   * Whether or not the pipeline is enabled for Release Automation.
   */
  isLegacy?: boolean | undefined;
};

/** @internal */
export const CreateReleasePipelineInput$inboundSchema: z.ZodType<
  CreateReleasePipelineInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  phases: z.array(CreatePhaseInput$inboundSchema),
  tags: z.array(z.string()).optional(),
  isProjectDefault: z.boolean().optional(),
  isLegacy: z.boolean().optional(),
});

/** @internal */
export type CreateReleasePipelineInput$Outbound = {
  description?: string | undefined;
  key: string;
  name: string;
  phases: Array<CreatePhaseInput$Outbound>;
  tags?: Array<string> | undefined;
  isProjectDefault?: boolean | undefined;
  isLegacy?: boolean | undefined;
};

/** @internal */
export const CreateReleasePipelineInput$outboundSchema: z.ZodType<
  CreateReleasePipelineInput$Outbound,
  z.ZodTypeDef,
  CreateReleasePipelineInput
> = z.object({
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  phases: z.array(CreatePhaseInput$outboundSchema),
  tags: z.array(z.string()).optional(),
  isProjectDefault: z.boolean().optional(),
  isLegacy: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReleasePipelineInput$ {
  /** @deprecated use `CreateReleasePipelineInput$inboundSchema` instead. */
  export const inboundSchema = CreateReleasePipelineInput$inboundSchema;
  /** @deprecated use `CreateReleasePipelineInput$outboundSchema` instead. */
  export const outboundSchema = CreateReleasePipelineInput$outboundSchema;
  /** @deprecated use `CreateReleasePipelineInput$Outbound` instead. */
  export type Outbound = CreateReleasePipelineInput$Outbound;
}

export function createReleasePipelineInputToJSON(
  createReleasePipelineInput: CreateReleasePipelineInput,
): string {
  return JSON.stringify(
    CreateReleasePipelineInput$outboundSchema.parse(createReleasePipelineInput),
  );
}

export function createReleasePipelineInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateReleasePipelineInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReleasePipelineInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReleasePipelineInput' from JSON`,
  );
}
