/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeatureFlagStatus,
  FeatureFlagStatus$inboundSchema,
  FeatureFlagStatus$Outbound,
  FeatureFlagStatus$outboundSchema,
} from "./featureflagstatus.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FeatureFlagStatusAcrossEnvironments = {
  /**
   * Flag status for environment.
   */
  environments: { [k: string]: FeatureFlagStatus };
  /**
   * feature flag key
   */
  key: string;
  links: { [k: string]: Link };
};

/** @internal */
export const FeatureFlagStatusAcrossEnvironments$inboundSchema: z.ZodType<
  FeatureFlagStatusAcrossEnvironments,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.record(FeatureFlagStatus$inboundSchema),
  key: z.string(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FeatureFlagStatusAcrossEnvironments$Outbound = {
  environments: { [k: string]: FeatureFlagStatus$Outbound };
  key: string;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const FeatureFlagStatusAcrossEnvironments$outboundSchema: z.ZodType<
  FeatureFlagStatusAcrossEnvironments$Outbound,
  z.ZodTypeDef,
  FeatureFlagStatusAcrossEnvironments
> = z.object({
  environments: z.record(FeatureFlagStatus$outboundSchema),
  key: z.string(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureFlagStatusAcrossEnvironments$ {
  /** @deprecated use `FeatureFlagStatusAcrossEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    FeatureFlagStatusAcrossEnvironments$inboundSchema;
  /** @deprecated use `FeatureFlagStatusAcrossEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    FeatureFlagStatusAcrossEnvironments$outboundSchema;
  /** @deprecated use `FeatureFlagStatusAcrossEnvironments$Outbound` instead. */
  export type Outbound = FeatureFlagStatusAcrossEnvironments$Outbound;
}

export function featureFlagStatusAcrossEnvironmentsToJSON(
  featureFlagStatusAcrossEnvironments: FeatureFlagStatusAcrossEnvironments,
): string {
  return JSON.stringify(
    FeatureFlagStatusAcrossEnvironments$outboundSchema.parse(
      featureFlagStatusAcrossEnvironments,
    ),
  );
}

export function featureFlagStatusAcrossEnvironmentsFromJSON(
  jsonString: string,
): SafeParseResult<FeatureFlagStatusAcrossEnvironments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FeatureFlagStatusAcrossEnvironments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureFlagStatusAcrossEnvironments' from JSON`,
  );
}
