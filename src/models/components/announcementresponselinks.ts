/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementLink,
  AnnouncementLink$inboundSchema,
  AnnouncementLink$Outbound,
  AnnouncementLink$outboundSchema,
} from "./announcementlink.js";

export type AnnouncementResponseLinks = {
  parent: AnnouncementLink;
};

/** @internal */
export const AnnouncementResponseLinks$inboundSchema: z.ZodType<
  AnnouncementResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent: AnnouncementLink$inboundSchema,
});

/** @internal */
export type AnnouncementResponseLinks$Outbound = {
  parent: AnnouncementLink$Outbound;
};

/** @internal */
export const AnnouncementResponseLinks$outboundSchema: z.ZodType<
  AnnouncementResponseLinks$Outbound,
  z.ZodTypeDef,
  AnnouncementResponseLinks
> = z.object({
  parent: AnnouncementLink$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementResponseLinks$ {
  /** @deprecated use `AnnouncementResponseLinks$inboundSchema` instead. */
  export const inboundSchema = AnnouncementResponseLinks$inboundSchema;
  /** @deprecated use `AnnouncementResponseLinks$outboundSchema` instead. */
  export const outboundSchema = AnnouncementResponseLinks$outboundSchema;
  /** @deprecated use `AnnouncementResponseLinks$Outbound` instead. */
  export type Outbound = AnnouncementResponseLinks$Outbound;
}

export function announcementResponseLinksToJSON(
  announcementResponseLinks: AnnouncementResponseLinks,
): string {
  return JSON.stringify(
    AnnouncementResponseLinks$outboundSchema.parse(announcementResponseLinks),
  );
}

export function announcementResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementResponseLinks' from JSON`,
  );
}
