/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompletedBy,
  CompletedBy$inboundSchema,
  CompletedBy$Outbound,
  CompletedBy$outboundSchema,
} from "./completedby.js";
import {
  PhaseConfiguration,
  PhaseConfiguration$inboundSchema,
  PhaseConfiguration$Outbound,
  PhaseConfiguration$outboundSchema,
} from "./phaseconfiguration.js";
import {
  ReleaseAudience,
  ReleaseAudience$inboundSchema,
  ReleaseAudience$Outbound,
  ReleaseAudience$outboundSchema,
} from "./releaseaudience.js";

export type ReleasePhase = {
  /**
   * The phase ID
   */
  id: string;
  /**
   * The release phase name
   */
  name: string;
  /**
   * Whether this phase is complete
   */
  complete: boolean;
  creationDate: number;
  completionDate?: number | undefined;
  completedBy?: CompletedBy | undefined;
  /**
   * A logical grouping of one or more environments that share attributes for rolling out changes
   */
  audiences: Array<ReleaseAudience>;
  status?: string | undefined;
  /**
   * Whether or not this phase has started
   */
  started?: boolean | undefined;
  startedDate?: number | undefined;
  configuration?: PhaseConfiguration | undefined;
};

/** @internal */
export const ReleasePhase$inboundSchema: z.ZodType<
  ReleasePhase,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _name: z.string(),
  complete: z.boolean(),
  _creationDate: z.number().int(),
  _completionDate: z.number().int().optional(),
  _completedBy: CompletedBy$inboundSchema.optional(),
  _audiences: z.array(ReleaseAudience$inboundSchema),
  status: z.string().optional(),
  started: z.boolean().optional(),
  _startedDate: z.number().int().optional(),
  configuration: PhaseConfiguration$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_name": "name",
    "_creationDate": "creationDate",
    "_completionDate": "completionDate",
    "_completedBy": "completedBy",
    "_audiences": "audiences",
    "_startedDate": "startedDate",
  });
});

/** @internal */
export type ReleasePhase$Outbound = {
  _id: string;
  _name: string;
  complete: boolean;
  _creationDate: number;
  _completionDate?: number | undefined;
  _completedBy?: CompletedBy$Outbound | undefined;
  _audiences: Array<ReleaseAudience$Outbound>;
  status?: string | undefined;
  started?: boolean | undefined;
  _startedDate?: number | undefined;
  configuration?: PhaseConfiguration$Outbound | undefined;
};

/** @internal */
export const ReleasePhase$outboundSchema: z.ZodType<
  ReleasePhase$Outbound,
  z.ZodTypeDef,
  ReleasePhase
> = z.object({
  id: z.string(),
  name: z.string(),
  complete: z.boolean(),
  creationDate: z.number().int(),
  completionDate: z.number().int().optional(),
  completedBy: CompletedBy$outboundSchema.optional(),
  audiences: z.array(ReleaseAudience$outboundSchema),
  status: z.string().optional(),
  started: z.boolean().optional(),
  startedDate: z.number().int().optional(),
  configuration: PhaseConfiguration$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    name: "_name",
    creationDate: "_creationDate",
    completionDate: "_completionDate",
    completedBy: "_completedBy",
    audiences: "_audiences",
    startedDate: "_startedDate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleasePhase$ {
  /** @deprecated use `ReleasePhase$inboundSchema` instead. */
  export const inboundSchema = ReleasePhase$inboundSchema;
  /** @deprecated use `ReleasePhase$outboundSchema` instead. */
  export const outboundSchema = ReleasePhase$outboundSchema;
  /** @deprecated use `ReleasePhase$Outbound` instead. */
  export type Outbound = ReleasePhase$Outbound;
}

export function releasePhaseToJSON(releasePhase: ReleasePhase): string {
  return JSON.stringify(ReleasePhase$outboundSchema.parse(releasePhase));
}

export function releasePhaseFromJSON(
  jsonString: string,
): SafeParseResult<ReleasePhase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleasePhase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleasePhase' from JSON`,
  );
}
