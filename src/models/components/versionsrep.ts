/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VersionsRep = {
  /**
   * A list of all valid API versions. To learn more about our versioning, read [Versioning](https://launchdarkly.com/docs/api#versioning).
   */
  validVersions: Array<number>;
  latestVersion: number;
  currentVersion: number;
  /**
   * Whether the version of the API currently is use is a beta version. This is always <code>true</code> if you add the <code>LD-API-Version: beta</code> header to your request.
   */
  beta?: boolean | undefined;
};

/** @internal */
export const VersionsRep$inboundSchema: z.ZodType<
  VersionsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  validVersions: z.array(z.number().int()),
  latestVersion: z.number().int(),
  currentVersion: z.number().int(),
  beta: z.boolean().optional(),
});

/** @internal */
export type VersionsRep$Outbound = {
  validVersions: Array<number>;
  latestVersion: number;
  currentVersion: number;
  beta?: boolean | undefined;
};

/** @internal */
export const VersionsRep$outboundSchema: z.ZodType<
  VersionsRep$Outbound,
  z.ZodTypeDef,
  VersionsRep
> = z.object({
  validVersions: z.array(z.number().int()),
  latestVersion: z.number().int(),
  currentVersion: z.number().int(),
  beta: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VersionsRep$ {
  /** @deprecated use `VersionsRep$inboundSchema` instead. */
  export const inboundSchema = VersionsRep$inboundSchema;
  /** @deprecated use `VersionsRep$outboundSchema` instead. */
  export const outboundSchema = VersionsRep$outboundSchema;
  /** @deprecated use `VersionsRep$Outbound` instead. */
  export type Outbound = VersionsRep$Outbound;
}

export function versionsRepToJSON(versionsRep: VersionsRep): string {
  return JSON.stringify(VersionsRep$outboundSchema.parse(versionsRep));
}

export function versionsRepFromJSON(
  jsonString: string,
): SafeParseResult<VersionsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VersionsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VersionsRep' from JSON`,
  );
}
