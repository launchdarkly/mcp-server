/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AiConfigsExperimentEnvironmentSettingRep,
  AiConfigsExperimentEnvironmentSettingRep$inboundSchema,
  AiConfigsExperimentEnvironmentSettingRep$Outbound,
  AiConfigsExperimentEnvironmentSettingRep$outboundSchema,
} from "./aiconfigsexperimentenvironmentsettingrep.js";
import {
  AiConfigsMetricListingRep,
  AiConfigsMetricListingRep$inboundSchema,
  AiConfigsMetricListingRep$Outbound,
  AiConfigsMetricListingRep$outboundSchema,
} from "./aiconfigsmetriclistingrep.js";

export type AiConfigsLegacyExperimentRep = {
  metricKey?: string | undefined;
  metric?: AiConfigsMetricListingRep | undefined;
  environments?: Array<string> | undefined;
  environmentSettings?: {
    [k: string]: AiConfigsExperimentEnvironmentSettingRep;
  } | undefined;
};

/** @internal */
export const AiConfigsLegacyExperimentRep$inboundSchema: z.ZodType<
  AiConfigsLegacyExperimentRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  metricKey: z.string().optional(),
  _metric: AiConfigsMetricListingRep$inboundSchema.optional(),
  environments: z.array(z.string()).optional(),
  _environmentSettings: z.record(
    AiConfigsExperimentEnvironmentSettingRep$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_metric": "metric",
    "_environmentSettings": "environmentSettings",
  });
});

/** @internal */
export type AiConfigsLegacyExperimentRep$Outbound = {
  metricKey?: string | undefined;
  _metric?: AiConfigsMetricListingRep$Outbound | undefined;
  environments?: Array<string> | undefined;
  _environmentSettings?: {
    [k: string]: AiConfigsExperimentEnvironmentSettingRep$Outbound;
  } | undefined;
};

/** @internal */
export const AiConfigsLegacyExperimentRep$outboundSchema: z.ZodType<
  AiConfigsLegacyExperimentRep$Outbound,
  z.ZodTypeDef,
  AiConfigsLegacyExperimentRep
> = z.object({
  metricKey: z.string().optional(),
  metric: AiConfigsMetricListingRep$outboundSchema.optional(),
  environments: z.array(z.string()).optional(),
  environmentSettings: z.record(
    AiConfigsExperimentEnvironmentSettingRep$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    metric: "_metric",
    environmentSettings: "_environmentSettings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiConfigsLegacyExperimentRep$ {
  /** @deprecated use `AiConfigsLegacyExperimentRep$inboundSchema` instead. */
  export const inboundSchema = AiConfigsLegacyExperimentRep$inboundSchema;
  /** @deprecated use `AiConfigsLegacyExperimentRep$outboundSchema` instead. */
  export const outboundSchema = AiConfigsLegacyExperimentRep$outboundSchema;
  /** @deprecated use `AiConfigsLegacyExperimentRep$Outbound` instead. */
  export type Outbound = AiConfigsLegacyExperimentRep$Outbound;
}

export function aiConfigsLegacyExperimentRepToJSON(
  aiConfigsLegacyExperimentRep: AiConfigsLegacyExperimentRep,
): string {
  return JSON.stringify(
    AiConfigsLegacyExperimentRep$outboundSchema.parse(
      aiConfigsLegacyExperimentRep,
    ),
  );
}

export function aiConfigsLegacyExperimentRepFromJSON(
  jsonString: string,
): SafeParseResult<AiConfigsLegacyExperimentRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiConfigsLegacyExperimentRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiConfigsLegacyExperimentRep' from JSON`,
  );
}
