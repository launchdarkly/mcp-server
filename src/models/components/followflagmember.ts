/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FollowFlagMember = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The member's ID
   */
  id: string;
  /**
   * The member's first name
   */
  firstName?: string | undefined;
  /**
   * The member's last name
   */
  lastName?: string | undefined;
  /**
   * The member's built-in role. If the member has no custom roles, this role will be in effect.
   */
  role: string;
  /**
   * The member's email address
   */
  email: string;
};

/** @internal */
export const FollowFlagMember$inboundSchema: z.ZodType<
  FollowFlagMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  _id: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: z.string(),
  email: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
  });
});

/** @internal */
export type FollowFlagMember$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _id: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  role: string;
  email: string;
};

/** @internal */
export const FollowFlagMember$outboundSchema: z.ZodType<
  FollowFlagMember$Outbound,
  z.ZodTypeDef,
  FollowFlagMember
> = z.object({
  links: z.record(Link$outboundSchema),
  id: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: z.string(),
  email: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FollowFlagMember$ {
  /** @deprecated use `FollowFlagMember$inboundSchema` instead. */
  export const inboundSchema = FollowFlagMember$inboundSchema;
  /** @deprecated use `FollowFlagMember$outboundSchema` instead. */
  export const outboundSchema = FollowFlagMember$outboundSchema;
  /** @deprecated use `FollowFlagMember$Outbound` instead. */
  export type Outbound = FollowFlagMember$Outbound;
}

export function followFlagMemberToJSON(
  followFlagMember: FollowFlagMember,
): string {
  return JSON.stringify(
    FollowFlagMember$outboundSchema.parse(followFlagMember),
  );
}

export function followFlagMemberFromJSON(
  jsonString: string,
): SafeParseResult<FollowFlagMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FollowFlagMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FollowFlagMember' from JSON`,
  );
}
