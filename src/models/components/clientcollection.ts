/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Client,
  Client$inboundSchema,
  Client$Outbound,
  Client$outboundSchema,
} from "./client.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ClientCollection = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * List of client objects
   */
  items: Array<Client>;
};

/** @internal */
export const ClientCollection$inboundSchema: z.ZodType<
  ClientCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  items: z.array(Client$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ClientCollection$Outbound = {
  _links: { [k: string]: Link$Outbound };
  items: Array<Client$Outbound>;
};

/** @internal */
export const ClientCollection$outboundSchema: z.ZodType<
  ClientCollection$Outbound,
  z.ZodTypeDef,
  ClientCollection
> = z.object({
  links: z.record(Link$outboundSchema),
  items: z.array(Client$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCollection$ {
  /** @deprecated use `ClientCollection$inboundSchema` instead. */
  export const inboundSchema = ClientCollection$inboundSchema;
  /** @deprecated use `ClientCollection$outboundSchema` instead. */
  export const outboundSchema = ClientCollection$outboundSchema;
  /** @deprecated use `ClientCollection$Outbound` instead. */
  export type Outbound = ClientCollection$Outbound;
}

export function clientCollectionToJSON(
  clientCollection: ClientCollection,
): string {
  return JSON.stringify(
    ClientCollection$outboundSchema.parse(clientCollection),
  );
}

export function clientCollectionFromJSON(
  jsonString: string,
): SafeParseResult<ClientCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCollection' from JSON`,
  );
}
