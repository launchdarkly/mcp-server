/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SDKVersionRep = {
  /**
   * The SDK name, or "Unknown"
   */
  sdk: string;
  /**
   * The version number, or "Unknown"
   */
  version: string;
};

/** @internal */
export const SDKVersionRep$inboundSchema: z.ZodType<
  SDKVersionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  sdk: z.string(),
  version: z.string(),
});

/** @internal */
export type SDKVersionRep$Outbound = {
  sdk: string;
  version: string;
};

/** @internal */
export const SDKVersionRep$outboundSchema: z.ZodType<
  SDKVersionRep$Outbound,
  z.ZodTypeDef,
  SDKVersionRep
> = z.object({
  sdk: z.string(),
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SDKVersionRep$ {
  /** @deprecated use `SDKVersionRep$inboundSchema` instead. */
  export const inboundSchema = SDKVersionRep$inboundSchema;
  /** @deprecated use `SDKVersionRep$outboundSchema` instead. */
  export const outboundSchema = SDKVersionRep$outboundSchema;
  /** @deprecated use `SDKVersionRep$Outbound` instead. */
  export type Outbound = SDKVersionRep$Outbound;
}

export function sdkVersionRepToJSON(sdkVersionRep: SDKVersionRep): string {
  return JSON.stringify(SDKVersionRep$outboundSchema.parse(sdkVersionRep));
}

export function sdkVersionRepFromJSON(
  jsonString: string,
): SafeParseResult<SDKVersionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SDKVersionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SDKVersionRep' from JSON`,
  );
}
