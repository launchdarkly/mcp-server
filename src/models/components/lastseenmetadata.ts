/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LastSeenMetadata = {
  /**
   * The ID of the token used in the member's last session
   */
  tokenId?: string | undefined;
};

/** @internal */
export const LastSeenMetadata$inboundSchema: z.ZodType<
  LastSeenMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenId: z.string().optional(),
});

/** @internal */
export type LastSeenMetadata$Outbound = {
  tokenId?: string | undefined;
};

/** @internal */
export const LastSeenMetadata$outboundSchema: z.ZodType<
  LastSeenMetadata$Outbound,
  z.ZodTypeDef,
  LastSeenMetadata
> = z.object({
  tokenId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LastSeenMetadata$ {
  /** @deprecated use `LastSeenMetadata$inboundSchema` instead. */
  export const inboundSchema = LastSeenMetadata$inboundSchema;
  /** @deprecated use `LastSeenMetadata$outboundSchema` instead. */
  export const outboundSchema = LastSeenMetadata$outboundSchema;
  /** @deprecated use `LastSeenMetadata$Outbound` instead. */
  export type Outbound = LastSeenMetadata$Outbound;
}

export function lastSeenMetadataToJSON(
  lastSeenMetadata: LastSeenMetadata,
): string {
  return JSON.stringify(
    LastSeenMetadata$outboundSchema.parse(lastSeenMetadata),
  );
}

export function lastSeenMetadataFromJSON(
  jsonString: string,
): SafeParseResult<LastSeenMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LastSeenMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LastSeenMetadata' from JSON`,
  );
}
