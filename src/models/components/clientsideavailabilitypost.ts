/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientSideAvailabilityPost = {
  /**
   * Whether to enable availability for client-side SDKs. Defaults to <code>false</code>.
   */
  usingEnvironmentId: boolean;
  /**
   * Whether to enable availability for mobile SDKs. Defaults to <code>true</code>.
   */
  usingMobileKey: boolean;
};

/** @internal */
export const ClientSideAvailabilityPost$inboundSchema: z.ZodType<
  ClientSideAvailabilityPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  usingEnvironmentId: z.boolean(),
  usingMobileKey: z.boolean(),
});

/** @internal */
export type ClientSideAvailabilityPost$Outbound = {
  usingEnvironmentId: boolean;
  usingMobileKey: boolean;
};

/** @internal */
export const ClientSideAvailabilityPost$outboundSchema: z.ZodType<
  ClientSideAvailabilityPost$Outbound,
  z.ZodTypeDef,
  ClientSideAvailabilityPost
> = z.object({
  usingEnvironmentId: z.boolean(),
  usingMobileKey: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSideAvailabilityPost$ {
  /** @deprecated use `ClientSideAvailabilityPost$inboundSchema` instead. */
  export const inboundSchema = ClientSideAvailabilityPost$inboundSchema;
  /** @deprecated use `ClientSideAvailabilityPost$outboundSchema` instead. */
  export const outboundSchema = ClientSideAvailabilityPost$outboundSchema;
  /** @deprecated use `ClientSideAvailabilityPost$Outbound` instead. */
  export type Outbound = ClientSideAvailabilityPost$Outbound;
}

export function clientSideAvailabilityPostToJSON(
  clientSideAvailabilityPost: ClientSideAvailabilityPost,
): string {
  return JSON.stringify(
    ClientSideAvailabilityPost$outboundSchema.parse(clientSideAvailabilityPost),
  );
}

export function clientSideAvailabilityPostFromJSON(
  jsonString: string,
): SafeParseResult<ClientSideAvailabilityPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSideAvailabilityPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSideAvailabilityPost' from JSON`,
  );
}
