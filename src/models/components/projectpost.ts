/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DefaultClientSideAvailabilityPost,
  DefaultClientSideAvailabilityPost$inboundSchema,
  DefaultClientSideAvailabilityPost$Outbound,
  DefaultClientSideAvailabilityPost$outboundSchema,
} from "./defaultclientsideavailabilitypost.js";
import {
  EnvironmentPost,
  EnvironmentPost$inboundSchema,
  EnvironmentPost$Outbound,
  EnvironmentPost$outboundSchema,
} from "./environmentpost.js";
import {
  NamingConvention,
  NamingConvention$inboundSchema,
  NamingConvention$Outbound,
  NamingConvention$outboundSchema,
} from "./namingconvention.js";

export type ProjectPost = {
  /**
   * A human-friendly name for the project.
   */
  name: string;
  /**
   * A unique key used to reference the project in your code.
   */
  key: string;
  /**
   * Whether or not flags created in this project are made available to the client-side JavaScript SDK by default.
   */
  includeInSnippetByDefault?: boolean | undefined;
  defaultClientSideAvailability?: DefaultClientSideAvailabilityPost | undefined;
  /**
   * Tags for the project
   */
  tags?: Array<string> | undefined;
  /**
   * Creates the provided environments for this project. If omitted default environments will be created instead.
   */
  environments?: Array<EnvironmentPost> | undefined;
  namingConvention?: NamingConvention | undefined;
};

/** @internal */
export const ProjectPost$inboundSchema: z.ZodType<
  ProjectPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  includeInSnippetByDefault: z.boolean().optional(),
  defaultClientSideAvailability: DefaultClientSideAvailabilityPost$inboundSchema
    .optional(),
  tags: z.array(z.string()).optional(),
  environments: z.array(EnvironmentPost$inboundSchema).optional(),
  namingConvention: NamingConvention$inboundSchema.optional(),
});

/** @internal */
export type ProjectPost$Outbound = {
  name: string;
  key: string;
  includeInSnippetByDefault?: boolean | undefined;
  defaultClientSideAvailability?:
    | DefaultClientSideAvailabilityPost$Outbound
    | undefined;
  tags?: Array<string> | undefined;
  environments?: Array<EnvironmentPost$Outbound> | undefined;
  namingConvention?: NamingConvention$Outbound | undefined;
};

/** @internal */
export const ProjectPost$outboundSchema: z.ZodType<
  ProjectPost$Outbound,
  z.ZodTypeDef,
  ProjectPost
> = z.object({
  name: z.string(),
  key: z.string(),
  includeInSnippetByDefault: z.boolean().optional(),
  defaultClientSideAvailability:
    DefaultClientSideAvailabilityPost$outboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  environments: z.array(EnvironmentPost$outboundSchema).optional(),
  namingConvention: NamingConvention$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectPost$ {
  /** @deprecated use `ProjectPost$inboundSchema` instead. */
  export const inboundSchema = ProjectPost$inboundSchema;
  /** @deprecated use `ProjectPost$outboundSchema` instead. */
  export const outboundSchema = ProjectPost$outboundSchema;
  /** @deprecated use `ProjectPost$Outbound` instead. */
  export type Outbound = ProjectPost$Outbound;
}

export function projectPostToJSON(projectPost: ProjectPost): string {
  return JSON.stringify(ProjectPost$outboundSchema.parse(projectPost));
}

export function projectPostFromJSON(
  jsonString: string,
): SafeParseResult<ProjectPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectPost' from JSON`,
  );
}
