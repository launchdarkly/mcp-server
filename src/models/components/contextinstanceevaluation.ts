/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContextInstanceEvaluationReason,
  ContextInstanceEvaluationReason$inboundSchema,
  ContextInstanceEvaluationReason$Outbound,
  ContextInstanceEvaluationReason$outboundSchema,
} from "./contextinstanceevaluationreason.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ContextInstanceEvaluation = {
  /**
   * Name of the flag.
   */
  name: string;
  /**
   * Key of the flag.
   */
  key: string;
  /**
   * The value of the flag variation that the context receives. If there is no defined default rule, this is null.
   */
  value?: any | undefined;
  reason?: ContextInstanceEvaluationReason | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ContextInstanceEvaluation$inboundSchema: z.ZodType<
  ContextInstanceEvaluation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  _value: z.any().optional(),
  reason: ContextInstanceEvaluationReason$inboundSchema.optional(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_value": "value",
    "_links": "links",
  });
});

/** @internal */
export type ContextInstanceEvaluation$Outbound = {
  name: string;
  key: string;
  _value?: any | undefined;
  reason?: ContextInstanceEvaluationReason$Outbound | undefined;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const ContextInstanceEvaluation$outboundSchema: z.ZodType<
  ContextInstanceEvaluation$Outbound,
  z.ZodTypeDef,
  ContextInstanceEvaluation
> = z.object({
  name: z.string(),
  key: z.string(),
  value: z.any().optional(),
  reason: ContextInstanceEvaluationReason$outboundSchema.optional(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    value: "_value",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextInstanceEvaluation$ {
  /** @deprecated use `ContextInstanceEvaluation$inboundSchema` instead. */
  export const inboundSchema = ContextInstanceEvaluation$inboundSchema;
  /** @deprecated use `ContextInstanceEvaluation$outboundSchema` instead. */
  export const outboundSchema = ContextInstanceEvaluation$outboundSchema;
  /** @deprecated use `ContextInstanceEvaluation$Outbound` instead. */
  export type Outbound = ContextInstanceEvaluation$Outbound;
}

export function contextInstanceEvaluationToJSON(
  contextInstanceEvaluation: ContextInstanceEvaluation,
): string {
  return JSON.stringify(
    ContextInstanceEvaluation$outboundSchema.parse(contextInstanceEvaluation),
  );
}

export function contextInstanceEvaluationFromJSON(
  jsonString: string,
): SafeParseResult<ContextInstanceEvaluation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextInstanceEvaluation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextInstanceEvaluation' from JSON`,
  );
}
