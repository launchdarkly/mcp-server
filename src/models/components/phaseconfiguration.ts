/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PhaseConfiguration = {};

/** @internal */
export const PhaseConfiguration$inboundSchema: z.ZodType<
  PhaseConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PhaseConfiguration$Outbound = {};

/** @internal */
export const PhaseConfiguration$outboundSchema: z.ZodType<
  PhaseConfiguration$Outbound,
  z.ZodTypeDef,
  PhaseConfiguration
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhaseConfiguration$ {
  /** @deprecated use `PhaseConfiguration$inboundSchema` instead. */
  export const inboundSchema = PhaseConfiguration$inboundSchema;
  /** @deprecated use `PhaseConfiguration$outboundSchema` instead. */
  export const outboundSchema = PhaseConfiguration$outboundSchema;
  /** @deprecated use `PhaseConfiguration$Outbound` instead. */
  export type Outbound = PhaseConfiguration$Outbound;
}

export function phaseConfigurationToJSON(
  phaseConfiguration: PhaseConfiguration,
): string {
  return JSON.stringify(
    PhaseConfiguration$outboundSchema.parse(phaseConfiguration),
  );
}

export function phaseConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<PhaseConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhaseConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhaseConfiguration' from JSON`,
  );
}
