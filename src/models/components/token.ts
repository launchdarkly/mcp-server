/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  Statement,
  Statement$inboundSchema,
  Statement$Outbound,
  Statement$outboundSchema,
} from "./statement.js";

export type Token = {
  id: string;
  ownerId: string;
  memberId: string;
  member?: MemberSummary | undefined;
  /**
   * A human-friendly name for the access token
   */
  name?: string | undefined;
  /**
   * A description for the access token
   */
  description?: string | undefined;
  creationDate: number;
  lastModified: number;
  /**
   * A list of custom role IDs to use as access limits for the access token
   */
  customRoleIds?: Array<string> | undefined;
  /**
   * An array of policy statements, with three attributes: effect, resources, actions. May be used in place of a built-in or custom role.
   */
  inlineRole?: Array<Statement> | undefined;
  /**
   * Built-in role for the token
   */
  role?: string | undefined;
  /**
   * The token value. When creating or resetting, contains the entire token value. Otherwise, contains the last four characters.
   */
  token?: string | undefined;
  /**
   * Whether this is a service token or a personal token
   */
  serviceToken?: boolean | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The default API version for this token
   */
  defaultApiVersion?: number | undefined;
  lastUsed?: number | undefined;
};

/** @internal */
export const Token$inboundSchema: z.ZodType<Token, z.ZodTypeDef, unknown> = z
  .object({
    _id: z.string(),
    ownerId: z.string(),
    memberId: z.string(),
    _member: MemberSummary$inboundSchema.optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    creationDate: z.number().int(),
    lastModified: z.number().int(),
    customRoleIds: z.array(z.string()).optional(),
    inlineRole: z.array(Statement$inboundSchema).optional(),
    role: z.string().optional(),
    token: z.string().optional(),
    serviceToken: z.boolean().optional(),
    _links: z.record(Link$inboundSchema),
    defaultApiVersion: z.number().int().optional(),
    lastUsed: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "_member": "member",
      "_links": "links",
    });
  });

/** @internal */
export type Token$Outbound = {
  _id: string;
  ownerId: string;
  memberId: string;
  _member?: MemberSummary$Outbound | undefined;
  name?: string | undefined;
  description?: string | undefined;
  creationDate: number;
  lastModified: number;
  customRoleIds?: Array<string> | undefined;
  inlineRole?: Array<Statement$Outbound> | undefined;
  role?: string | undefined;
  token?: string | undefined;
  serviceToken?: boolean | undefined;
  _links: { [k: string]: Link$Outbound };
  defaultApiVersion?: number | undefined;
  lastUsed?: number | undefined;
};

/** @internal */
export const Token$outboundSchema: z.ZodType<
  Token$Outbound,
  z.ZodTypeDef,
  Token
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  memberId: z.string(),
  member: MemberSummary$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
  customRoleIds: z.array(z.string()).optional(),
  inlineRole: z.array(Statement$outboundSchema).optional(),
  role: z.string().optional(),
  token: z.string().optional(),
  serviceToken: z.boolean().optional(),
  links: z.record(Link$outboundSchema),
  defaultApiVersion: z.number().int().optional(),
  lastUsed: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    member: "_member",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Token$ {
  /** @deprecated use `Token$inboundSchema` instead. */
  export const inboundSchema = Token$inboundSchema;
  /** @deprecated use `Token$outboundSchema` instead. */
  export const outboundSchema = Token$outboundSchema;
  /** @deprecated use `Token$Outbound` instead. */
  export type Outbound = Token$Outbound;
}

export function tokenToJSON(token: Token): string {
  return JSON.stringify(Token$outboundSchema.parse(token));
}

export function tokenFromJSON(
  jsonString: string,
): SafeParseResult<Token, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Token$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Token' from JSON`,
  );
}
