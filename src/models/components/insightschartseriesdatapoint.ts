/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsChartSeriesDataPoint = {
  /**
   * X-axis value
   */
  x: number;
  /**
   * Y-axis value
   */
  y: number;
  /**
   * Additional values for the data point
   */
  values?: { [k: string]: any } | undefined;
};

/** @internal */
export const InsightsChartSeriesDataPoint$inboundSchema: z.ZodType<
  InsightsChartSeriesDataPoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  x: z.number().int(),
  y: z.number().int(),
  values: z.record(z.any()).optional(),
});

/** @internal */
export type InsightsChartSeriesDataPoint$Outbound = {
  x: number;
  y: number;
  values?: { [k: string]: any } | undefined;
};

/** @internal */
export const InsightsChartSeriesDataPoint$outboundSchema: z.ZodType<
  InsightsChartSeriesDataPoint$Outbound,
  z.ZodTypeDef,
  InsightsChartSeriesDataPoint
> = z.object({
  x: z.number().int(),
  y: z.number().int(),
  values: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsChartSeriesDataPoint$ {
  /** @deprecated use `InsightsChartSeriesDataPoint$inboundSchema` instead. */
  export const inboundSchema = InsightsChartSeriesDataPoint$inboundSchema;
  /** @deprecated use `InsightsChartSeriesDataPoint$outboundSchema` instead. */
  export const outboundSchema = InsightsChartSeriesDataPoint$outboundSchema;
  /** @deprecated use `InsightsChartSeriesDataPoint$Outbound` instead. */
  export type Outbound = InsightsChartSeriesDataPoint$Outbound;
}

export function insightsChartSeriesDataPointToJSON(
  insightsChartSeriesDataPoint: InsightsChartSeriesDataPoint,
): string {
  return JSON.stringify(
    InsightsChartSeriesDataPoint$outboundSchema.parse(
      insightsChartSeriesDataPoint,
    ),
  );
}

export function insightsChartSeriesDataPointFromJSON(
  jsonString: string,
): SafeParseResult<InsightsChartSeriesDataPoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsChartSeriesDataPoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsChartSeriesDataPoint' from JSON`,
  );
}
