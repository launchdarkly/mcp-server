/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProjectSummaryCollection,
  ProjectSummaryCollection$inboundSchema,
  ProjectSummaryCollection$Outbound,
  ProjectSummaryCollection$outboundSchema,
} from "./projectsummarycollection.js";

export type InsightsRepository = {
  /**
   * The repository ID
   */
  id: string;
  /**
   * The repository version
   */
  version: number;
  /**
   * The repository key
   */
  key: string;
  /**
   * The repository type
   */
  type: string;
  /**
   * The repository URL
   */
  url: string;
  /**
   * The repository main branch
   */
  mainBranch: string;
  projects?: ProjectSummaryCollection | undefined;
};

/** @internal */
export const InsightsRepository$inboundSchema: z.ZodType<
  InsightsRepository,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  version: z.number().int(),
  key: z.string(),
  type: z.string(),
  url: z.string(),
  mainBranch: z.string(),
  projects: ProjectSummaryCollection$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type InsightsRepository$Outbound = {
  _id: string;
  version: number;
  key: string;
  type: string;
  url: string;
  mainBranch: string;
  projects?: ProjectSummaryCollection$Outbound | undefined;
};

/** @internal */
export const InsightsRepository$outboundSchema: z.ZodType<
  InsightsRepository$Outbound,
  z.ZodTypeDef,
  InsightsRepository
> = z.object({
  id: z.string(),
  version: z.number().int(),
  key: z.string(),
  type: z.string(),
  url: z.string(),
  mainBranch: z.string(),
  projects: ProjectSummaryCollection$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRepository$ {
  /** @deprecated use `InsightsRepository$inboundSchema` instead. */
  export const inboundSchema = InsightsRepository$inboundSchema;
  /** @deprecated use `InsightsRepository$outboundSchema` instead. */
  export const outboundSchema = InsightsRepository$outboundSchema;
  /** @deprecated use `InsightsRepository$Outbound` instead. */
  export type Outbound = InsightsRepository$Outbound;
}

export function insightsRepositoryToJSON(
  insightsRepository: InsightsRepository,
): string {
  return JSON.stringify(
    InsightsRepository$outboundSchema.parse(insightsRepository),
  );
}

export function insightsRepositoryFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRepository, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsRepository$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRepository' from JSON`,
  );
}
