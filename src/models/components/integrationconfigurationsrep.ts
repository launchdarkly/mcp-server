/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  CapabilityConfigRep,
  CapabilityConfigRep$inboundSchema,
  CapabilityConfigRep$Outbound,
  CapabilityConfigRep$outboundSchema,
} from "./capabilityconfigrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type IntegrationConfigurationsRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The unique identifier for this integration configuration
   */
  id: string;
  /**
   * A human-friendly name for the integration
   */
  name: string;
  createdAt?: number | undefined;
  /**
   * The type of integration
   */
  integrationKey?: string | undefined;
  /**
   * An array of tags for this integration
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the integration is currently active
   */
  enabled?: boolean | undefined;
  access?: Access | undefined;
  /**
   * Details on configuration for an integration of this type. Refer to the <code>formVariables</code> field in the corresponding <code>manifest.json</code> for a full list of fields for each integration.
   */
  configValues?: { [k: string]: any } | undefined;
  capabilityConfig?: CapabilityConfigRep | undefined;
};

/** @internal */
export const IntegrationConfigurationsRep$inboundSchema: z.ZodType<
  IntegrationConfigurationsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  _id: z.string(),
  name: z.string(),
  _createdAt: z.number().int().optional(),
  _integrationKey: z.string().optional(),
  tags: z.array(z.string()).optional(),
  enabled: z.boolean().optional(),
  _access: Access$inboundSchema.optional(),
  configValues: z.record(z.any()).optional(),
  capabilityConfig: CapabilityConfigRep$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
    "_createdAt": "createdAt",
    "_integrationKey": "integrationKey",
    "_access": "access",
  });
});

/** @internal */
export type IntegrationConfigurationsRep$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _id: string;
  name: string;
  _createdAt?: number | undefined;
  _integrationKey?: string | undefined;
  tags?: Array<string> | undefined;
  enabled?: boolean | undefined;
  _access?: Access$Outbound | undefined;
  configValues?: { [k: string]: any } | undefined;
  capabilityConfig?: CapabilityConfigRep$Outbound | undefined;
};

/** @internal */
export const IntegrationConfigurationsRep$outboundSchema: z.ZodType<
  IntegrationConfigurationsRep$Outbound,
  z.ZodTypeDef,
  IntegrationConfigurationsRep
> = z.object({
  links: z.record(Link$outboundSchema),
  id: z.string(),
  name: z.string(),
  createdAt: z.number().int().optional(),
  integrationKey: z.string().optional(),
  tags: z.array(z.string()).optional(),
  enabled: z.boolean().optional(),
  access: Access$outboundSchema.optional(),
  configValues: z.record(z.any()).optional(),
  capabilityConfig: CapabilityConfigRep$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    createdAt: "_createdAt",
    integrationKey: "_integrationKey",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationConfigurationsRep$ {
  /** @deprecated use `IntegrationConfigurationsRep$inboundSchema` instead. */
  export const inboundSchema = IntegrationConfigurationsRep$inboundSchema;
  /** @deprecated use `IntegrationConfigurationsRep$outboundSchema` instead. */
  export const outboundSchema = IntegrationConfigurationsRep$outboundSchema;
  /** @deprecated use `IntegrationConfigurationsRep$Outbound` instead. */
  export type Outbound = IntegrationConfigurationsRep$Outbound;
}

export function integrationConfigurationsRepToJSON(
  integrationConfigurationsRep: IntegrationConfigurationsRep,
): string {
  return JSON.stringify(
    IntegrationConfigurationsRep$outboundSchema.parse(
      integrationConfigurationsRep,
    ),
  );
}

export function integrationConfigurationsRepFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationConfigurationsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationConfigurationsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationConfigurationsRep' from JSON`,
  );
}
