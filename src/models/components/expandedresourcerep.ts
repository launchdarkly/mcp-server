/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIConfigRep,
  AIConfigRep$inboundSchema,
  AIConfigRep$Outbound,
  AIConfigRep$outboundSchema,
} from "./aiconfigrep.js";
import {
  ExpandedFlagRep,
  ExpandedFlagRep$inboundSchema,
  ExpandedFlagRep$Outbound,
  ExpandedFlagRep$outboundSchema,
} from "./expandedflagrep.js";
import {
  UserSegment,
  UserSegment$inboundSchema,
  UserSegment$Outbound,
  UserSegment$outboundSchema,
} from "./usersegment.js";

export type ExpandedResourceRep = {
  /**
   * The type of resource
   */
  kind: string;
  flag?: ExpandedFlagRep | undefined;
  segment?: UserSegment | undefined;
  aiConfig?: AIConfigRep | undefined;
};

/** @internal */
export const ExpandedResourceRep$inboundSchema: z.ZodType<
  ExpandedResourceRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string(),
  flag: ExpandedFlagRep$inboundSchema.optional(),
  segment: UserSegment$inboundSchema.optional(),
  aiConfig: AIConfigRep$inboundSchema.optional(),
});

/** @internal */
export type ExpandedResourceRep$Outbound = {
  kind: string;
  flag?: ExpandedFlagRep$Outbound | undefined;
  segment?: UserSegment$Outbound | undefined;
  aiConfig?: AIConfigRep$Outbound | undefined;
};

/** @internal */
export const ExpandedResourceRep$outboundSchema: z.ZodType<
  ExpandedResourceRep$Outbound,
  z.ZodTypeDef,
  ExpandedResourceRep
> = z.object({
  kind: z.string(),
  flag: ExpandedFlagRep$outboundSchema.optional(),
  segment: UserSegment$outboundSchema.optional(),
  aiConfig: AIConfigRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpandedResourceRep$ {
  /** @deprecated use `ExpandedResourceRep$inboundSchema` instead. */
  export const inboundSchema = ExpandedResourceRep$inboundSchema;
  /** @deprecated use `ExpandedResourceRep$outboundSchema` instead. */
  export const outboundSchema = ExpandedResourceRep$outboundSchema;
  /** @deprecated use `ExpandedResourceRep$Outbound` instead. */
  export type Outbound = ExpandedResourceRep$Outbound;
}

export function expandedResourceRepToJSON(
  expandedResourceRep: ExpandedResourceRep,
): string {
  return JSON.stringify(
    ExpandedResourceRep$outboundSchema.parse(expandedResourceRep),
  );
}

export function expandedResourceRepFromJSON(
  jsonString: string,
): SafeParseResult<ExpandedResourceRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpandedResourceRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpandedResourceRep' from JSON`,
  );
}
