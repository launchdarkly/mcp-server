/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ParameterDefault,
  ParameterDefault$inboundSchema,
  ParameterDefault$Outbound,
  ParameterDefault$outboundSchema,
} from "./parameterdefault.js";

export type WorkflowTemplateParameter = {
  id?: string | undefined;
  /**
   * The path of the property to parameterize, relative to its parent condition or instruction
   */
  path?: string | undefined;
  default?: ParameterDefault | undefined;
  /**
   * Whether the default value is valid for the target flag and environment
   */
  valid?: boolean | undefined;
};

/** @internal */
export const WorkflowTemplateParameter$inboundSchema: z.ZodType<
  WorkflowTemplateParameter,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  path: z.string().optional(),
  default: ParameterDefault$inboundSchema.optional(),
  valid: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowTemplateParameter$Outbound = {
  _id?: string | undefined;
  path?: string | undefined;
  default?: ParameterDefault$Outbound | undefined;
  valid?: boolean | undefined;
};

/** @internal */
export const WorkflowTemplateParameter$outboundSchema: z.ZodType<
  WorkflowTemplateParameter$Outbound,
  z.ZodTypeDef,
  WorkflowTemplateParameter
> = z.object({
  id: z.string().optional(),
  path: z.string().optional(),
  default: ParameterDefault$outboundSchema.optional(),
  valid: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowTemplateParameter$ {
  /** @deprecated use `WorkflowTemplateParameter$inboundSchema` instead. */
  export const inboundSchema = WorkflowTemplateParameter$inboundSchema;
  /** @deprecated use `WorkflowTemplateParameter$outboundSchema` instead. */
  export const outboundSchema = WorkflowTemplateParameter$outboundSchema;
  /** @deprecated use `WorkflowTemplateParameter$Outbound` instead. */
  export type Outbound = WorkflowTemplateParameter$Outbound;
}

export function workflowTemplateParameterToJSON(
  workflowTemplateParameter: WorkflowTemplateParameter,
): string {
  return JSON.stringify(
    WorkflowTemplateParameter$outboundSchema.parse(workflowTemplateParameter),
  );
}

export function workflowTemplateParameterFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowTemplateParameter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowTemplateParameter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowTemplateParameter' from JSON`,
  );
}
