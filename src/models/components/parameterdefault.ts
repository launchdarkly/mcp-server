/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RuleClause,
  RuleClause$inboundSchema,
  RuleClause$Outbound,
  RuleClause$outboundSchema,
} from "./ruleclause.js";

export type ParameterDefault = {
  /**
   * The default value for the given parameter
   */
  value?: any | undefined;
  /**
   * Variation value for boolean flags. Not applicable for non-boolean flags.
   */
  booleanVariationValue?: boolean | undefined;
  ruleClause?: RuleClause | undefined;
};

/** @internal */
export const ParameterDefault$inboundSchema: z.ZodType<
  ParameterDefault,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
  booleanVariationValue: z.boolean().optional(),
  ruleClause: RuleClause$inboundSchema.optional(),
});

/** @internal */
export type ParameterDefault$Outbound = {
  value?: any | undefined;
  booleanVariationValue?: boolean | undefined;
  ruleClause?: RuleClause$Outbound | undefined;
};

/** @internal */
export const ParameterDefault$outboundSchema: z.ZodType<
  ParameterDefault$Outbound,
  z.ZodTypeDef,
  ParameterDefault
> = z.object({
  value: z.any().optional(),
  booleanVariationValue: z.boolean().optional(),
  ruleClause: RuleClause$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParameterDefault$ {
  /** @deprecated use `ParameterDefault$inboundSchema` instead. */
  export const inboundSchema = ParameterDefault$inboundSchema;
  /** @deprecated use `ParameterDefault$outboundSchema` instead. */
  export const outboundSchema = ParameterDefault$outboundSchema;
  /** @deprecated use `ParameterDefault$Outbound` instead. */
  export type Outbound = ParameterDefault$Outbound;
}

export function parameterDefaultToJSON(
  parameterDefault: ParameterDefault,
): string {
  return JSON.stringify(
    ParameterDefault$outboundSchema.parse(parameterDefault),
  );
}

export function parameterDefaultFromJSON(
  jsonString: string,
): SafeParseResult<ParameterDefault, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParameterDefault$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParameterDefault' from JSON`,
  );
}
