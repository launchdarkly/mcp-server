/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResourceIDResponse = {
  kind?: string | undefined;
  projectKey?: string | undefined;
  environmentKey?: string | undefined;
  flagKey?: string | undefined;
  key?: string | undefined;
};

/** @internal */
export const ResourceIDResponse$inboundSchema: z.ZodType<
  ResourceIDResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().optional(),
  projectKey: z.string().optional(),
  environmentKey: z.string().optional(),
  flagKey: z.string().optional(),
  key: z.string().optional(),
});

/** @internal */
export type ResourceIDResponse$Outbound = {
  kind?: string | undefined;
  projectKey?: string | undefined;
  environmentKey?: string | undefined;
  flagKey?: string | undefined;
  key?: string | undefined;
};

/** @internal */
export const ResourceIDResponse$outboundSchema: z.ZodType<
  ResourceIDResponse$Outbound,
  z.ZodTypeDef,
  ResourceIDResponse
> = z.object({
  kind: z.string().optional(),
  projectKey: z.string().optional(),
  environmentKey: z.string().optional(),
  flagKey: z.string().optional(),
  key: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceIDResponse$ {
  /** @deprecated use `ResourceIDResponse$inboundSchema` instead. */
  export const inboundSchema = ResourceIDResponse$inboundSchema;
  /** @deprecated use `ResourceIDResponse$outboundSchema` instead. */
  export const outboundSchema = ResourceIDResponse$outboundSchema;
  /** @deprecated use `ResourceIDResponse$Outbound` instead. */
  export type Outbound = ResourceIDResponse$Outbound;
}

export function resourceIDResponseToJSON(
  resourceIDResponse: ResourceIDResponse,
): string {
  return JSON.stringify(
    ResourceIDResponse$outboundSchema.parse(resourceIDResponse),
  );
}

export function resourceIDResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResourceIDResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceIDResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceIDResponse' from JSON`,
  );
}
