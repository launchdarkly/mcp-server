/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StatementPost,
  StatementPost$inboundSchema,
  StatementPost$Outbound,
  StatementPost$outboundSchema,
} from "./statementpost.js";

export type CustomRolePost = {
  /**
   * A human-friendly name for the custom role
   */
  name: string;
  /**
   * The custom role key
   */
  key: string;
  /**
   * Description of custom role
   */
  description?: string | undefined;
  policy: Array<StatementPost>;
  basePermissions?: string | undefined;
  resourceCategory?: string | undefined;
};

/** @internal */
export const CustomRolePost$inboundSchema: z.ZodType<
  CustomRolePost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string().optional(),
  policy: z.array(StatementPost$inboundSchema),
  basePermissions: z.string().optional(),
  resourceCategory: z.string().optional(),
});

/** @internal */
export type CustomRolePost$Outbound = {
  name: string;
  key: string;
  description?: string | undefined;
  policy: Array<StatementPost$Outbound>;
  basePermissions?: string | undefined;
  resourceCategory?: string | undefined;
};

/** @internal */
export const CustomRolePost$outboundSchema: z.ZodType<
  CustomRolePost$Outbound,
  z.ZodTypeDef,
  CustomRolePost
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string().optional(),
  policy: z.array(StatementPost$outboundSchema),
  basePermissions: z.string().optional(),
  resourceCategory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomRolePost$ {
  /** @deprecated use `CustomRolePost$inboundSchema` instead. */
  export const inboundSchema = CustomRolePost$inboundSchema;
  /** @deprecated use `CustomRolePost$outboundSchema` instead. */
  export const outboundSchema = CustomRolePost$outboundSchema;
  /** @deprecated use `CustomRolePost$Outbound` instead. */
  export type Outbound = CustomRolePost$Outbound;
}

export function customRolePostToJSON(customRolePost: CustomRolePost): string {
  return JSON.stringify(CustomRolePost$outboundSchema.parse(customRolePost));
}

export function customRolePostFromJSON(
  jsonString: string,
): SafeParseResult<CustomRolePost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomRolePost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomRolePost' from JSON`,
  );
}
