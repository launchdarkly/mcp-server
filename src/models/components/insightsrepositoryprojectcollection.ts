/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsRepositoryProject,
  InsightsRepositoryProject$inboundSchema,
  InsightsRepositoryProject$Outbound,
  InsightsRepositoryProject$outboundSchema,
} from "./insightsrepositoryproject.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type InsightsRepositoryProjectCollection = {
  /**
   * Total number of repository project associations
   */
  totalCount: number;
  /**
   * List of repository project associations
   */
  items: Array<InsightsRepositoryProject>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const InsightsRepositoryProjectCollection$inboundSchema: z.ZodType<
  InsightsRepositoryProjectCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightsRepositoryProject$inboundSchema),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InsightsRepositoryProjectCollection$Outbound = {
  totalCount: number;
  items: Array<InsightsRepositoryProject$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const InsightsRepositoryProjectCollection$outboundSchema: z.ZodType<
  InsightsRepositoryProjectCollection$Outbound,
  z.ZodTypeDef,
  InsightsRepositoryProjectCollection
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightsRepositoryProject$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRepositoryProjectCollection$ {
  /** @deprecated use `InsightsRepositoryProjectCollection$inboundSchema` instead. */
  export const inboundSchema =
    InsightsRepositoryProjectCollection$inboundSchema;
  /** @deprecated use `InsightsRepositoryProjectCollection$outboundSchema` instead. */
  export const outboundSchema =
    InsightsRepositoryProjectCollection$outboundSchema;
  /** @deprecated use `InsightsRepositoryProjectCollection$Outbound` instead. */
  export type Outbound = InsightsRepositoryProjectCollection$Outbound;
}

export function insightsRepositoryProjectCollectionToJSON(
  insightsRepositoryProjectCollection: InsightsRepositoryProjectCollection,
): string {
  return JSON.stringify(
    InsightsRepositoryProjectCollection$outboundSchema.parse(
      insightsRepositoryProjectCollection,
    ),
  );
}

export function insightsRepositoryProjectCollectionFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRepositoryProjectCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InsightsRepositoryProjectCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRepositoryProjectCollection' from JSON`,
  );
}
