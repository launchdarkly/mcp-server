/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of repository. If not specified, the default value is <code>custom</code>.
 */
export const RepositoryPostType = {
  Bitbucket: "bitbucket",
  Custom: "custom",
  Github: "github",
  Gitlab: "gitlab",
} as const;
/**
 * The type of repository. If not specified, the default value is <code>custom</code>.
 */
export type RepositoryPostType = ClosedEnum<typeof RepositoryPostType>;

export type RepositoryPost = {
  /**
   * The repository name
   */
  name: string;
  /**
   * A URL to access the repository
   */
  sourceLink?: string | undefined;
  /**
   * A template for constructing a valid URL to view the commit
   */
  commitUrlTemplate?: string | undefined;
  /**
   * A template for constructing a valid URL to view the hunk
   */
  hunkUrlTemplate?: string | undefined;
  /**
   * The type of repository. If not specified, the default value is <code>custom</code>.
   */
  type?: RepositoryPostType | undefined;
  /**
   * The repository's default branch. If not specified, the default value is <code>main</code>.
   */
  defaultBranch?: string | undefined;
};

/** @internal */
export const RepositoryPostType$inboundSchema: z.ZodNativeEnum<
  typeof RepositoryPostType
> = z.nativeEnum(RepositoryPostType);

/** @internal */
export const RepositoryPostType$outboundSchema: z.ZodNativeEnum<
  typeof RepositoryPostType
> = RepositoryPostType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoryPostType$ {
  /** @deprecated use `RepositoryPostType$inboundSchema` instead. */
  export const inboundSchema = RepositoryPostType$inboundSchema;
  /** @deprecated use `RepositoryPostType$outboundSchema` instead. */
  export const outboundSchema = RepositoryPostType$outboundSchema;
}

/** @internal */
export const RepositoryPost$inboundSchema: z.ZodType<
  RepositoryPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  sourceLink: z.string().optional(),
  commitUrlTemplate: z.string().optional(),
  hunkUrlTemplate: z.string().optional(),
  type: RepositoryPostType$inboundSchema.optional(),
  defaultBranch: z.string().optional(),
});

/** @internal */
export type RepositoryPost$Outbound = {
  name: string;
  sourceLink?: string | undefined;
  commitUrlTemplate?: string | undefined;
  hunkUrlTemplate?: string | undefined;
  type?: string | undefined;
  defaultBranch?: string | undefined;
};

/** @internal */
export const RepositoryPost$outboundSchema: z.ZodType<
  RepositoryPost$Outbound,
  z.ZodTypeDef,
  RepositoryPost
> = z.object({
  name: z.string(),
  sourceLink: z.string().optional(),
  commitUrlTemplate: z.string().optional(),
  hunkUrlTemplate: z.string().optional(),
  type: RepositoryPostType$outboundSchema.optional(),
  defaultBranch: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoryPost$ {
  /** @deprecated use `RepositoryPost$inboundSchema` instead. */
  export const inboundSchema = RepositoryPost$inboundSchema;
  /** @deprecated use `RepositoryPost$outboundSchema` instead. */
  export const outboundSchema = RepositoryPost$outboundSchema;
  /** @deprecated use `RepositoryPost$Outbound` instead. */
  export type Outbound = RepositoryPost$Outbound;
}

export function repositoryPostToJSON(repositoryPost: RepositoryPost): string {
  return JSON.stringify(RepositoryPost$outboundSchema.parse(repositoryPost));
}

export function repositoryPostFromJSON(
  jsonString: string,
): SafeParseResult<RepositoryPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepositoryPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepositoryPost' from JSON`,
  );
}
