/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Whether this statement should allow or deny actions on the resources.
 */
export const StatementEffect = {
  Allow: "allow",
  Deny: "deny",
} as const;
/**
 * Whether this statement should allow or deny actions on the resources.
 */
export type StatementEffect = ClosedEnum<typeof StatementEffect>;

export type Statement = {
  /**
   * Resource specifier strings
   */
  resources?: Array<string> | undefined;
  /**
   * Targeted resources are the resources NOT in this list. The <code>resources</code> and <code>notActions</code> fields must be empty to use this field.
   */
  notResources?: Array<string> | undefined;
  /**
   * Actions to perform on a resource
   */
  actions?: Array<string> | undefined;
  /**
   * Targeted actions are the actions NOT in this list. The <code>actions</code> and <code>notResources</code> fields must be empty to use this field.
   */
  notActions?: Array<string> | undefined;
  /**
   * Whether this statement should allow or deny actions on the resources.
   */
  effect: StatementEffect;
};

/** @internal */
export const StatementEffect$inboundSchema: z.ZodNativeEnum<
  typeof StatementEffect
> = z.nativeEnum(StatementEffect);

/** @internal */
export const StatementEffect$outboundSchema: z.ZodNativeEnum<
  typeof StatementEffect
> = StatementEffect$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatementEffect$ {
  /** @deprecated use `StatementEffect$inboundSchema` instead. */
  export const inboundSchema = StatementEffect$inboundSchema;
  /** @deprecated use `StatementEffect$outboundSchema` instead. */
  export const outboundSchema = StatementEffect$outboundSchema;
}

/** @internal */
export const Statement$inboundSchema: z.ZodType<
  Statement,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: StatementEffect$inboundSchema,
});

/** @internal */
export type Statement$Outbound = {
  resources?: Array<string> | undefined;
  notResources?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  notActions?: Array<string> | undefined;
  effect: string;
};

/** @internal */
export const Statement$outboundSchema: z.ZodType<
  Statement$Outbound,
  z.ZodTypeDef,
  Statement
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: StatementEffect$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Statement$ {
  /** @deprecated use `Statement$inboundSchema` instead. */
  export const inboundSchema = Statement$inboundSchema;
  /** @deprecated use `Statement$outboundSchema` instead. */
  export const outboundSchema = Statement$outboundSchema;
  /** @deprecated use `Statement$Outbound` instead. */
  export type Outbound = Statement$Outbound;
}

export function statementToJSON(statement: Statement): string {
  return JSON.stringify(Statement$outboundSchema.parse(statement));
}

export function statementFromJSON(
  jsonString: string,
): SafeParseResult<Statement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Statement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Statement' from JSON`,
  );
}
