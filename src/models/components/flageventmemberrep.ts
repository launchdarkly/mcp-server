/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FlagEventMemberRep = {
  /**
   * The member ID
   */
  id: string;
  /**
   * The member email
   */
  email: string;
  /**
   * The member first name
   */
  firstName: string;
  /**
   * The member last name
   */
  lastName: string;
};

/** @internal */
export const FlagEventMemberRep$inboundSchema: z.ZodType<
  FlagEventMemberRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  firstName: z.string(),
  lastName: z.string(),
});

/** @internal */
export type FlagEventMemberRep$Outbound = {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
};

/** @internal */
export const FlagEventMemberRep$outboundSchema: z.ZodType<
  FlagEventMemberRep$Outbound,
  z.ZodTypeDef,
  FlagEventMemberRep
> = z.object({
  id: z.string(),
  email: z.string(),
  firstName: z.string(),
  lastName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagEventMemberRep$ {
  /** @deprecated use `FlagEventMemberRep$inboundSchema` instead. */
  export const inboundSchema = FlagEventMemberRep$inboundSchema;
  /** @deprecated use `FlagEventMemberRep$outboundSchema` instead. */
  export const outboundSchema = FlagEventMemberRep$outboundSchema;
  /** @deprecated use `FlagEventMemberRep$Outbound` instead. */
  export type Outbound = FlagEventMemberRep$Outbound;
}

export function flagEventMemberRepToJSON(
  flagEventMemberRep: FlagEventMemberRep,
): string {
  return JSON.stringify(
    FlagEventMemberRep$outboundSchema.parse(flagEventMemberRep),
  );
}

export function flagEventMemberRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagEventMemberRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagEventMemberRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagEventMemberRep' from JSON`,
  );
}
