/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementAccessAllowedRep,
  AnnouncementAccessAllowedRep$inboundSchema,
  AnnouncementAccessAllowedRep$Outbound,
  AnnouncementAccessAllowedRep$outboundSchema,
} from "./announcementaccessallowedrep.js";
import {
  AnnouncementAccessDenied,
  AnnouncementAccessDenied$inboundSchema,
  AnnouncementAccessDenied$Outbound,
  AnnouncementAccessDenied$outboundSchema,
} from "./announcementaccessdenied.js";

export type AnnouncementAccessRep = {
  denied: Array<AnnouncementAccessDenied>;
  allowed: Array<AnnouncementAccessAllowedRep>;
};

/** @internal */
export const AnnouncementAccessRep$inboundSchema: z.ZodType<
  AnnouncementAccessRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  denied: z.array(AnnouncementAccessDenied$inboundSchema),
  allowed: z.array(AnnouncementAccessAllowedRep$inboundSchema),
});

/** @internal */
export type AnnouncementAccessRep$Outbound = {
  denied: Array<AnnouncementAccessDenied$Outbound>;
  allowed: Array<AnnouncementAccessAllowedRep$Outbound>;
};

/** @internal */
export const AnnouncementAccessRep$outboundSchema: z.ZodType<
  AnnouncementAccessRep$Outbound,
  z.ZodTypeDef,
  AnnouncementAccessRep
> = z.object({
  denied: z.array(AnnouncementAccessDenied$outboundSchema),
  allowed: z.array(AnnouncementAccessAllowedRep$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementAccessRep$ {
  /** @deprecated use `AnnouncementAccessRep$inboundSchema` instead. */
  export const inboundSchema = AnnouncementAccessRep$inboundSchema;
  /** @deprecated use `AnnouncementAccessRep$outboundSchema` instead. */
  export const outboundSchema = AnnouncementAccessRep$outboundSchema;
  /** @deprecated use `AnnouncementAccessRep$Outbound` instead. */
  export type Outbound = AnnouncementAccessRep$Outbound;
}

export function announcementAccessRepToJSON(
  announcementAccessRep: AnnouncementAccessRep,
): string {
  return JSON.stringify(
    AnnouncementAccessRep$outboundSchema.parse(announcementAccessRep),
  );
}

export function announcementAccessRepFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementAccessRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementAccessRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementAccessRep' from JSON`,
  );
}
