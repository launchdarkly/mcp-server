/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RelativeDifferenceRep = {
  /**
   * An upper bound of the relative difference between the treatment and the <code>fromTreatmentId</code>
   */
  upper?: number | undefined;
  /**
   * A lower bound of the relative difference between the treatment and the <code>fromTreatmentId</code>
   */
  lower?: number | undefined;
  /**
   * The treatment ID of the treatment against which the relative difference is calculated
   */
  fromTreatmentId?: string | undefined;
  /**
   * Variance of the relative difference
   */
  variance?: number | undefined;
  /**
   * The reduction in variance resulting from CUPED
   */
  varianceReduction?: number | undefined;
};

/** @internal */
export const RelativeDifferenceRep$inboundSchema: z.ZodType<
  RelativeDifferenceRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  upper: z.number().optional(),
  lower: z.number().optional(),
  fromTreatmentId: z.string().optional(),
  variance: z.number().optional(),
  varianceReduction: z.number().optional(),
});

/** @internal */
export type RelativeDifferenceRep$Outbound = {
  upper?: number | undefined;
  lower?: number | undefined;
  fromTreatmentId?: string | undefined;
  variance?: number | undefined;
  varianceReduction?: number | undefined;
};

/** @internal */
export const RelativeDifferenceRep$outboundSchema: z.ZodType<
  RelativeDifferenceRep$Outbound,
  z.ZodTypeDef,
  RelativeDifferenceRep
> = z.object({
  upper: z.number().optional(),
  lower: z.number().optional(),
  fromTreatmentId: z.string().optional(),
  variance: z.number().optional(),
  varianceReduction: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelativeDifferenceRep$ {
  /** @deprecated use `RelativeDifferenceRep$inboundSchema` instead. */
  export const inboundSchema = RelativeDifferenceRep$inboundSchema;
  /** @deprecated use `RelativeDifferenceRep$outboundSchema` instead. */
  export const outboundSchema = RelativeDifferenceRep$outboundSchema;
  /** @deprecated use `RelativeDifferenceRep$Outbound` instead. */
  export type Outbound = RelativeDifferenceRep$Outbound;
}

export function relativeDifferenceRepToJSON(
  relativeDifferenceRep: RelativeDifferenceRep,
): string {
  return JSON.stringify(
    RelativeDifferenceRep$outboundSchema.parse(relativeDifferenceRep),
  );
}

export function relativeDifferenceRepFromJSON(
  jsonString: string,
): SafeParseResult<RelativeDifferenceRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelativeDifferenceRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelativeDifferenceRep' from JSON`,
  );
}
