/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayerPost = {
  /**
   * Unique identifier for the layer
   */
  key: string;
  /**
   * Layer name
   */
  name: string;
  /**
   * The checkout flow for the application
   */
  description: string;
};

/** @internal */
export const LayerPost$inboundSchema: z.ZodType<
  LayerPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
});

/** @internal */
export type LayerPost$Outbound = {
  key: string;
  name: string;
  description: string;
};

/** @internal */
export const LayerPost$outboundSchema: z.ZodType<
  LayerPost$Outbound,
  z.ZodTypeDef,
  LayerPost
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayerPost$ {
  /** @deprecated use `LayerPost$inboundSchema` instead. */
  export const inboundSchema = LayerPost$inboundSchema;
  /** @deprecated use `LayerPost$outboundSchema` instead. */
  export const outboundSchema = LayerPost$outboundSchema;
  /** @deprecated use `LayerPost$Outbound` instead. */
  export type Outbound = LayerPost$Outbound;
}

export function layerPostToJSON(layerPost: LayerPost): string {
  return JSON.stringify(LayerPost$outboundSchema.parse(layerPost));
}

export function layerPostFromJSON(
  jsonString: string,
): SafeParseResult<LayerPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayerPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayerPost' from JSON`,
  );
}
