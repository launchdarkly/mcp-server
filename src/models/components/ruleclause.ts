/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The operator to apply to the given attribute
 */
export const Op = {
  In: "in",
  EndsWith: "endsWith",
  StartsWith: "startsWith",
  Matches: "matches",
  Contains: "contains",
  LessThan: "lessThan",
  LessThanOrEqual: "lessThanOrEqual",
  GreaterThan: "greaterThan",
  GreaterThanOrEqual: "greaterThanOrEqual",
  Before: "before",
  After: "after",
  SegmentMatch: "segmentMatch",
  SemVerEqual: "semVerEqual",
  SemVerLessThan: "semVerLessThan",
  SemVerGreaterThan: "semVerGreaterThan",
} as const;
/**
 * The operator to apply to the given attribute
 */
export type Op = ClosedEnum<typeof Op>;

export type RuleClause = {
  /**
   * The attribute the rule applies to, for example, last name or email address
   */
  attribute?: string | undefined;
  /**
   * The operator to apply to the given attribute
   */
  op?: Op | undefined;
  /**
   * Whether the operator should be negated
   */
  negate?: boolean | undefined;
};

/** @internal */
export const Op$inboundSchema: z.ZodNativeEnum<typeof Op> = z.nativeEnum(Op);

/** @internal */
export const Op$outboundSchema: z.ZodNativeEnum<typeof Op> = Op$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Op$ {
  /** @deprecated use `Op$inboundSchema` instead. */
  export const inboundSchema = Op$inboundSchema;
  /** @deprecated use `Op$outboundSchema` instead. */
  export const outboundSchema = Op$outboundSchema;
}

/** @internal */
export const RuleClause$inboundSchema: z.ZodType<
  RuleClause,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute: z.string().optional(),
  op: Op$inboundSchema.optional(),
  negate: z.boolean().optional(),
});

/** @internal */
export type RuleClause$Outbound = {
  attribute?: string | undefined;
  op?: string | undefined;
  negate?: boolean | undefined;
};

/** @internal */
export const RuleClause$outboundSchema: z.ZodType<
  RuleClause$Outbound,
  z.ZodTypeDef,
  RuleClause
> = z.object({
  attribute: z.string().optional(),
  op: Op$outboundSchema.optional(),
  negate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuleClause$ {
  /** @deprecated use `RuleClause$inboundSchema` instead. */
  export const inboundSchema = RuleClause$inboundSchema;
  /** @deprecated use `RuleClause$outboundSchema` instead. */
  export const outboundSchema = RuleClause$outboundSchema;
  /** @deprecated use `RuleClause$Outbound` instead. */
  export type Outbound = RuleClause$Outbound;
}

export function ruleClauseToJSON(ruleClause: RuleClause): string {
  return JSON.stringify(RuleClause$outboundSchema.parse(ruleClause));
}

export function ruleClauseFromJSON(
  jsonString: string,
): SafeParseResult<RuleClause, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RuleClause$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RuleClause' from JSON`,
  );
}
