/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HeaderItems = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const HeaderItems$inboundSchema: z.ZodType<
  HeaderItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type HeaderItems$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const HeaderItems$outboundSchema: z.ZodType<
  HeaderItems$Outbound,
  z.ZodTypeDef,
  HeaderItems
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderItems$ {
  /** @deprecated use `HeaderItems$inboundSchema` instead. */
  export const inboundSchema = HeaderItems$inboundSchema;
  /** @deprecated use `HeaderItems$outboundSchema` instead. */
  export const outboundSchema = HeaderItems$outboundSchema;
  /** @deprecated use `HeaderItems$Outbound` instead. */
  export type Outbound = HeaderItems$Outbound;
}

export function headerItemsToJSON(headerItems: HeaderItems): string {
  return JSON.stringify(HeaderItems$outboundSchema.parse(headerItems));
}

export function headerItemsFromJSON(
  jsonString: string,
): SafeParseResult<HeaderItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HeaderItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HeaderItems' from JSON`,
  );
}
