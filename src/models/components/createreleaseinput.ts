/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateReleaseInput = {
  /**
   * The variation id to release to across all phases
   */
  releaseVariationId?: string | undefined;
  /**
   * The key of the release pipeline to attach the flag to
   */
  releasePipelineKey: string;
};

/** @internal */
export const CreateReleaseInput$inboundSchema: z.ZodType<
  CreateReleaseInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  releaseVariationId: z.string().optional(),
  releasePipelineKey: z.string(),
});

/** @internal */
export type CreateReleaseInput$Outbound = {
  releaseVariationId?: string | undefined;
  releasePipelineKey: string;
};

/** @internal */
export const CreateReleaseInput$outboundSchema: z.ZodType<
  CreateReleaseInput$Outbound,
  z.ZodTypeDef,
  CreateReleaseInput
> = z.object({
  releaseVariationId: z.string().optional(),
  releasePipelineKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReleaseInput$ {
  /** @deprecated use `CreateReleaseInput$inboundSchema` instead. */
  export const inboundSchema = CreateReleaseInput$inboundSchema;
  /** @deprecated use `CreateReleaseInput$outboundSchema` instead. */
  export const outboundSchema = CreateReleaseInput$outboundSchema;
  /** @deprecated use `CreateReleaseInput$Outbound` instead. */
  export type Outbound = CreateReleaseInput$Outbound;
}

export function createReleaseInputToJSON(
  createReleaseInput: CreateReleaseInput,
): string {
  return JSON.stringify(
    CreateReleaseInput$outboundSchema.parse(createReleaseInput),
  );
}

export function createReleaseInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateReleaseInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReleaseInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReleaseInput' from JSON`,
  );
}
