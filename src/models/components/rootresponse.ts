/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type RootResponse = {
  links: { [k: string]: Link };
};

/** @internal */
export const RootResponse$inboundSchema: z.ZodType<
  RootResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.record(Link$inboundSchema),
});

/** @internal */
export type RootResponse$Outbound = {
  links: { [k: string]: Link$Outbound };
};

/** @internal */
export const RootResponse$outboundSchema: z.ZodType<
  RootResponse$Outbound,
  z.ZodTypeDef,
  RootResponse
> = z.object({
  links: z.record(Link$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RootResponse$ {
  /** @deprecated use `RootResponse$inboundSchema` instead. */
  export const inboundSchema = RootResponse$inboundSchema;
  /** @deprecated use `RootResponse$outboundSchema` instead. */
  export const outboundSchema = RootResponse$outboundSchema;
  /** @deprecated use `RootResponse$Outbound` instead. */
  export type Outbound = RootResponse$Outbound;
}

export function rootResponseToJSON(rootResponse: RootResponse): string {
  return JSON.stringify(RootResponse$outboundSchema.parse(rootResponse));
}

export function rootResponseFromJSON(
  jsonString: string,
): SafeParseResult<RootResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RootResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RootResponse' from JSON`,
  );
}
