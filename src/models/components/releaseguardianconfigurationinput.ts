/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReleaseGuardianConfigurationInput = {
  /**
   * The monitoring window in milliseconds
   */
  monitoringWindowMilliseconds?: number | undefined;
  /**
   * The rollout weight
   */
  rolloutWeight?: number | undefined;
  /**
   * Whether or not to rollback on regression
   */
  rollbackOnRegression?: boolean | undefined;
  /**
   * The randomization unit for the measured rollout
   */
  randomizationUnit?: string | undefined;
};

/** @internal */
export const ReleaseGuardianConfigurationInput$inboundSchema: z.ZodType<
  ReleaseGuardianConfigurationInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  monitoringWindowMilliseconds: z.number().int().optional(),
  rolloutWeight: z.number().int().optional(),
  rollbackOnRegression: z.boolean().optional(),
  randomizationUnit: z.string().optional(),
});

/** @internal */
export type ReleaseGuardianConfigurationInput$Outbound = {
  monitoringWindowMilliseconds?: number | undefined;
  rolloutWeight?: number | undefined;
  rollbackOnRegression?: boolean | undefined;
  randomizationUnit?: string | undefined;
};

/** @internal */
export const ReleaseGuardianConfigurationInput$outboundSchema: z.ZodType<
  ReleaseGuardianConfigurationInput$Outbound,
  z.ZodTypeDef,
  ReleaseGuardianConfigurationInput
> = z.object({
  monitoringWindowMilliseconds: z.number().int().optional(),
  rolloutWeight: z.number().int().optional(),
  rollbackOnRegression: z.boolean().optional(),
  randomizationUnit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseGuardianConfigurationInput$ {
  /** @deprecated use `ReleaseGuardianConfigurationInput$inboundSchema` instead. */
  export const inboundSchema = ReleaseGuardianConfigurationInput$inboundSchema;
  /** @deprecated use `ReleaseGuardianConfigurationInput$outboundSchema` instead. */
  export const outboundSchema =
    ReleaseGuardianConfigurationInput$outboundSchema;
  /** @deprecated use `ReleaseGuardianConfigurationInput$Outbound` instead. */
  export type Outbound = ReleaseGuardianConfigurationInput$Outbound;
}

export function releaseGuardianConfigurationInputToJSON(
  releaseGuardianConfigurationInput: ReleaseGuardianConfigurationInput,
): string {
  return JSON.stringify(
    ReleaseGuardianConfigurationInput$outboundSchema.parse(
      releaseGuardianConfigurationInput,
    ),
  );
}

export function releaseGuardianConfigurationInputFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseGuardianConfigurationInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseGuardianConfigurationInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseGuardianConfigurationInput' from JSON`,
  );
}
