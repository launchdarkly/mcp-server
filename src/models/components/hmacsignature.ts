/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HMACSignature = {
  headerName?: string | undefined;
  hmacSecretFormVariableKey?: string | undefined;
};

/** @internal */
export const HMACSignature$inboundSchema: z.ZodType<
  HMACSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  headerName: z.string().optional(),
  hmacSecretFormVariableKey: z.string().optional(),
});

/** @internal */
export type HMACSignature$Outbound = {
  headerName?: string | undefined;
  hmacSecretFormVariableKey?: string | undefined;
};

/** @internal */
export const HMACSignature$outboundSchema: z.ZodType<
  HMACSignature$Outbound,
  z.ZodTypeDef,
  HMACSignature
> = z.object({
  headerName: z.string().optional(),
  hmacSecretFormVariableKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HMACSignature$ {
  /** @deprecated use `HMACSignature$inboundSchema` instead. */
  export const inboundSchema = HMACSignature$inboundSchema;
  /** @deprecated use `HMACSignature$outboundSchema` instead. */
  export const outboundSchema = HMACSignature$outboundSchema;
  /** @deprecated use `HMACSignature$Outbound` instead. */
  export type Outbound = HMACSignature$Outbound;
}

export function hmacSignatureToJSON(hmacSignature: HMACSignature): string {
  return JSON.stringify(HMACSignature$outboundSchema.parse(hmacSignature));
}

export function hmacSignatureFromJSON(
  jsonString: string,
): SafeParseResult<HMACSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HMACSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HMACSignature' from JSON`,
  );
}
