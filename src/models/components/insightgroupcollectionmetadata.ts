/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightGroupsCountByIndicator,
  InsightGroupsCountByIndicator$inboundSchema,
  InsightGroupsCountByIndicator$Outbound,
  InsightGroupsCountByIndicator$outboundSchema,
} from "./insightgroupscountbyindicator.js";

export type InsightGroupCollectionMetadata = {
  countByIndicator: InsightGroupsCountByIndicator;
};

/** @internal */
export const InsightGroupCollectionMetadata$inboundSchema: z.ZodType<
  InsightGroupCollectionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  countByIndicator: InsightGroupsCountByIndicator$inboundSchema,
});

/** @internal */
export type InsightGroupCollectionMetadata$Outbound = {
  countByIndicator: InsightGroupsCountByIndicator$Outbound;
};

/** @internal */
export const InsightGroupCollectionMetadata$outboundSchema: z.ZodType<
  InsightGroupCollectionMetadata$Outbound,
  z.ZodTypeDef,
  InsightGroupCollectionMetadata
> = z.object({
  countByIndicator: InsightGroupsCountByIndicator$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightGroupCollectionMetadata$ {
  /** @deprecated use `InsightGroupCollectionMetadata$inboundSchema` instead. */
  export const inboundSchema = InsightGroupCollectionMetadata$inboundSchema;
  /** @deprecated use `InsightGroupCollectionMetadata$outboundSchema` instead. */
  export const outboundSchema = InsightGroupCollectionMetadata$outboundSchema;
  /** @deprecated use `InsightGroupCollectionMetadata$Outbound` instead. */
  export type Outbound = InsightGroupCollectionMetadata$Outbound;
}

export function insightGroupCollectionMetadataToJSON(
  insightGroupCollectionMetadata: InsightGroupCollectionMetadata,
): string {
  return JSON.stringify(
    InsightGroupCollectionMetadata$outboundSchema.parse(
      insightGroupCollectionMetadata,
    ),
  );
}

export function insightGroupCollectionMetadataFromJSON(
  jsonString: string,
): SafeParseResult<InsightGroupCollectionMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightGroupCollectionMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightGroupCollectionMetadata' from JSON`,
  );
}
