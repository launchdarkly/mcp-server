/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReferenceRep,
  ReferenceRep$inboundSchema,
  ReferenceRep$Outbound,
  ReferenceRep$outboundSchema,
} from "./referencerep.js";

export type PutBranch = {
  /**
   * The branch name
   */
  name: string;
  /**
   * An ID representing the branch HEAD. For example, a commit SHA.
   */
  head: string;
  /**
   * An optional ID used to prevent older data from overwriting newer data. If no sequence ID is included, the newly submitted data will always be saved.
   */
  updateSequenceId?: number | undefined;
  syncTime: number;
  /**
   * An array of flag references found on the branch
   */
  references?: Array<ReferenceRep> | undefined;
  commitTime?: number | undefined;
};

/** @internal */
export const PutBranch$inboundSchema: z.ZodType<
  PutBranch,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  head: z.string(),
  updateSequenceId: z.number().int().optional(),
  syncTime: z.number().int(),
  references: z.array(ReferenceRep$inboundSchema).optional(),
  commitTime: z.number().int().optional(),
});

/** @internal */
export type PutBranch$Outbound = {
  name: string;
  head: string;
  updateSequenceId?: number | undefined;
  syncTime: number;
  references?: Array<ReferenceRep$Outbound> | undefined;
  commitTime?: number | undefined;
};

/** @internal */
export const PutBranch$outboundSchema: z.ZodType<
  PutBranch$Outbound,
  z.ZodTypeDef,
  PutBranch
> = z.object({
  name: z.string(),
  head: z.string(),
  updateSequenceId: z.number().int().optional(),
  syncTime: z.number().int(),
  references: z.array(ReferenceRep$outboundSchema).optional(),
  commitTime: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutBranch$ {
  /** @deprecated use `PutBranch$inboundSchema` instead. */
  export const inboundSchema = PutBranch$inboundSchema;
  /** @deprecated use `PutBranch$outboundSchema` instead. */
  export const outboundSchema = PutBranch$outboundSchema;
  /** @deprecated use `PutBranch$Outbound` instead. */
  export type Outbound = PutBranch$Outbound;
}

export function putBranchToJSON(putBranch: PutBranch): string {
  return JSON.stringify(PutBranch$outboundSchema.parse(putBranch));
}

export function putBranchFromJSON(
  jsonString: string,
): SafeParseResult<PutBranch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutBranch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutBranch' from JSON`,
  );
}
