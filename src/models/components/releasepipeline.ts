/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  Phase,
  Phase$inboundSchema,
  Phase$Outbound,
  Phase$outboundSchema,
} from "./phase.js";

export type ReleasePipeline = {
  /**
   * Timestamp of when the release pipeline was created
   */
  createdAt: Date;
  /**
   * The release pipeline description
   */
  description?: string | undefined;
  /**
   * The release pipeline key
   */
  key: string;
  /**
   * The release pipeline name
   */
  name: string;
  /**
   * An ordered list of the release pipeline phases. Each phase is a logical grouping of one or more environments that share attributes for rolling out changes.
   */
  phases: Array<Phase>;
  /**
   * A list of the release pipeline's tags
   */
  tags?: Array<string> | undefined;
  /**
   * The release pipeline version
   */
  version?: number | undefined;
  access?: Access | undefined;
  /**
   * Whether this release pipeline is the default pipeline for the project
   */
  isProjectDefault?: boolean | undefined;
  /**
   * Whether this release pipeline is a legacy pipeline
   */
  isLegacy?: boolean | undefined;
};

/** @internal */
export const ReleasePipeline$inboundSchema: z.ZodType<
  ReleasePipeline,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  phases: z.array(Phase$inboundSchema),
  tags: z.array(z.string()).optional(),
  _version: z.number().int().optional(),
  _access: Access$inboundSchema.optional(),
  isProjectDefault: z.boolean().optional(),
  _isLegacy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_version": "version",
    "_access": "access",
    "_isLegacy": "isLegacy",
  });
});

/** @internal */
export type ReleasePipeline$Outbound = {
  createdAt: string;
  description?: string | undefined;
  key: string;
  name: string;
  phases: Array<Phase$Outbound>;
  tags?: Array<string> | undefined;
  _version?: number | undefined;
  _access?: Access$Outbound | undefined;
  isProjectDefault?: boolean | undefined;
  _isLegacy?: boolean | undefined;
};

/** @internal */
export const ReleasePipeline$outboundSchema: z.ZodType<
  ReleasePipeline$Outbound,
  z.ZodTypeDef,
  ReleasePipeline
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  phases: z.array(Phase$outboundSchema),
  tags: z.array(z.string()).optional(),
  version: z.number().int().optional(),
  access: Access$outboundSchema.optional(),
  isProjectDefault: z.boolean().optional(),
  isLegacy: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    version: "_version",
    access: "_access",
    isLegacy: "_isLegacy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleasePipeline$ {
  /** @deprecated use `ReleasePipeline$inboundSchema` instead. */
  export const inboundSchema = ReleasePipeline$inboundSchema;
  /** @deprecated use `ReleasePipeline$outboundSchema` instead. */
  export const outboundSchema = ReleasePipeline$outboundSchema;
  /** @deprecated use `ReleasePipeline$Outbound` instead. */
  export type Outbound = ReleasePipeline$Outbound;
}

export function releasePipelineToJSON(
  releasePipeline: ReleasePipeline,
): string {
  return JSON.stringify(ReleasePipeline$outboundSchema.parse(releasePipeline));
}

export function releasePipelineFromJSON(
  jsonString: string,
): SafeParseResult<ReleasePipeline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleasePipeline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleasePipeline' from JSON`,
  );
}
