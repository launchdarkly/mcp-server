/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlagStatusRep,
  FlagStatusRep$inboundSchema,
  FlagStatusRep$Outbound,
  FlagStatusRep$outboundSchema,
} from "./flagstatusrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FeatureFlagStatuses = {
  links: { [k: string]: Link };
  items?: Array<FlagStatusRep> | undefined;
};

/** @internal */
export const FeatureFlagStatuses$inboundSchema: z.ZodType<
  FeatureFlagStatuses,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  items: z.array(FlagStatusRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FeatureFlagStatuses$Outbound = {
  _links: { [k: string]: Link$Outbound };
  items?: Array<FlagStatusRep$Outbound> | undefined;
};

/** @internal */
export const FeatureFlagStatuses$outboundSchema: z.ZodType<
  FeatureFlagStatuses$Outbound,
  z.ZodTypeDef,
  FeatureFlagStatuses
> = z.object({
  links: z.record(Link$outboundSchema),
  items: z.array(FlagStatusRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureFlagStatuses$ {
  /** @deprecated use `FeatureFlagStatuses$inboundSchema` instead. */
  export const inboundSchema = FeatureFlagStatuses$inboundSchema;
  /** @deprecated use `FeatureFlagStatuses$outboundSchema` instead. */
  export const outboundSchema = FeatureFlagStatuses$outboundSchema;
  /** @deprecated use `FeatureFlagStatuses$Outbound` instead. */
  export type Outbound = FeatureFlagStatuses$Outbound;
}

export function featureFlagStatusesToJSON(
  featureFlagStatuses: FeatureFlagStatuses,
): string {
  return JSON.stringify(
    FeatureFlagStatuses$outboundSchema.parse(featureFlagStatuses),
  );
}

export function featureFlagStatusesFromJSON(
  jsonString: string,
): SafeParseResult<FeatureFlagStatuses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeatureFlagStatuses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureFlagStatuses' from JSON`,
  );
}
