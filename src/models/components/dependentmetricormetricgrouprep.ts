/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MetricInGroupRep,
  MetricInGroupRep$inboundSchema,
  MetricInGroupRep$Outbound,
  MetricInGroupRep$outboundSchema,
} from "./metricingrouprep.js";

/**
 * If this is a metric, then it represents the kind of event the metric tracks. If this is a metric group, then it represents the group type
 */
export const DependentMetricOrMetricGroupRepKind = {
  Pageview: "pageview",
  Click: "click",
  Custom: "custom",
  Funnel: "funnel",
  Standard: "standard",
} as const;
/**
 * If this is a metric, then it represents the kind of event the metric tracks. If this is a metric group, then it represents the group type
 */
export type DependentMetricOrMetricGroupRepKind = ClosedEnum<
  typeof DependentMetricOrMetricGroupRepKind
>;

export type DependentMetricOrMetricGroupRep = {
  /**
   * A unique key to reference the metric or metric group
   */
  key: string;
  /**
   * The version ID of the metric or metric group
   */
  versionId: string;
  /**
   * A human-friendly name for the metric or metric group
   */
  name: string;
  /**
   * If this is a metric, then it represents the kind of event the metric tracks. If this is a metric group, then it represents the group type
   */
  kind: DependentMetricOrMetricGroupRepKind;
  /**
   * For custom metrics, whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>).
   */
  isNumeric?: boolean | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * Whether this is a metric group or a metric
   */
  isGroup: boolean;
  /**
   * An ordered list of the metrics in this metric group
   */
  metrics?: Array<MetricInGroupRep> | undefined;
};

/** @internal */
export const DependentMetricOrMetricGroupRepKind$inboundSchema: z.ZodNativeEnum<
  typeof DependentMetricOrMetricGroupRepKind
> = z.nativeEnum(DependentMetricOrMetricGroupRepKind);

/** @internal */
export const DependentMetricOrMetricGroupRepKind$outboundSchema:
  z.ZodNativeEnum<typeof DependentMetricOrMetricGroupRepKind> =
    DependentMetricOrMetricGroupRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DependentMetricOrMetricGroupRepKind$ {
  /** @deprecated use `DependentMetricOrMetricGroupRepKind$inboundSchema` instead. */
  export const inboundSchema =
    DependentMetricOrMetricGroupRepKind$inboundSchema;
  /** @deprecated use `DependentMetricOrMetricGroupRepKind$outboundSchema` instead. */
  export const outboundSchema =
    DependentMetricOrMetricGroupRepKind$outboundSchema;
}

/** @internal */
export const DependentMetricOrMetricGroupRep$inboundSchema: z.ZodType<
  DependentMetricOrMetricGroupRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  _versionId: z.string(),
  name: z.string(),
  kind: DependentMetricOrMetricGroupRepKind$inboundSchema,
  isNumeric: z.boolean().optional(),
  _links: z.record(Link$inboundSchema),
  isGroup: z.boolean(),
  metrics: z.array(MetricInGroupRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_versionId": "versionId",
    "_links": "links",
  });
});

/** @internal */
export type DependentMetricOrMetricGroupRep$Outbound = {
  key: string;
  _versionId: string;
  name: string;
  kind: string;
  isNumeric?: boolean | undefined;
  _links: { [k: string]: Link$Outbound };
  isGroup: boolean;
  metrics?: Array<MetricInGroupRep$Outbound> | undefined;
};

/** @internal */
export const DependentMetricOrMetricGroupRep$outboundSchema: z.ZodType<
  DependentMetricOrMetricGroupRep$Outbound,
  z.ZodTypeDef,
  DependentMetricOrMetricGroupRep
> = z.object({
  key: z.string(),
  versionId: z.string(),
  name: z.string(),
  kind: DependentMetricOrMetricGroupRepKind$outboundSchema,
  isNumeric: z.boolean().optional(),
  links: z.record(Link$outboundSchema),
  isGroup: z.boolean(),
  metrics: z.array(MetricInGroupRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    versionId: "_versionId",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DependentMetricOrMetricGroupRep$ {
  /** @deprecated use `DependentMetricOrMetricGroupRep$inboundSchema` instead. */
  export const inboundSchema = DependentMetricOrMetricGroupRep$inboundSchema;
  /** @deprecated use `DependentMetricOrMetricGroupRep$outboundSchema` instead. */
  export const outboundSchema = DependentMetricOrMetricGroupRep$outboundSchema;
  /** @deprecated use `DependentMetricOrMetricGroupRep$Outbound` instead. */
  export type Outbound = DependentMetricOrMetricGroupRep$Outbound;
}

export function dependentMetricOrMetricGroupRepToJSON(
  dependentMetricOrMetricGroupRep: DependentMetricOrMetricGroupRep,
): string {
  return JSON.stringify(
    DependentMetricOrMetricGroupRep$outboundSchema.parse(
      dependentMetricOrMetricGroupRep,
    ),
  );
}

export function dependentMetricOrMetricGroupRepFromJSON(
  jsonString: string,
): SafeParseResult<DependentMetricOrMetricGroupRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DependentMetricOrMetricGroupRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DependentMetricOrMetricGroupRep' from JSON`,
  );
}
