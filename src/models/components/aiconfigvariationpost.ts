/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Message,
  Message$inboundSchema,
  Message$Outbound,
  Message$outboundSchema,
} from "./message.js";

export type AIConfigVariationPostModel = {};

export type AIConfigVariationPost = {
  key: string;
  messages: Array<Message>;
  model: AIConfigVariationPostModel;
  name: string;
  modelConfigKey?: string | undefined;
  /**
   * Human-readable description of this variation
   */
  comment?: string | undefined;
};

/** @internal */
export const AIConfigVariationPostModel$inboundSchema: z.ZodType<
  AIConfigVariationPostModel,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AIConfigVariationPostModel$Outbound = {};

/** @internal */
export const AIConfigVariationPostModel$outboundSchema: z.ZodType<
  AIConfigVariationPostModel$Outbound,
  z.ZodTypeDef,
  AIConfigVariationPostModel
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigVariationPostModel$ {
  /** @deprecated use `AIConfigVariationPostModel$inboundSchema` instead. */
  export const inboundSchema = AIConfigVariationPostModel$inboundSchema;
  /** @deprecated use `AIConfigVariationPostModel$outboundSchema` instead. */
  export const outboundSchema = AIConfigVariationPostModel$outboundSchema;
  /** @deprecated use `AIConfigVariationPostModel$Outbound` instead. */
  export type Outbound = AIConfigVariationPostModel$Outbound;
}

export function aiConfigVariationPostModelToJSON(
  aiConfigVariationPostModel: AIConfigVariationPostModel,
): string {
  return JSON.stringify(
    AIConfigVariationPostModel$outboundSchema.parse(aiConfigVariationPostModel),
  );
}

export function aiConfigVariationPostModelFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigVariationPostModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigVariationPostModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigVariationPostModel' from JSON`,
  );
}

/** @internal */
export const AIConfigVariationPost$inboundSchema: z.ZodType<
  AIConfigVariationPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  messages: z.array(Message$inboundSchema),
  model: z.lazy(() => AIConfigVariationPostModel$inboundSchema),
  name: z.string(),
  modelConfigKey: z.string().optional(),
  comment: z.string().optional(),
});

/** @internal */
export type AIConfigVariationPost$Outbound = {
  key: string;
  messages: Array<Message$Outbound>;
  model: AIConfigVariationPostModel$Outbound;
  name: string;
  modelConfigKey?: string | undefined;
  comment?: string | undefined;
};

/** @internal */
export const AIConfigVariationPost$outboundSchema: z.ZodType<
  AIConfigVariationPost$Outbound,
  z.ZodTypeDef,
  AIConfigVariationPost
> = z.object({
  key: z.string(),
  messages: z.array(Message$outboundSchema),
  model: z.lazy(() => AIConfigVariationPostModel$outboundSchema),
  name: z.string(),
  modelConfigKey: z.string().optional(),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigVariationPost$ {
  /** @deprecated use `AIConfigVariationPost$inboundSchema` instead. */
  export const inboundSchema = AIConfigVariationPost$inboundSchema;
  /** @deprecated use `AIConfigVariationPost$outboundSchema` instead. */
  export const outboundSchema = AIConfigVariationPost$outboundSchema;
  /** @deprecated use `AIConfigVariationPost$Outbound` instead. */
  export type Outbound = AIConfigVariationPost$Outbound;
}

export function aiConfigVariationPostToJSON(
  aiConfigVariationPost: AIConfigVariationPost,
): string {
  return JSON.stringify(
    AIConfigVariationPost$outboundSchema.parse(aiConfigVariationPost),
  );
}

export function aiConfigVariationPostFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigVariationPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigVariationPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigVariationPost' from JSON`,
  );
}
