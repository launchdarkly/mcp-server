/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FailureReasonRep = {
  /**
   * The attribute that failed validation
   */
  attribute: string;
  /**
   * The reason the attribute failed validation
   */
  reason: string;
};

/** @internal */
export const FailureReasonRep$inboundSchema: z.ZodType<
  FailureReasonRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute: z.string(),
  reason: z.string(),
});

/** @internal */
export type FailureReasonRep$Outbound = {
  attribute: string;
  reason: string;
};

/** @internal */
export const FailureReasonRep$outboundSchema: z.ZodType<
  FailureReasonRep$Outbound,
  z.ZodTypeDef,
  FailureReasonRep
> = z.object({
  attribute: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FailureReasonRep$ {
  /** @deprecated use `FailureReasonRep$inboundSchema` instead. */
  export const inboundSchema = FailureReasonRep$inboundSchema;
  /** @deprecated use `FailureReasonRep$outboundSchema` instead. */
  export const outboundSchema = FailureReasonRep$outboundSchema;
  /** @deprecated use `FailureReasonRep$Outbound` instead. */
  export type Outbound = FailureReasonRep$Outbound;
}

export function failureReasonRepToJSON(
  failureReasonRep: FailureReasonRep,
): string {
  return JSON.stringify(
    FailureReasonRep$outboundSchema.parse(failureReasonRep),
  );
}

export function failureReasonRepFromJSON(
  jsonString: string,
): SafeParseResult<FailureReasonRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FailureReasonRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FailureReasonRep' from JSON`,
  );
}
