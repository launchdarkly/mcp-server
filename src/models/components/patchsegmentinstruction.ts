/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of change to make to the user's removal date from this segment
 */
export const PatchSegmentInstructionKind = {
  AddExpireUserTargetDate: "addExpireUserTargetDate",
  UpdateExpireUserTargetDate: "updateExpireUserTargetDate",
  RemoveExpireUserTargetDate: "removeExpireUserTargetDate",
} as const;
/**
 * The type of change to make to the user's removal date from this segment
 */
export type PatchSegmentInstructionKind = ClosedEnum<
  typeof PatchSegmentInstructionKind
>;

/**
 * The segment's target type
 */
export const PatchSegmentInstructionTargetType = {
  Included: "included",
  Excluded: "excluded",
} as const;
/**
 * The segment's target type
 */
export type PatchSegmentInstructionTargetType = ClosedEnum<
  typeof PatchSegmentInstructionTargetType
>;

export type PatchSegmentInstruction = {
  /**
   * The type of change to make to the user's removal date from this segment
   */
  kind: PatchSegmentInstructionKind;
  /**
   * A unique key used to represent the user
   */
  userKey: string;
  /**
   * The segment's target type
   */
  targetType: PatchSegmentInstructionTargetType;
  /**
   * The time, in Unix milliseconds, when the user should be removed from this segment. Required if <code>kind</code> is <code>addExpireUserTargetDate</code> or <code>updateExpireUserTargetDate</code>.
   */
  value?: number | undefined;
  /**
   * The version of the segment to update. Required if <code>kind</code> is <code>updateExpireUserTargetDate</code>.
   */
  version?: number | undefined;
};

/** @internal */
export const PatchSegmentInstructionKind$inboundSchema: z.ZodNativeEnum<
  typeof PatchSegmentInstructionKind
> = z.nativeEnum(PatchSegmentInstructionKind);

/** @internal */
export const PatchSegmentInstructionKind$outboundSchema: z.ZodNativeEnum<
  typeof PatchSegmentInstructionKind
> = PatchSegmentInstructionKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentInstructionKind$ {
  /** @deprecated use `PatchSegmentInstructionKind$inboundSchema` instead. */
  export const inboundSchema = PatchSegmentInstructionKind$inboundSchema;
  /** @deprecated use `PatchSegmentInstructionKind$outboundSchema` instead. */
  export const outboundSchema = PatchSegmentInstructionKind$outboundSchema;
}

/** @internal */
export const PatchSegmentInstructionTargetType$inboundSchema: z.ZodNativeEnum<
  typeof PatchSegmentInstructionTargetType
> = z.nativeEnum(PatchSegmentInstructionTargetType);

/** @internal */
export const PatchSegmentInstructionTargetType$outboundSchema: z.ZodNativeEnum<
  typeof PatchSegmentInstructionTargetType
> = PatchSegmentInstructionTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentInstructionTargetType$ {
  /** @deprecated use `PatchSegmentInstructionTargetType$inboundSchema` instead. */
  export const inboundSchema = PatchSegmentInstructionTargetType$inboundSchema;
  /** @deprecated use `PatchSegmentInstructionTargetType$outboundSchema` instead. */
  export const outboundSchema =
    PatchSegmentInstructionTargetType$outboundSchema;
}

/** @internal */
export const PatchSegmentInstruction$inboundSchema: z.ZodType<
  PatchSegmentInstruction,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: PatchSegmentInstructionKind$inboundSchema,
  userKey: z.string(),
  targetType: PatchSegmentInstructionTargetType$inboundSchema,
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type PatchSegmentInstruction$Outbound = {
  kind: string;
  userKey: string;
  targetType: string;
  value?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const PatchSegmentInstruction$outboundSchema: z.ZodType<
  PatchSegmentInstruction$Outbound,
  z.ZodTypeDef,
  PatchSegmentInstruction
> = z.object({
  kind: PatchSegmentInstructionKind$outboundSchema,
  userKey: z.string(),
  targetType: PatchSegmentInstructionTargetType$outboundSchema,
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentInstruction$ {
  /** @deprecated use `PatchSegmentInstruction$inboundSchema` instead. */
  export const inboundSchema = PatchSegmentInstruction$inboundSchema;
  /** @deprecated use `PatchSegmentInstruction$outboundSchema` instead. */
  export const outboundSchema = PatchSegmentInstruction$outboundSchema;
  /** @deprecated use `PatchSegmentInstruction$Outbound` instead. */
  export type Outbound = PatchSegmentInstruction$Outbound;
}

export function patchSegmentInstructionToJSON(
  patchSegmentInstruction: PatchSegmentInstruction,
): string {
  return JSON.stringify(
    PatchSegmentInstruction$outboundSchema.parse(patchSegmentInstruction),
  );
}

export function patchSegmentInstructionFromJSON(
  jsonString: string,
): SafeParseResult<PatchSegmentInstruction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchSegmentInstruction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSegmentInstruction' from JSON`,
  );
}
