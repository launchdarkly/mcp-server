/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InitiatorRep = {
  /**
   * The name of the member who initiated the export
   */
  name?: string | undefined;
  /**
   * The email address of the member who initiated the export
   */
  email?: string | undefined;
};

/** @internal */
export const InitiatorRep$inboundSchema: z.ZodType<
  InitiatorRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
});

/** @internal */
export type InitiatorRep$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
};

/** @internal */
export const InitiatorRep$outboundSchema: z.ZodType<
  InitiatorRep$Outbound,
  z.ZodTypeDef,
  InitiatorRep
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiatorRep$ {
  /** @deprecated use `InitiatorRep$inboundSchema` instead. */
  export const inboundSchema = InitiatorRep$inboundSchema;
  /** @deprecated use `InitiatorRep$outboundSchema` instead. */
  export const outboundSchema = InitiatorRep$outboundSchema;
  /** @deprecated use `InitiatorRep$Outbound` instead. */
  export type Outbound = InitiatorRep$Outbound;
}

export function initiatorRepToJSON(initiatorRep: InitiatorRep): string {
  return JSON.stringify(InitiatorRep$outboundSchema.parse(initiatorRep));
}

export function initiatorRepFromJSON(
  jsonString: string,
): SafeParseResult<InitiatorRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiatorRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiatorRep' from JSON`,
  );
}
