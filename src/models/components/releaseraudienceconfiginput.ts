/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReleaseGuardianConfigurationInput,
  ReleaseGuardianConfigurationInput$inboundSchema,
  ReleaseGuardianConfigurationInput$Outbound,
  ReleaseGuardianConfigurationInput$outboundSchema,
} from "./releaseguardianconfigurationinput.js";

export type ReleaserAudienceConfigInput = {
  /**
   * UUID of the audience.
   */
  audienceId?: string | undefined;
  releaseGuardianConfiguration?: ReleaseGuardianConfigurationInput | undefined;
  /**
   * An array of member IDs. These members are notified to review the approval request.
   */
  notifyMemberIds?: Array<string> | undefined;
  /**
   * An array of team keys. The members of these teams are notified to review the approval request.
   */
  notifyTeamKeys?: Array<string> | undefined;
};

/** @internal */
export const ReleaserAudienceConfigInput$inboundSchema: z.ZodType<
  ReleaserAudienceConfigInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  audienceId: z.string().optional(),
  releaseGuardianConfiguration: ReleaseGuardianConfigurationInput$inboundSchema
    .optional(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
});

/** @internal */
export type ReleaserAudienceConfigInput$Outbound = {
  audienceId?: string | undefined;
  releaseGuardianConfiguration?:
    | ReleaseGuardianConfigurationInput$Outbound
    | undefined;
  notifyMemberIds?: Array<string> | undefined;
  notifyTeamKeys?: Array<string> | undefined;
};

/** @internal */
export const ReleaserAudienceConfigInput$outboundSchema: z.ZodType<
  ReleaserAudienceConfigInput$Outbound,
  z.ZodTypeDef,
  ReleaserAudienceConfigInput
> = z.object({
  audienceId: z.string().optional(),
  releaseGuardianConfiguration: ReleaseGuardianConfigurationInput$outboundSchema
    .optional(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaserAudienceConfigInput$ {
  /** @deprecated use `ReleaserAudienceConfigInput$inboundSchema` instead. */
  export const inboundSchema = ReleaserAudienceConfigInput$inboundSchema;
  /** @deprecated use `ReleaserAudienceConfigInput$outboundSchema` instead. */
  export const outboundSchema = ReleaserAudienceConfigInput$outboundSchema;
  /** @deprecated use `ReleaserAudienceConfigInput$Outbound` instead. */
  export type Outbound = ReleaserAudienceConfigInput$Outbound;
}

export function releaserAudienceConfigInputToJSON(
  releaserAudienceConfigInput: ReleaserAudienceConfigInput,
): string {
  return JSON.stringify(
    ReleaserAudienceConfigInput$outboundSchema.parse(
      releaserAudienceConfigInput,
    ),
  );
}

export function releaserAudienceConfigInputFromJSON(
  jsonString: string,
): SafeParseResult<ReleaserAudienceConfigInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaserAudienceConfigInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaserAudienceConfigInput' from JSON`,
  );
}
