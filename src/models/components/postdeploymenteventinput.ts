/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The kind of application. Default: <code>server</code>
 */
export const ApplicationKind = {
  Server: "server",
  Browser: "browser",
  Mobile: "mobile",
} as const;
/**
 * The kind of application. Default: <code>server</code>
 */
export type ApplicationKind = ClosedEnum<typeof ApplicationKind>;

/**
 * The event type
 */
export const EventType = {
  Started: "started",
  Failed: "failed",
  Finished: "finished",
  Custom: "custom",
} as const;
/**
 * The event type
 */
export type EventType = ClosedEnum<typeof EventType>;

export type PostDeploymentEventInput = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The application key. This defines the granularity at which you want to view your insights metrics. Typically it is the name of one of the GitHub repositories that you use in this project.<br/><br/>LaunchDarkly automatically creates a new application each time you send a unique application key.
   */
  applicationKey: string;
  /**
   * The application name. This defines how the application is displayed
   */
  applicationName?: string | undefined;
  /**
   * The kind of application. Default: <code>server</code>
   */
  applicationKind?: ApplicationKind | undefined;
  /**
   * The application version. You can set the application version to any string that includes only letters, numbers, periods (<code>.</code>), hyphens (<code>-</code>), or underscores (<code>_</code>).<br/><br/>We recommend setting the application version to at least the first seven characters of the SHA or to the tag of the GitHub commit for this deployment.
   */
  version: string;
  /**
   * The version name. This defines how the version is displayed
   */
  versionName?: string | undefined;
  /**
   * The event type
   */
  eventType: EventType;
  eventTime?: number | undefined;
  /**
   * A JSON object containing metadata about the event
   */
  eventMetadata?: { [k: string]: any } | undefined;
  /**
   * A JSON object containing metadata about the deployment
   */
  deploymentMetadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const ApplicationKind$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationKind
> = z.nativeEnum(ApplicationKind);

/** @internal */
export const ApplicationKind$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationKind
> = ApplicationKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationKind$ {
  /** @deprecated use `ApplicationKind$inboundSchema` instead. */
  export const inboundSchema = ApplicationKind$inboundSchema;
  /** @deprecated use `ApplicationKind$outboundSchema` instead. */
  export const outboundSchema = ApplicationKind$outboundSchema;
}

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z
  .nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> =
  EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
  /** @deprecated use `EventType$inboundSchema` instead. */
  export const inboundSchema = EventType$inboundSchema;
  /** @deprecated use `EventType$outboundSchema` instead. */
  export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const PostDeploymentEventInput$inboundSchema: z.ZodType<
  PostDeploymentEventInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string(),
  applicationName: z.string().optional(),
  applicationKind: ApplicationKind$inboundSchema.optional(),
  version: z.string(),
  versionName: z.string().optional(),
  eventType: EventType$inboundSchema,
  eventTime: z.number().int().optional(),
  eventMetadata: z.record(z.any()).optional(),
  deploymentMetadata: z.record(z.any()).optional(),
});

/** @internal */
export type PostDeploymentEventInput$Outbound = {
  projectKey: string;
  environmentKey: string;
  applicationKey: string;
  applicationName?: string | undefined;
  applicationKind?: string | undefined;
  version: string;
  versionName?: string | undefined;
  eventType: string;
  eventTime?: number | undefined;
  eventMetadata?: { [k: string]: any } | undefined;
  deploymentMetadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const PostDeploymentEventInput$outboundSchema: z.ZodType<
  PostDeploymentEventInput$Outbound,
  z.ZodTypeDef,
  PostDeploymentEventInput
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string(),
  applicationName: z.string().optional(),
  applicationKind: ApplicationKind$outboundSchema.optional(),
  version: z.string(),
  versionName: z.string().optional(),
  eventType: EventType$outboundSchema,
  eventTime: z.number().int().optional(),
  eventMetadata: z.record(z.any()).optional(),
  deploymentMetadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostDeploymentEventInput$ {
  /** @deprecated use `PostDeploymentEventInput$inboundSchema` instead. */
  export const inboundSchema = PostDeploymentEventInput$inboundSchema;
  /** @deprecated use `PostDeploymentEventInput$outboundSchema` instead. */
  export const outboundSchema = PostDeploymentEventInput$outboundSchema;
  /** @deprecated use `PostDeploymentEventInput$Outbound` instead. */
  export type Outbound = PostDeploymentEventInput$Outbound;
}

export function postDeploymentEventInputToJSON(
  postDeploymentEventInput: PostDeploymentEventInput,
): string {
  return JSON.stringify(
    PostDeploymentEventInput$outboundSchema.parse(postDeploymentEventInput),
  );
}

export function postDeploymentEventInputFromJSON(
  jsonString: string,
): SafeParseResult<PostDeploymentEventInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostDeploymentEventInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostDeploymentEventInput' from JSON`,
  );
}
