/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SegmentTarget = {
  values?: Array<string> | undefined;
  contextKind?: string | undefined;
};

/** @internal */
export const SegmentTarget$inboundSchema: z.ZodType<
  SegmentTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
  contextKind: z.string().optional(),
});

/** @internal */
export type SegmentTarget$Outbound = {
  values?: Array<string> | undefined;
  contextKind?: string | undefined;
};

/** @internal */
export const SegmentTarget$outboundSchema: z.ZodType<
  SegmentTarget$Outbound,
  z.ZodTypeDef,
  SegmentTarget
> = z.object({
  values: z.array(z.string()).optional(),
  contextKind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SegmentTarget$ {
  /** @deprecated use `SegmentTarget$inboundSchema` instead. */
  export const inboundSchema = SegmentTarget$inboundSchema;
  /** @deprecated use `SegmentTarget$outboundSchema` instead. */
  export const outboundSchema = SegmentTarget$outboundSchema;
  /** @deprecated use `SegmentTarget$Outbound` instead. */
  export type Outbound = SegmentTarget$Outbound;
}

export function segmentTargetToJSON(segmentTarget: SegmentTarget): string {
  return JSON.stringify(SegmentTarget$outboundSchema.parse(segmentTarget));
}

export function segmentTargetFromJSON(
  jsonString: string,
): SafeParseResult<SegmentTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SegmentTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SegmentTarget' from JSON`,
  );
}
