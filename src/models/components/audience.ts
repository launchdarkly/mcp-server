/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AudienceConfiguration,
  AudienceConfiguration$inboundSchema,
  AudienceConfiguration$Outbound,
  AudienceConfiguration$outboundSchema,
} from "./audienceconfiguration.js";
import {
  EnvironmentSummary,
  EnvironmentSummary$inboundSchema,
  EnvironmentSummary$Outbound,
  EnvironmentSummary$outboundSchema,
} from "./environmentsummary.js";

export type Audience = {
  environment?: EnvironmentSummary | undefined;
  /**
   * The release phase name
   */
  name: string;
  configuration?: AudienceConfiguration | undefined;
  /**
   * A list of segment keys
   */
  segmentKeys?: Array<string> | undefined;
};

/** @internal */
export const Audience$inboundSchema: z.ZodType<
  Audience,
  z.ZodTypeDef,
  unknown
> = z.object({
  environment: EnvironmentSummary$inboundSchema.optional(),
  name: z.string(),
  configuration: AudienceConfiguration$inboundSchema.optional(),
  segmentKeys: z.array(z.string()).optional(),
});

/** @internal */
export type Audience$Outbound = {
  environment?: EnvironmentSummary$Outbound | undefined;
  name: string;
  configuration?: AudienceConfiguration$Outbound | undefined;
  segmentKeys?: Array<string> | undefined;
};

/** @internal */
export const Audience$outboundSchema: z.ZodType<
  Audience$Outbound,
  z.ZodTypeDef,
  Audience
> = z.object({
  environment: EnvironmentSummary$outboundSchema.optional(),
  name: z.string(),
  configuration: AudienceConfiguration$outboundSchema.optional(),
  segmentKeys: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Audience$ {
  /** @deprecated use `Audience$inboundSchema` instead. */
  export const inboundSchema = Audience$inboundSchema;
  /** @deprecated use `Audience$outboundSchema` instead. */
  export const outboundSchema = Audience$outboundSchema;
  /** @deprecated use `Audience$Outbound` instead. */
  export type Outbound = Audience$Outbound;
}

export function audienceToJSON(audience: Audience): string {
  return JSON.stringify(Audience$outboundSchema.parse(audience));
}

export function audienceFromJSON(
  jsonString: string,
): SafeParseResult<Audience, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Audience$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Audience' from JSON`,
  );
}
