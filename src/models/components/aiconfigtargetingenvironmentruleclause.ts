/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AIConfigTargetingEnvironmentRuleClause = {
  attribute: string;
  id: string;
  negate: boolean;
  op: string;
  values: Array<any>;
};

/** @internal */
export const AIConfigTargetingEnvironmentRuleClause$inboundSchema: z.ZodType<
  AIConfigTargetingEnvironmentRuleClause,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute: z.string(),
  id: z.string(),
  negate: z.boolean(),
  op: z.string(),
  values: z.array(z.any()),
});

/** @internal */
export type AIConfigTargetingEnvironmentRuleClause$Outbound = {
  attribute: string;
  id: string;
  negate: boolean;
  op: string;
  values: Array<any>;
};

/** @internal */
export const AIConfigTargetingEnvironmentRuleClause$outboundSchema: z.ZodType<
  AIConfigTargetingEnvironmentRuleClause$Outbound,
  z.ZodTypeDef,
  AIConfigTargetingEnvironmentRuleClause
> = z.object({
  attribute: z.string(),
  id: z.string(),
  negate: z.boolean(),
  op: z.string(),
  values: z.array(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigTargetingEnvironmentRuleClause$ {
  /** @deprecated use `AIConfigTargetingEnvironmentRuleClause$inboundSchema` instead. */
  export const inboundSchema =
    AIConfigTargetingEnvironmentRuleClause$inboundSchema;
  /** @deprecated use `AIConfigTargetingEnvironmentRuleClause$outboundSchema` instead. */
  export const outboundSchema =
    AIConfigTargetingEnvironmentRuleClause$outboundSchema;
  /** @deprecated use `AIConfigTargetingEnvironmentRuleClause$Outbound` instead. */
  export type Outbound = AIConfigTargetingEnvironmentRuleClause$Outbound;
}

export function aiConfigTargetingEnvironmentRuleClauseToJSON(
  aiConfigTargetingEnvironmentRuleClause:
    AIConfigTargetingEnvironmentRuleClause,
): string {
  return JSON.stringify(
    AIConfigTargetingEnvironmentRuleClause$outboundSchema.parse(
      aiConfigTargetingEnvironmentRuleClause,
    ),
  );
}

export function aiConfigTargetingEnvironmentRuleClauseFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigTargetingEnvironmentRuleClause, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AIConfigTargetingEnvironmentRuleClause$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigTargetingEnvironmentRuleClause' from JSON`,
  );
}
