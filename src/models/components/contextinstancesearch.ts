/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextInstanceSearch = {
  /**
   * A collection of context instance filters
   */
  filter?: string | undefined;
  /**
   * Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying <code>ts</code> for this value, or descending order by specifying <code>-ts</code>.
   */
  sort?: string | undefined;
  /**
   * Specifies the maximum number of items in the collection to return (max: 50, default: 20)
   */
  limit?: number | undefined;
  /**
   * Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the <code>next</code> link instead, because this value is an obfuscated string.
   */
  continuationToken?: string | undefined;
};

/** @internal */
export const ContextInstanceSearch$inboundSchema: z.ZodType<
  ContextInstanceSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
});

/** @internal */
export type ContextInstanceSearch$Outbound = {
  filter?: string | undefined;
  sort?: string | undefined;
  limit?: number | undefined;
  continuationToken?: string | undefined;
};

/** @internal */
export const ContextInstanceSearch$outboundSchema: z.ZodType<
  ContextInstanceSearch$Outbound,
  z.ZodTypeDef,
  ContextInstanceSearch
> = z.object({
  filter: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextInstanceSearch$ {
  /** @deprecated use `ContextInstanceSearch$inboundSchema` instead. */
  export const inboundSchema = ContextInstanceSearch$inboundSchema;
  /** @deprecated use `ContextInstanceSearch$outboundSchema` instead. */
  export const outboundSchema = ContextInstanceSearch$outboundSchema;
  /** @deprecated use `ContextInstanceSearch$Outbound` instead. */
  export type Outbound = ContextInstanceSearch$Outbound;
}

export function contextInstanceSearchToJSON(
  contextInstanceSearch: ContextInstanceSearch,
): string {
  return JSON.stringify(
    ContextInstanceSearch$outboundSchema.parse(contextInstanceSearch),
  );
}

export function contextInstanceSearchFromJSON(
  jsonString: string,
): SafeParseResult<ContextInstanceSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextInstanceSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextInstanceSearch' from JSON`,
  );
}
