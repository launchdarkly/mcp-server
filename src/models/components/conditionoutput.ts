/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExecutionOutput,
  ExecutionOutput$inboundSchema,
  ExecutionOutput$Outbound,
  ExecutionOutput$outboundSchema,
} from "./executionoutput.js";
import {
  ReviewOutput,
  ReviewOutput$inboundSchema,
  ReviewOutput$Outbound,
  ReviewOutput$outboundSchema,
} from "./reviewoutput.js";

export type ConditionOutput = {
  id: string;
  kind?: string | undefined;
  execution: ExecutionOutput;
  scheduleKind?: string | undefined;
  executionDate?: number | undefined;
  waitDuration?: number | undefined;
  waitDurationUnit?: string | undefined;
  description: string;
  notifyMemberIds: Array<string>;
  allReviews: Array<ReviewOutput>;
  reviewStatus: string;
  appliedDate?: number | undefined;
};

/** @internal */
export const ConditionOutput$inboundSchema: z.ZodType<
  ConditionOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  kind: z.string().optional(),
  _execution: ExecutionOutput$inboundSchema,
  scheduleKind: z.string().optional(),
  executionDate: z.number().int().optional(),
  waitDuration: z.number().int().optional(),
  waitDurationUnit: z.string().optional(),
  description: z.string(),
  notifyMemberIds: z.array(z.string()),
  allReviews: z.array(ReviewOutput$inboundSchema),
  reviewStatus: z.string(),
  appliedDate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_execution": "execution",
  });
});

/** @internal */
export type ConditionOutput$Outbound = {
  _id: string;
  kind?: string | undefined;
  _execution: ExecutionOutput$Outbound;
  scheduleKind?: string | undefined;
  executionDate?: number | undefined;
  waitDuration?: number | undefined;
  waitDurationUnit?: string | undefined;
  description: string;
  notifyMemberIds: Array<string>;
  allReviews: Array<ReviewOutput$Outbound>;
  reviewStatus: string;
  appliedDate?: number | undefined;
};

/** @internal */
export const ConditionOutput$outboundSchema: z.ZodType<
  ConditionOutput$Outbound,
  z.ZodTypeDef,
  ConditionOutput
> = z.object({
  id: z.string(),
  kind: z.string().optional(),
  execution: ExecutionOutput$outboundSchema,
  scheduleKind: z.string().optional(),
  executionDate: z.number().int().optional(),
  waitDuration: z.number().int().optional(),
  waitDurationUnit: z.string().optional(),
  description: z.string(),
  notifyMemberIds: z.array(z.string()),
  allReviews: z.array(ReviewOutput$outboundSchema),
  reviewStatus: z.string(),
  appliedDate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    execution: "_execution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConditionOutput$ {
  /** @deprecated use `ConditionOutput$inboundSchema` instead. */
  export const inboundSchema = ConditionOutput$inboundSchema;
  /** @deprecated use `ConditionOutput$outboundSchema` instead. */
  export const outboundSchema = ConditionOutput$outboundSchema;
  /** @deprecated use `ConditionOutput$Outbound` instead. */
  export type Outbound = ConditionOutput$Outbound;
}

export function conditionOutputToJSON(
  conditionOutput: ConditionOutput,
): string {
  return JSON.stringify(ConditionOutput$outboundSchema.parse(conditionOutput));
}

export function conditionOutputFromJSON(
  jsonString: string,
): SafeParseResult<ConditionOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConditionOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConditionOutput' from JSON`,
  );
}
