/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  BigSegmentStoreIntegrationLinks,
  BigSegmentStoreIntegrationLinks$inboundSchema,
  BigSegmentStoreIntegrationLinks$Outbound,
  BigSegmentStoreIntegrationLinks$outboundSchema,
} from "./bigsegmentstoreintegrationlinks.js";
import {
  BigSegmentStoreStatus,
  BigSegmentStoreStatus$inboundSchema,
  BigSegmentStoreStatus$Outbound,
  BigSegmentStoreStatus$outboundSchema,
} from "./bigsegmentstorestatus.js";

/**
 * The integration key
 */
export const BigSegmentStoreIntegrationIntegrationKey = {
  Redis: "redis",
  Dynamodb: "dynamodb",
} as const;
/**
 * The integration key
 */
export type BigSegmentStoreIntegrationIntegrationKey = ClosedEnum<
  typeof BigSegmentStoreIntegrationIntegrationKey
>;

export type BigSegmentStoreIntegration = {
  links: BigSegmentStoreIntegrationLinks;
  /**
   * The integration ID
   */
  id: string;
  /**
   * The integration key
   */
  integrationKey: BigSegmentStoreIntegrationIntegrationKey;
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  config: { [k: string]: any };
  /**
   * Whether the configuration is turned on
   */
  on: boolean;
  /**
   * List of tags for this configuration
   */
  tags: Array<string>;
  /**
   * Name of the configuration
   */
  name: string;
  /**
   * Version of the current configuration
   */
  version: number;
  access?: Access | undefined;
  status: BigSegmentStoreStatus;
};

/** @internal */
export const BigSegmentStoreIntegrationIntegrationKey$inboundSchema:
  z.ZodNativeEnum<typeof BigSegmentStoreIntegrationIntegrationKey> = z
    .nativeEnum(BigSegmentStoreIntegrationIntegrationKey);

/** @internal */
export const BigSegmentStoreIntegrationIntegrationKey$outboundSchema:
  z.ZodNativeEnum<typeof BigSegmentStoreIntegrationIntegrationKey> =
    BigSegmentStoreIntegrationIntegrationKey$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BigSegmentStoreIntegrationIntegrationKey$ {
  /** @deprecated use `BigSegmentStoreIntegrationIntegrationKey$inboundSchema` instead. */
  export const inboundSchema =
    BigSegmentStoreIntegrationIntegrationKey$inboundSchema;
  /** @deprecated use `BigSegmentStoreIntegrationIntegrationKey$outboundSchema` instead. */
  export const outboundSchema =
    BigSegmentStoreIntegrationIntegrationKey$outboundSchema;
}

/** @internal */
export const BigSegmentStoreIntegration$inboundSchema: z.ZodType<
  BigSegmentStoreIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: BigSegmentStoreIntegrationLinks$inboundSchema,
  _id: z.string(),
  integrationKey: BigSegmentStoreIntegrationIntegrationKey$inboundSchema,
  projectKey: z.string(),
  environmentKey: z.string(),
  config: z.record(z.any()),
  on: z.boolean(),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  _access: Access$inboundSchema.optional(),
  _status: BigSegmentStoreStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
    "_access": "access",
    "_status": "status",
  });
});

/** @internal */
export type BigSegmentStoreIntegration$Outbound = {
  _links: BigSegmentStoreIntegrationLinks$Outbound;
  _id: string;
  integrationKey: string;
  projectKey: string;
  environmentKey: string;
  config: { [k: string]: any };
  on: boolean;
  tags: Array<string>;
  name: string;
  version: number;
  _access?: Access$Outbound | undefined;
  _status: BigSegmentStoreStatus$Outbound;
};

/** @internal */
export const BigSegmentStoreIntegration$outboundSchema: z.ZodType<
  BigSegmentStoreIntegration$Outbound,
  z.ZodTypeDef,
  BigSegmentStoreIntegration
> = z.object({
  links: BigSegmentStoreIntegrationLinks$outboundSchema,
  id: z.string(),
  integrationKey: BigSegmentStoreIntegrationIntegrationKey$outboundSchema,
  projectKey: z.string(),
  environmentKey: z.string(),
  config: z.record(z.any()),
  on: z.boolean(),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  access: Access$outboundSchema.optional(),
  status: BigSegmentStoreStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
    status: "_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BigSegmentStoreIntegration$ {
  /** @deprecated use `BigSegmentStoreIntegration$inboundSchema` instead. */
  export const inboundSchema = BigSegmentStoreIntegration$inboundSchema;
  /** @deprecated use `BigSegmentStoreIntegration$outboundSchema` instead. */
  export const outboundSchema = BigSegmentStoreIntegration$outboundSchema;
  /** @deprecated use `BigSegmentStoreIntegration$Outbound` instead. */
  export type Outbound = BigSegmentStoreIntegration$Outbound;
}

export function bigSegmentStoreIntegrationToJSON(
  bigSegmentStoreIntegration: BigSegmentStoreIntegration,
): string {
  return JSON.stringify(
    BigSegmentStoreIntegration$outboundSchema.parse(bigSegmentStoreIntegration),
  );
}

export function bigSegmentStoreIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<BigSegmentStoreIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BigSegmentStoreIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BigSegmentStoreIntegration' from JSON`,
  );
}
