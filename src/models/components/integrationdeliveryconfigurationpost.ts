/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IntegrationDeliveryConfigurationPost = {
  /**
   * Whether the integration configuration is active. Default value is false.
   */
  on?: boolean | undefined;
  config: { [k: string]: any };
  /**
   * Tags to associate with the integration
   */
  tags?: Array<string> | undefined;
  /**
   * Name to identify the integration
   */
  name?: string | undefined;
};

/** @internal */
export const IntegrationDeliveryConfigurationPost$inboundSchema: z.ZodType<
  IntegrationDeliveryConfigurationPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  on: z.boolean().optional(),
  config: z.record(z.any()),
  tags: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/** @internal */
export type IntegrationDeliveryConfigurationPost$Outbound = {
  on?: boolean | undefined;
  config: { [k: string]: any };
  tags?: Array<string> | undefined;
  name?: string | undefined;
};

/** @internal */
export const IntegrationDeliveryConfigurationPost$outboundSchema: z.ZodType<
  IntegrationDeliveryConfigurationPost$Outbound,
  z.ZodTypeDef,
  IntegrationDeliveryConfigurationPost
> = z.object({
  on: z.boolean().optional(),
  config: z.record(z.any()),
  tags: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationDeliveryConfigurationPost$ {
  /** @deprecated use `IntegrationDeliveryConfigurationPost$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationDeliveryConfigurationPost$inboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationPost$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationDeliveryConfigurationPost$outboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationPost$Outbound` instead. */
  export type Outbound = IntegrationDeliveryConfigurationPost$Outbound;
}

export function integrationDeliveryConfigurationPostToJSON(
  integrationDeliveryConfigurationPost: IntegrationDeliveryConfigurationPost,
): string {
  return JSON.stringify(
    IntegrationDeliveryConfigurationPost$outboundSchema.parse(
      integrationDeliveryConfigurationPost,
    ),
  );
}

export function integrationDeliveryConfigurationPostFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationDeliveryConfigurationPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationDeliveryConfigurationPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationDeliveryConfigurationPost' from JSON`,
  );
}
