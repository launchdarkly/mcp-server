/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  DependentExperimentRep,
  DependentExperimentRep$inboundSchema,
  DependentExperimentRep$Outbound,
  DependentExperimentRep$outboundSchema,
} from "./dependentexperimentrep.js";
import {
  DependentMetricGroupRep,
  DependentMetricGroupRep$inboundSchema,
  DependentMetricGroupRep$Outbound,
  DependentMetricGroupRep$outboundSchema,
} from "./dependentmetricgrouprep.js";
import {
  Filter,
  Filter$inboundSchema,
  Filter$Outbound,
  Filter$outboundSchema,
} from "./filter.js";
import {
  FlagListingRep,
  FlagListingRep$inboundSchema,
  FlagListingRep$Outbound,
  FlagListingRep$outboundSchema,
} from "./flaglistingrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  MetricEventDefaultRep,
  MetricEventDefaultRep$inboundSchema,
  MetricEventDefaultRep$Outbound,
  MetricEventDefaultRep$outboundSchema,
} from "./metriceventdefaultrep.js";
import {
  Modification,
  Modification$inboundSchema,
  Modification$Outbound,
  Modification$outboundSchema,
} from "./modification.js";

/**
 * The kind of event the metric tracks
 */
export const MetricRepKind = {
  Pageview: "pageview",
  Click: "click",
  Custom: "custom",
} as const;
/**
 * The kind of event the metric tracks
 */
export type MetricRepKind = ClosedEnum<typeof MetricRepKind>;

/**
 * For custom metrics, the success criteria
 */
export const MetricRepSuccessCriteria = {
  HigherThanBaseline: "HigherThanBaseline",
  LowerThanBaseline: "LowerThanBaseline",
} as const;
/**
 * For custom metrics, the success criteria
 */
export type MetricRepSuccessCriteria = ClosedEnum<
  typeof MetricRepSuccessCriteria
>;

/**
 * The method by which multiple unit event values are aggregated
 */
export const MetricRepUnitAggregationType = {
  Average: "average",
  Sum: "sum",
} as const;
/**
 * The method by which multiple unit event values are aggregated
 */
export type MetricRepUnitAggregationType = ClosedEnum<
  typeof MetricRepUnitAggregationType
>;

/**
 * The method for analyzing metric events
 */
export const MetricRepAnalysisType = {
  Mean: "mean",
  Percentile: "percentile",
} as const;
/**
 * The method for analyzing metric events
 */
export type MetricRepAnalysisType = ClosedEnum<typeof MetricRepAnalysisType>;

export type MetricRep = {
  /**
   * The number of experiments using this metric
   */
  experimentCount?: number | undefined;
  /**
   * The number of metric groups using this metric
   */
  metricGroupCount?: number | undefined;
  /**
   * The ID of this metric
   */
  id: string;
  /**
   * The version ID of the metric
   */
  versionId: string;
  /**
   * A unique key to reference the metric
   */
  key: string;
  /**
   * A human-friendly name for the metric
   */
  name: string;
  /**
   * The kind of event the metric tracks
   */
  kind: MetricRepKind;
  /**
   * The number of feature flags currently attached to this metric
   */
  attachedFlagCount?: number | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  site?: Link | undefined;
  access?: Access | undefined;
  /**
   * Tags for the metric
   */
  tags: Array<string>;
  creationDate: number;
  lastModified?: Modification | undefined;
  /**
   * The ID of the member who maintains this metric
   */
  maintainerId?: string | undefined;
  maintainer?: MemberSummary | undefined;
  /**
   * Description of the metric
   */
  description?: string | undefined;
  /**
   * The category of the metric
   */
  category?: string | undefined;
  /**
   * For custom metrics, whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>).
   */
  isNumeric?: boolean | undefined;
  /**
   * For custom metrics, the success criteria
   */
  successCriteria?: MetricRepSuccessCriteria | undefined;
  /**
   * For numeric custom metrics, the unit of measure
   */
  unit?: string | undefined;
  /**
   * For custom metrics, the event key to use in your code
   */
  eventKey?: string | undefined;
  /**
   * An array of randomization units allowed for this metric
   */
  randomizationUnits?: Array<string> | undefined;
  filters?: Filter | undefined;
  /**
   * The method by which multiple unit event values are aggregated
   */
  unitAggregationType?: MetricRepUnitAggregationType | undefined;
  /**
   * The method for analyzing metric events
   */
  analysisType?: MetricRepAnalysisType | undefined;
  /**
   * The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>.
   */
  percentileValue?: number | undefined;
  eventDefault?: MetricEventDefaultRep | undefined;
  experiments?: Array<DependentExperimentRep> | undefined;
  /**
   * Metric groups that use this metric
   */
  metricGroups?: Array<DependentMetricGroupRep> | undefined;
  /**
   * Whether the metric is active
   */
  isActive?: boolean | undefined;
  /**
   * Details on the flags attached to this metric
   */
  attachedFeatures?: Array<FlagListingRep> | undefined;
  /**
   * Version of the metric
   */
  version?: number | undefined;
  /**
   * For click metrics, the CSS selectors
   */
  selector?: string | undefined;
  urls?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const MetricRepKind$inboundSchema: z.ZodNativeEnum<
  typeof MetricRepKind
> = z.nativeEnum(MetricRepKind);

/** @internal */
export const MetricRepKind$outboundSchema: z.ZodNativeEnum<
  typeof MetricRepKind
> = MetricRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricRepKind$ {
  /** @deprecated use `MetricRepKind$inboundSchema` instead. */
  export const inboundSchema = MetricRepKind$inboundSchema;
  /** @deprecated use `MetricRepKind$outboundSchema` instead. */
  export const outboundSchema = MetricRepKind$outboundSchema;
}

/** @internal */
export const MetricRepSuccessCriteria$inboundSchema: z.ZodNativeEnum<
  typeof MetricRepSuccessCriteria
> = z.nativeEnum(MetricRepSuccessCriteria);

/** @internal */
export const MetricRepSuccessCriteria$outboundSchema: z.ZodNativeEnum<
  typeof MetricRepSuccessCriteria
> = MetricRepSuccessCriteria$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricRepSuccessCriteria$ {
  /** @deprecated use `MetricRepSuccessCriteria$inboundSchema` instead. */
  export const inboundSchema = MetricRepSuccessCriteria$inboundSchema;
  /** @deprecated use `MetricRepSuccessCriteria$outboundSchema` instead. */
  export const outboundSchema = MetricRepSuccessCriteria$outboundSchema;
}

/** @internal */
export const MetricRepUnitAggregationType$inboundSchema: z.ZodNativeEnum<
  typeof MetricRepUnitAggregationType
> = z.nativeEnum(MetricRepUnitAggregationType);

/** @internal */
export const MetricRepUnitAggregationType$outboundSchema: z.ZodNativeEnum<
  typeof MetricRepUnitAggregationType
> = MetricRepUnitAggregationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricRepUnitAggregationType$ {
  /** @deprecated use `MetricRepUnitAggregationType$inboundSchema` instead. */
  export const inboundSchema = MetricRepUnitAggregationType$inboundSchema;
  /** @deprecated use `MetricRepUnitAggregationType$outboundSchema` instead. */
  export const outboundSchema = MetricRepUnitAggregationType$outboundSchema;
}

/** @internal */
export const MetricRepAnalysisType$inboundSchema: z.ZodNativeEnum<
  typeof MetricRepAnalysisType
> = z.nativeEnum(MetricRepAnalysisType);

/** @internal */
export const MetricRepAnalysisType$outboundSchema: z.ZodNativeEnum<
  typeof MetricRepAnalysisType
> = MetricRepAnalysisType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricRepAnalysisType$ {
  /** @deprecated use `MetricRepAnalysisType$inboundSchema` instead. */
  export const inboundSchema = MetricRepAnalysisType$inboundSchema;
  /** @deprecated use `MetricRepAnalysisType$outboundSchema` instead. */
  export const outboundSchema = MetricRepAnalysisType$outboundSchema;
}

/** @internal */
export const MetricRep$inboundSchema: z.ZodType<
  MetricRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentCount: z.number().int().optional(),
  metricGroupCount: z.number().int().optional(),
  _id: z.string(),
  _versionId: z.string(),
  key: z.string(),
  name: z.string(),
  kind: MetricRepKind$inboundSchema,
  _attachedFlagCount: z.number().int().optional(),
  _links: z.record(Link$inboundSchema),
  _site: Link$inboundSchema.optional(),
  _access: Access$inboundSchema.optional(),
  tags: z.array(z.string()),
  _creationDate: z.number().int(),
  lastModified: Modification$inboundSchema.optional(),
  maintainerId: z.string().optional(),
  _maintainer: MemberSummary$inboundSchema.optional(),
  description: z.string().optional(),
  category: z.string().optional(),
  isNumeric: z.boolean().optional(),
  successCriteria: MetricRepSuccessCriteria$inboundSchema.optional(),
  unit: z.string().optional(),
  eventKey: z.string().optional(),
  randomizationUnits: z.array(z.string()).optional(),
  filters: Filter$inboundSchema.optional(),
  unitAggregationType: MetricRepUnitAggregationType$inboundSchema.optional(),
  analysisType: MetricRepAnalysisType$inboundSchema.optional(),
  percentileValue: z.number().int().optional(),
  eventDefault: MetricEventDefaultRep$inboundSchema.optional(),
  experiments: z.array(DependentExperimentRep$inboundSchema).optional(),
  metricGroups: z.array(DependentMetricGroupRep$inboundSchema).optional(),
  isActive: z.boolean().optional(),
  _attachedFeatures: z.array(FlagListingRep$inboundSchema).optional(),
  _version: z.number().int().optional(),
  selector: z.string().optional(),
  urls: z.array(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_versionId": "versionId",
    "_attachedFlagCount": "attachedFlagCount",
    "_links": "links",
    "_site": "site",
    "_access": "access",
    "_creationDate": "creationDate",
    "_maintainer": "maintainer",
    "_attachedFeatures": "attachedFeatures",
    "_version": "version",
  });
});

/** @internal */
export type MetricRep$Outbound = {
  experimentCount?: number | undefined;
  metricGroupCount?: number | undefined;
  _id: string;
  _versionId: string;
  key: string;
  name: string;
  kind: string;
  _attachedFlagCount?: number | undefined;
  _links: { [k: string]: Link$Outbound };
  _site?: Link$Outbound | undefined;
  _access?: Access$Outbound | undefined;
  tags: Array<string>;
  _creationDate: number;
  lastModified?: Modification$Outbound | undefined;
  maintainerId?: string | undefined;
  _maintainer?: MemberSummary$Outbound | undefined;
  description?: string | undefined;
  category?: string | undefined;
  isNumeric?: boolean | undefined;
  successCriteria?: string | undefined;
  unit?: string | undefined;
  eventKey?: string | undefined;
  randomizationUnits?: Array<string> | undefined;
  filters?: Filter$Outbound | undefined;
  unitAggregationType?: string | undefined;
  analysisType?: string | undefined;
  percentileValue?: number | undefined;
  eventDefault?: MetricEventDefaultRep$Outbound | undefined;
  experiments?: Array<DependentExperimentRep$Outbound> | undefined;
  metricGroups?: Array<DependentMetricGroupRep$Outbound> | undefined;
  isActive?: boolean | undefined;
  _attachedFeatures?: Array<FlagListingRep$Outbound> | undefined;
  _version?: number | undefined;
  selector?: string | undefined;
  urls?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const MetricRep$outboundSchema: z.ZodType<
  MetricRep$Outbound,
  z.ZodTypeDef,
  MetricRep
> = z.object({
  experimentCount: z.number().int().optional(),
  metricGroupCount: z.number().int().optional(),
  id: z.string(),
  versionId: z.string(),
  key: z.string(),
  name: z.string(),
  kind: MetricRepKind$outboundSchema,
  attachedFlagCount: z.number().int().optional(),
  links: z.record(Link$outboundSchema),
  site: Link$outboundSchema.optional(),
  access: Access$outboundSchema.optional(),
  tags: z.array(z.string()),
  creationDate: z.number().int(),
  lastModified: Modification$outboundSchema.optional(),
  maintainerId: z.string().optional(),
  maintainer: MemberSummary$outboundSchema.optional(),
  description: z.string().optional(),
  category: z.string().optional(),
  isNumeric: z.boolean().optional(),
  successCriteria: MetricRepSuccessCriteria$outboundSchema.optional(),
  unit: z.string().optional(),
  eventKey: z.string().optional(),
  randomizationUnits: z.array(z.string()).optional(),
  filters: Filter$outboundSchema.optional(),
  unitAggregationType: MetricRepUnitAggregationType$outboundSchema.optional(),
  analysisType: MetricRepAnalysisType$outboundSchema.optional(),
  percentileValue: z.number().int().optional(),
  eventDefault: MetricEventDefaultRep$outboundSchema.optional(),
  experiments: z.array(DependentExperimentRep$outboundSchema).optional(),
  metricGroups: z.array(DependentMetricGroupRep$outboundSchema).optional(),
  isActive: z.boolean().optional(),
  attachedFeatures: z.array(FlagListingRep$outboundSchema).optional(),
  version: z.number().int().optional(),
  selector: z.string().optional(),
  urls: z.array(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    versionId: "_versionId",
    attachedFlagCount: "_attachedFlagCount",
    links: "_links",
    site: "_site",
    access: "_access",
    creationDate: "_creationDate",
    maintainer: "_maintainer",
    attachedFeatures: "_attachedFeatures",
    version: "_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricRep$ {
  /** @deprecated use `MetricRep$inboundSchema` instead. */
  export const inboundSchema = MetricRep$inboundSchema;
  /** @deprecated use `MetricRep$outboundSchema` instead. */
  export const outboundSchema = MetricRep$outboundSchema;
  /** @deprecated use `MetricRep$Outbound` instead. */
  export type Outbound = MetricRep$Outbound;
}

export function metricRepToJSON(metricRep: MetricRep): string {
  return JSON.stringify(MetricRep$outboundSchema.parse(metricRep));
}

export function metricRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricRep' from JSON`,
  );
}
