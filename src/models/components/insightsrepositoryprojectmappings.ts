/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsRepositoryProject,
  InsightsRepositoryProject$inboundSchema,
  InsightsRepositoryProject$Outbound,
  InsightsRepositoryProject$outboundSchema,
} from "./insightsrepositoryproject.js";

export type InsightsRepositoryProjectMappings = {
  mappings: Array<InsightsRepositoryProject>;
};

/** @internal */
export const InsightsRepositoryProjectMappings$inboundSchema: z.ZodType<
  InsightsRepositoryProjectMappings,
  z.ZodTypeDef,
  unknown
> = z.object({
  mappings: z.array(InsightsRepositoryProject$inboundSchema),
});

/** @internal */
export type InsightsRepositoryProjectMappings$Outbound = {
  mappings: Array<InsightsRepositoryProject$Outbound>;
};

/** @internal */
export const InsightsRepositoryProjectMappings$outboundSchema: z.ZodType<
  InsightsRepositoryProjectMappings$Outbound,
  z.ZodTypeDef,
  InsightsRepositoryProjectMappings
> = z.object({
  mappings: z.array(InsightsRepositoryProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRepositoryProjectMappings$ {
  /** @deprecated use `InsightsRepositoryProjectMappings$inboundSchema` instead. */
  export const inboundSchema = InsightsRepositoryProjectMappings$inboundSchema;
  /** @deprecated use `InsightsRepositoryProjectMappings$outboundSchema` instead. */
  export const outboundSchema =
    InsightsRepositoryProjectMappings$outboundSchema;
  /** @deprecated use `InsightsRepositoryProjectMappings$Outbound` instead. */
  export type Outbound = InsightsRepositoryProjectMappings$Outbound;
}

export function insightsRepositoryProjectMappingsToJSON(
  insightsRepositoryProjectMappings: InsightsRepositoryProjectMappings,
): string {
  return JSON.stringify(
    InsightsRepositoryProjectMappings$outboundSchema.parse(
      insightsRepositoryProjectMappings,
    ),
  );
}

export function insightsRepositoryProjectMappingsFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRepositoryProjectMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsRepositoryProjectMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRepositoryProjectMappings' from JSON`,
  );
}
