/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlagValueUnion,
  FlagValueUnion$inboundSchema,
  FlagValueUnion$Outbound,
  FlagValueUnion$outboundSchema,
} from "./flagvalueunion.js";

/**
 * Flag override
 */
export type FlagOverride = {
  /**
   * value of a feature flag variation
   */
  value: FlagValueUnion;
  /**
   * whether or not this is an overridden value or one from the source environment
   */
  override: boolean;
};

/** @internal */
export const FlagOverride$inboundSchema: z.ZodType<
  FlagOverride,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: FlagValueUnion$inboundSchema,
  override: z.boolean(),
});

/** @internal */
export type FlagOverride$Outbound = {
  value: FlagValueUnion$Outbound;
  override: boolean;
};

/** @internal */
export const FlagOverride$outboundSchema: z.ZodType<
  FlagOverride$Outbound,
  z.ZodTypeDef,
  FlagOverride
> = z.object({
  value: FlagValueUnion$outboundSchema,
  override: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagOverride$ {
  /** @deprecated use `FlagOverride$inboundSchema` instead. */
  export const inboundSchema = FlagOverride$inboundSchema;
  /** @deprecated use `FlagOverride$outboundSchema` instead. */
  export const outboundSchema = FlagOverride$outboundSchema;
  /** @deprecated use `FlagOverride$Outbound` instead. */
  export type Outbound = FlagOverride$Outbound;
}

export function flagOverrideToJSON(flagOverride: FlagOverride): string {
  return JSON.stringify(FlagOverride$outboundSchema.parse(flagOverride));
}

export function flagOverrideFromJSON(
  jsonString: string,
): SafeParseResult<FlagOverride, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagOverride$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagOverride' from JSON`,
  );
}
