/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpList = {
  /**
   * A list of the IP addresses LaunchDarkly's service uses
   */
  addresses: Array<string>;
  /**
   * A list of the IP addresses outgoing webhook notifications use
   */
  outboundAddresses: Array<string>;
};

/** @internal */
export const IpList$inboundSchema: z.ZodType<IpList, z.ZodTypeDef, unknown> = z
  .object({
    addresses: z.array(z.string()),
    outboundAddresses: z.array(z.string()),
  });

/** @internal */
export type IpList$Outbound = {
  addresses: Array<string>;
  outboundAddresses: Array<string>;
};

/** @internal */
export const IpList$outboundSchema: z.ZodType<
  IpList$Outbound,
  z.ZodTypeDef,
  IpList
> = z.object({
  addresses: z.array(z.string()),
  outboundAddresses: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpList$ {
  /** @deprecated use `IpList$inboundSchema` instead. */
  export const inboundSchema = IpList$inboundSchema;
  /** @deprecated use `IpList$outboundSchema` instead. */
  export const outboundSchema = IpList$outboundSchema;
  /** @deprecated use `IpList$Outbound` instead. */
  export type Outbound = IpList$Outbound;
}

export function ipListToJSON(ipList: IpList): string {
  return JSON.stringify(IpList$outboundSchema.parse(ipList));
}

export function ipListFromJSON(
  jsonString: string,
): SafeParseResult<IpList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IpList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpList' from JSON`,
  );
}
