/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  TokenSummary,
  TokenSummary$inboundSchema,
  TokenSummary$Outbound,
  TokenSummary$outboundSchema,
} from "./tokensummary.js";

export type CompletedBy = {
  member?: MemberSummary | undefined;
  token?: TokenSummary | undefined;
};

/** @internal */
export const CompletedBy$inboundSchema: z.ZodType<
  CompletedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  member: MemberSummary$inboundSchema.optional(),
  token: TokenSummary$inboundSchema.optional(),
});

/** @internal */
export type CompletedBy$Outbound = {
  member?: MemberSummary$Outbound | undefined;
  token?: TokenSummary$Outbound | undefined;
};

/** @internal */
export const CompletedBy$outboundSchema: z.ZodType<
  CompletedBy$Outbound,
  z.ZodTypeDef,
  CompletedBy
> = z.object({
  member: MemberSummary$outboundSchema.optional(),
  token: TokenSummary$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletedBy$ {
  /** @deprecated use `CompletedBy$inboundSchema` instead. */
  export const inboundSchema = CompletedBy$inboundSchema;
  /** @deprecated use `CompletedBy$outboundSchema` instead. */
  export const outboundSchema = CompletedBy$outboundSchema;
  /** @deprecated use `CompletedBy$Outbound` instead. */
  export type Outbound = CompletedBy$Outbound;
}

export function completedByToJSON(completedBy: CompletedBy): string {
  return JSON.stringify(CompletedBy$outboundSchema.parse(completedBy));
}

export function completedByFromJSON(
  jsonString: string,
): SafeParseResult<CompletedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletedBy' from JSON`,
  );
}
