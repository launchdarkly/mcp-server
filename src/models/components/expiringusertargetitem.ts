/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceIDResponse,
  ResourceIDResponse$inboundSchema,
  ResourceIDResponse$Outbound,
  ResourceIDResponse$outboundSchema,
} from "./resourceidresponse.js";

export type ExpiringUserTargetItem = {
  /**
   * The ID of this expiring user target
   */
  id: string;
  /**
   * The version of this expiring user target
   */
  version: number;
  expirationDate: number;
  /**
   * A unique key used to represent the user
   */
  userKey: string;
  /**
   * A segment's target type. Included when expiring user targets are updated on a segment.
   */
  targetType?: string | undefined;
  /**
   * A unique key used to represent the flag variation. Included when expiring user targets are updated on a feature flag.
   */
  variationId?: string | undefined;
  resourceId: ResourceIDResponse;
};

/** @internal */
export const ExpiringUserTargetItem$inboundSchema: z.ZodType<
  ExpiringUserTargetItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _version: z.number().int(),
  expirationDate: z.number().int(),
  userKey: z.string(),
  targetType: z.string().optional(),
  variationId: z.string().optional(),
  _resourceId: ResourceIDResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_version": "version",
    "_resourceId": "resourceId",
  });
});

/** @internal */
export type ExpiringUserTargetItem$Outbound = {
  _id: string;
  _version: number;
  expirationDate: number;
  userKey: string;
  targetType?: string | undefined;
  variationId?: string | undefined;
  _resourceId: ResourceIDResponse$Outbound;
};

/** @internal */
export const ExpiringUserTargetItem$outboundSchema: z.ZodType<
  ExpiringUserTargetItem$Outbound,
  z.ZodTypeDef,
  ExpiringUserTargetItem
> = z.object({
  id: z.string(),
  version: z.number().int(),
  expirationDate: z.number().int(),
  userKey: z.string(),
  targetType: z.string().optional(),
  variationId: z.string().optional(),
  resourceId: ResourceIDResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    version: "_version",
    resourceId: "_resourceId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringUserTargetItem$ {
  /** @deprecated use `ExpiringUserTargetItem$inboundSchema` instead. */
  export const inboundSchema = ExpiringUserTargetItem$inboundSchema;
  /** @deprecated use `ExpiringUserTargetItem$outboundSchema` instead. */
  export const outboundSchema = ExpiringUserTargetItem$outboundSchema;
  /** @deprecated use `ExpiringUserTargetItem$Outbound` instead. */
  export type Outbound = ExpiringUserTargetItem$Outbound;
}

export function expiringUserTargetItemToJSON(
  expiringUserTargetItem: ExpiringUserTargetItem,
): string {
  return JSON.stringify(
    ExpiringUserTargetItem$outboundSchema.parse(expiringUserTargetItem),
  );
}

export function expiringUserTargetItemFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringUserTargetItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringUserTargetItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringUserTargetItem' from JSON`,
  );
}
