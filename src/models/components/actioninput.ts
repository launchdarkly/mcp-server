/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActionInput = {
  /**
   * An array of instructions for the stage. Each object in the array uses the semantic patch format for updating a feature flag.
   */
  instructions?: any | undefined;
};

/** @internal */
export const ActionInput$inboundSchema: z.ZodType<
  ActionInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  instructions: z.any().optional(),
});

/** @internal */
export type ActionInput$Outbound = {
  instructions?: any | undefined;
};

/** @internal */
export const ActionInput$outboundSchema: z.ZodType<
  ActionInput$Outbound,
  z.ZodTypeDef,
  ActionInput
> = z.object({
  instructions: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionInput$ {
  /** @deprecated use `ActionInput$inboundSchema` instead. */
  export const inboundSchema = ActionInput$inboundSchema;
  /** @deprecated use `ActionInput$outboundSchema` instead. */
  export const outboundSchema = ActionInput$outboundSchema;
  /** @deprecated use `ActionInput$Outbound` instead. */
  export type Outbound = ActionInput$Outbound;
}

export function actionInputToJSON(actionInput: ActionInput): string {
  return JSON.stringify(ActionInput$outboundSchema.parse(actionInput));
}

export function actionInputFromJSON(
  jsonString: string,
): SafeParseResult<ActionInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionInput' from JSON`,
  );
}
