/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TagsLink,
  TagsLink$inboundSchema,
  TagsLink$Outbound,
  TagsLink$outboundSchema,
} from "./tagslink.js";

export type TagsCollection = {
  /**
   * List of tags
   */
  items: Array<string>;
  links: { [k: string]: TagsLink };
  /**
   * The total number of tags
   */
  totalCount?: number | undefined;
};

/** @internal */
export const TagsCollection$inboundSchema: z.ZodType<
  TagsCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.string()),
  _links: z.record(TagsLink$inboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type TagsCollection$Outbound = {
  items: Array<string>;
  _links: { [k: string]: TagsLink$Outbound };
  totalCount?: number | undefined;
};

/** @internal */
export const TagsCollection$outboundSchema: z.ZodType<
  TagsCollection$Outbound,
  z.ZodTypeDef,
  TagsCollection
> = z.object({
  items: z.array(z.string()),
  links: z.record(TagsLink$outboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagsCollection$ {
  /** @deprecated use `TagsCollection$inboundSchema` instead. */
  export const inboundSchema = TagsCollection$inboundSchema;
  /** @deprecated use `TagsCollection$outboundSchema` instead. */
  export const outboundSchema = TagsCollection$outboundSchema;
  /** @deprecated use `TagsCollection$Outbound` instead. */
  export type Outbound = TagsCollection$Outbound;
}

export function tagsCollectionToJSON(tagsCollection: TagsCollection): string {
  return JSON.stringify(TagsCollection$outboundSchema.parse(tagsCollection));
}

export function tagsCollectionFromJSON(
  jsonString: string,
): SafeParseResult<TagsCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagsCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagsCollection' from JSON`,
  );
}
