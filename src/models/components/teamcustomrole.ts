/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TeamProjects,
  TeamProjects$inboundSchema,
  TeamProjects$Outbound,
  TeamProjects$outboundSchema,
} from "./teamprojects.js";

export type TeamCustomRole = {
  /**
   * The key of the custom role
   */
  key?: string | undefined;
  /**
   * The name of the custom role
   */
  name?: string | undefined;
  projects?: TeamProjects | undefined;
  appliedOn?: number | undefined;
};

/** @internal */
export const TeamCustomRole$inboundSchema: z.ZodType<
  TeamCustomRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  projects: TeamProjects$inboundSchema.optional(),
  appliedOn: z.number().int().optional(),
});

/** @internal */
export type TeamCustomRole$Outbound = {
  key?: string | undefined;
  name?: string | undefined;
  projects?: TeamProjects$Outbound | undefined;
  appliedOn?: number | undefined;
};

/** @internal */
export const TeamCustomRole$outboundSchema: z.ZodType<
  TeamCustomRole$Outbound,
  z.ZodTypeDef,
  TeamCustomRole
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  projects: TeamProjects$outboundSchema.optional(),
  appliedOn: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamCustomRole$ {
  /** @deprecated use `TeamCustomRole$inboundSchema` instead. */
  export const inboundSchema = TeamCustomRole$inboundSchema;
  /** @deprecated use `TeamCustomRole$outboundSchema` instead. */
  export const outboundSchema = TeamCustomRole$outboundSchema;
  /** @deprecated use `TeamCustomRole$Outbound` instead. */
  export type Outbound = TeamCustomRole$Outbound;
}

export function teamCustomRoleToJSON(teamCustomRole: TeamCustomRole): string {
  return JSON.stringify(TeamCustomRole$outboundSchema.parse(teamCustomRole));
}

export function teamCustomRoleFromJSON(
  jsonString: string,
): SafeParseResult<TeamCustomRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamCustomRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamCustomRole' from JSON`,
  );
}
