/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InstructionUserRequest,
  InstructionUserRequest$inboundSchema,
  InstructionUserRequest$Outbound,
  InstructionUserRequest$outboundSchema,
} from "./instructionuserrequest.js";

export type PatchUsersRequest = {
  /**
   * Optional comment describing the change
   */
  comment?: string | undefined;
  /**
   * The instructions to perform when updating
   */
  instructions: Array<InstructionUserRequest>;
};

/** @internal */
export const PatchUsersRequest$inboundSchema: z.ZodType<
  PatchUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(InstructionUserRequest$inboundSchema),
});

/** @internal */
export type PatchUsersRequest$Outbound = {
  comment?: string | undefined;
  instructions: Array<InstructionUserRequest$Outbound>;
};

/** @internal */
export const PatchUsersRequest$outboundSchema: z.ZodType<
  PatchUsersRequest$Outbound,
  z.ZodTypeDef,
  PatchUsersRequest
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(InstructionUserRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchUsersRequest$ {
  /** @deprecated use `PatchUsersRequest$inboundSchema` instead. */
  export const inboundSchema = PatchUsersRequest$inboundSchema;
  /** @deprecated use `PatchUsersRequest$outboundSchema` instead. */
  export const outboundSchema = PatchUsersRequest$outboundSchema;
  /** @deprecated use `PatchUsersRequest$Outbound` instead. */
  export type Outbound = PatchUsersRequest$Outbound;
}

export function patchUsersRequestToJSON(
  patchUsersRequest: PatchUsersRequest,
): string {
  return JSON.stringify(
    PatchUsersRequest$outboundSchema.parse(patchUsersRequest),
  );
}

export function patchUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchUsersRequest' from JSON`,
  );
}
