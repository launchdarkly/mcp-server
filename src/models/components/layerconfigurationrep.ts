/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LayerReservationRep,
  LayerReservationRep$inboundSchema,
  LayerReservationRep$Outbound,
  LayerReservationRep$outboundSchema,
} from "./layerreservationrep.js";

export type LayerConfigurationRep = {
  /**
   * The experiment reservations for the layer
   */
  reservations: Array<LayerReservationRep>;
};

/** @internal */
export const LayerConfigurationRep$inboundSchema: z.ZodType<
  LayerConfigurationRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  reservations: z.array(LayerReservationRep$inboundSchema),
});

/** @internal */
export type LayerConfigurationRep$Outbound = {
  reservations: Array<LayerReservationRep$Outbound>;
};

/** @internal */
export const LayerConfigurationRep$outboundSchema: z.ZodType<
  LayerConfigurationRep$Outbound,
  z.ZodTypeDef,
  LayerConfigurationRep
> = z.object({
  reservations: z.array(LayerReservationRep$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayerConfigurationRep$ {
  /** @deprecated use `LayerConfigurationRep$inboundSchema` instead. */
  export const inboundSchema = LayerConfigurationRep$inboundSchema;
  /** @deprecated use `LayerConfigurationRep$outboundSchema` instead. */
  export const outboundSchema = LayerConfigurationRep$outboundSchema;
  /** @deprecated use `LayerConfigurationRep$Outbound` instead. */
  export type Outbound = LayerConfigurationRep$Outbound;
}

export function layerConfigurationRepToJSON(
  layerConfigurationRep: LayerConfigurationRep,
): string {
  return JSON.stringify(
    LayerConfigurationRep$outboundSchema.parse(layerConfigurationRep),
  );
}

export function layerConfigurationRepFromJSON(
  jsonString: string,
): SafeParseResult<LayerConfigurationRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayerConfigurationRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayerConfigurationRep' from JSON`,
  );
}
