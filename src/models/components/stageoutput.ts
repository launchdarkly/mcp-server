/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionOutput,
  ActionOutput$inboundSchema,
  ActionOutput$Outbound,
  ActionOutput$outboundSchema,
} from "./actionoutput.js";
import {
  ConditionOutput,
  ConditionOutput$inboundSchema,
  ConditionOutput$Outbound,
  ConditionOutput$outboundSchema,
} from "./conditionoutput.js";
import {
  ExecutionOutput,
  ExecutionOutput$inboundSchema,
  ExecutionOutput$Outbound,
  ExecutionOutput$outboundSchema,
} from "./executionoutput.js";

export type StageOutput = {
  /**
   * The ID of this stage
   */
  id: string;
  /**
   * The stage name
   */
  name?: string | undefined;
  /**
   * An array of conditions for the stage
   */
  conditions: Array<ConditionOutput>;
  action: ActionOutput;
  execution: ExecutionOutput;
};

/** @internal */
export const StageOutput$inboundSchema: z.ZodType<
  StageOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  name: z.string().optional(),
  conditions: z.array(ConditionOutput$inboundSchema),
  action: ActionOutput$inboundSchema,
  _execution: ExecutionOutput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_execution": "execution",
  });
});

/** @internal */
export type StageOutput$Outbound = {
  _id: string;
  name?: string | undefined;
  conditions: Array<ConditionOutput$Outbound>;
  action: ActionOutput$Outbound;
  _execution: ExecutionOutput$Outbound;
};

/** @internal */
export const StageOutput$outboundSchema: z.ZodType<
  StageOutput$Outbound,
  z.ZodTypeDef,
  StageOutput
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  conditions: z.array(ConditionOutput$outboundSchema),
  action: ActionOutput$outboundSchema,
  execution: ExecutionOutput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    execution: "_execution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageOutput$ {
  /** @deprecated use `StageOutput$inboundSchema` instead. */
  export const inboundSchema = StageOutput$inboundSchema;
  /** @deprecated use `StageOutput$outboundSchema` instead. */
  export const outboundSchema = StageOutput$outboundSchema;
  /** @deprecated use `StageOutput$Outbound` instead. */
  export type Outbound = StageOutput$Outbound;
}

export function stageOutputToJSON(stageOutput: StageOutput): string {
  return JSON.stringify(StageOutput$outboundSchema.parse(stageOutput));
}

export function stageOutputFromJSON(
  jsonString: string,
): SafeParseResult<StageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageOutput' from JSON`,
  );
}
