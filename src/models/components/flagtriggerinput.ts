/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FlagTriggerInput = {
  /**
   * Optional comment describing the update
   */
  comment?: string | undefined;
  /**
   * The instructions to perform when updating. This should be an array with objects that look like <code>{"kind": "trigger_action"}</code>.
   */
  instructions?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const FlagTriggerInput$inboundSchema: z.ZodType<
  FlagTriggerInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
});

/** @internal */
export type FlagTriggerInput$Outbound = {
  comment?: string | undefined;
  instructions?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const FlagTriggerInput$outboundSchema: z.ZodType<
  FlagTriggerInput$Outbound,
  z.ZodTypeDef,
  FlagTriggerInput
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagTriggerInput$ {
  /** @deprecated use `FlagTriggerInput$inboundSchema` instead. */
  export const inboundSchema = FlagTriggerInput$inboundSchema;
  /** @deprecated use `FlagTriggerInput$outboundSchema` instead. */
  export const outboundSchema = FlagTriggerInput$outboundSchema;
  /** @deprecated use `FlagTriggerInput$Outbound` instead. */
  export type Outbound = FlagTriggerInput$Outbound;
}

export function flagTriggerInputToJSON(
  flagTriggerInput: FlagTriggerInput,
): string {
  return JSON.stringify(
    FlagTriggerInput$outboundSchema.parse(flagTriggerInput),
  );
}

export function flagTriggerInputFromJSON(
  jsonString: string,
): SafeParseResult<FlagTriggerInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagTriggerInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagTriggerInput' from JSON`,
  );
}
