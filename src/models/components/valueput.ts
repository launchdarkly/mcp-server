/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValuePut = {
  /**
   * The variation value to set for the context. Must match the flag's variation type.
   */
  setting?: any | undefined;
  /**
   * Optional comment describing the change
   */
  comment?: string | undefined;
};

/** @internal */
export const ValuePut$inboundSchema: z.ZodType<
  ValuePut,
  z.ZodTypeDef,
  unknown
> = z.object({
  setting: z.any().optional(),
  comment: z.string().optional(),
});

/** @internal */
export type ValuePut$Outbound = {
  setting?: any | undefined;
  comment?: string | undefined;
};

/** @internal */
export const ValuePut$outboundSchema: z.ZodType<
  ValuePut$Outbound,
  z.ZodTypeDef,
  ValuePut
> = z.object({
  setting: z.any().optional(),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValuePut$ {
  /** @deprecated use `ValuePut$inboundSchema` instead. */
  export const inboundSchema = ValuePut$inboundSchema;
  /** @deprecated use `ValuePut$outboundSchema` instead. */
  export const outboundSchema = ValuePut$outboundSchema;
  /** @deprecated use `ValuePut$Outbound` instead. */
  export type Outbound = ValuePut$Outbound;
}

export function valuePutToJSON(valuePut: ValuePut): string {
  return JSON.stringify(ValuePut$outboundSchema.parse(valuePut));
}

export function valuePutFromJSON(
  jsonString: string,
): SafeParseResult<ValuePut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValuePut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValuePut' from JSON`,
  );
}
