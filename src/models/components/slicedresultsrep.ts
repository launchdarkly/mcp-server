/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TreatmentResultRep,
  TreatmentResultRep$inboundSchema,
  TreatmentResultRep$Outbound,
  TreatmentResultRep$outboundSchema,
} from "./treatmentresultrep.js";

export type SlicedResultsRep = {
  /**
   * An attribute that results are sliced by
   */
  attribute?: string | undefined;
  /**
   * Attribute Value for 'attribute'
   */
  attributeValue?: string | undefined;
  /**
   * A list of the results for each treatment
   */
  treatmentResults?: Array<TreatmentResultRep> | undefined;
};

/** @internal */
export const SlicedResultsRep$inboundSchema: z.ZodType<
  SlicedResultsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute: z.string().optional(),
  attributeValue: z.string().optional(),
  treatmentResults: z.array(TreatmentResultRep$inboundSchema).optional(),
});

/** @internal */
export type SlicedResultsRep$Outbound = {
  attribute?: string | undefined;
  attributeValue?: string | undefined;
  treatmentResults?: Array<TreatmentResultRep$Outbound> | undefined;
};

/** @internal */
export const SlicedResultsRep$outboundSchema: z.ZodType<
  SlicedResultsRep$Outbound,
  z.ZodTypeDef,
  SlicedResultsRep
> = z.object({
  attribute: z.string().optional(),
  attributeValue: z.string().optional(),
  treatmentResults: z.array(TreatmentResultRep$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlicedResultsRep$ {
  /** @deprecated use `SlicedResultsRep$inboundSchema` instead. */
  export const inboundSchema = SlicedResultsRep$inboundSchema;
  /** @deprecated use `SlicedResultsRep$outboundSchema` instead. */
  export const outboundSchema = SlicedResultsRep$outboundSchema;
  /** @deprecated use `SlicedResultsRep$Outbound` instead. */
  export type Outbound = SlicedResultsRep$Outbound;
}

export function slicedResultsRepToJSON(
  slicedResultsRep: SlicedResultsRep,
): string {
  return JSON.stringify(
    SlicedResultsRep$outboundSchema.parse(slicedResultsRep),
  );
}

export function slicedResultsRepFromJSON(
  jsonString: string,
): SafeParseResult<SlicedResultsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SlicedResultsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SlicedResultsRep' from JSON`,
  );
}
