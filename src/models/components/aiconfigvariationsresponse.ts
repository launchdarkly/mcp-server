/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIConfigVariation,
  AIConfigVariation$inboundSchema,
  AIConfigVariation$Outbound,
  AIConfigVariation$outboundSchema,
} from "./aiconfigvariation.js";

export type AIConfigVariationsResponse = {
  items: Array<AIConfigVariation>;
  totalCount: number;
};

/** @internal */
export const AIConfigVariationsResponse$inboundSchema: z.ZodType<
  AIConfigVariationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(AIConfigVariation$inboundSchema),
  totalCount: z.number().int(),
});

/** @internal */
export type AIConfigVariationsResponse$Outbound = {
  items: Array<AIConfigVariation$Outbound>;
  totalCount: number;
};

/** @internal */
export const AIConfigVariationsResponse$outboundSchema: z.ZodType<
  AIConfigVariationsResponse$Outbound,
  z.ZodTypeDef,
  AIConfigVariationsResponse
> = z.object({
  items: z.array(AIConfigVariation$outboundSchema),
  totalCount: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigVariationsResponse$ {
  /** @deprecated use `AIConfigVariationsResponse$inboundSchema` instead. */
  export const inboundSchema = AIConfigVariationsResponse$inboundSchema;
  /** @deprecated use `AIConfigVariationsResponse$outboundSchema` instead. */
  export const outboundSchema = AIConfigVariationsResponse$outboundSchema;
  /** @deprecated use `AIConfigVariationsResponse$Outbound` instead. */
  export type Outbound = AIConfigVariationsResponse$Outbound;
}

export function aiConfigVariationsResponseToJSON(
  aiConfigVariationsResponse: AIConfigVariationsResponse,
): string {
  return JSON.stringify(
    AIConfigVariationsResponse$outboundSchema.parse(aiConfigVariationsResponse),
  );
}

export function aiConfigVariationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigVariationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigVariationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigVariationsResponse' from JSON`,
  );
}
