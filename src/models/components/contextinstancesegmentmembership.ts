/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ContextInstanceSegmentMembership = {
  /**
   * A human-friendly name for the segment
   */
  name: string;
  /**
   * A unique key used to reference the segment
   */
  key: string;
  /**
   * A description of the segment's purpose
   */
  description: string;
  /**
   * Whether this is an unbounded segment. Unbounded segments, also called big segments, may be list-based segments with more than 15,000 entries, or synced segments.
   */
  unbounded: boolean;
  /**
   * If the segment is a synced segment, the name of the external source
   */
  external: string;
  /**
   * Whether the context is a member of this segment, either by explicit inclusion or by rule matching
   */
  isMember: boolean;
  /**
   * Whether the context is explicitly included in this segment
   */
  isIndividuallyTargeted: boolean;
  /**
   * Whether the context is captured by this segment's rules. The value of this field is undefined if the context is also explicitly included (<code>isIndividuallyTargeted</code> is <code>true</code>).
   */
  isRuleTargeted: boolean;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ContextInstanceSegmentMembership$inboundSchema: z.ZodType<
  ContextInstanceSegmentMembership,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string(),
  unbounded: z.boolean(),
  external: z.string(),
  isMember: z.boolean(),
  isIndividuallyTargeted: z.boolean(),
  isRuleTargeted: z.boolean(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ContextInstanceSegmentMembership$Outbound = {
  name: string;
  key: string;
  description: string;
  unbounded: boolean;
  external: string;
  isMember: boolean;
  isIndividuallyTargeted: boolean;
  isRuleTargeted: boolean;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const ContextInstanceSegmentMembership$outboundSchema: z.ZodType<
  ContextInstanceSegmentMembership$Outbound,
  z.ZodTypeDef,
  ContextInstanceSegmentMembership
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string(),
  unbounded: z.boolean(),
  external: z.string(),
  isMember: z.boolean(),
  isIndividuallyTargeted: z.boolean(),
  isRuleTargeted: z.boolean(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextInstanceSegmentMembership$ {
  /** @deprecated use `ContextInstanceSegmentMembership$inboundSchema` instead. */
  export const inboundSchema = ContextInstanceSegmentMembership$inboundSchema;
  /** @deprecated use `ContextInstanceSegmentMembership$outboundSchema` instead. */
  export const outboundSchema = ContextInstanceSegmentMembership$outboundSchema;
  /** @deprecated use `ContextInstanceSegmentMembership$Outbound` instead. */
  export type Outbound = ContextInstanceSegmentMembership$Outbound;
}

export function contextInstanceSegmentMembershipToJSON(
  contextInstanceSegmentMembership: ContextInstanceSegmentMembership,
): string {
  return JSON.stringify(
    ContextInstanceSegmentMembership$outboundSchema.parse(
      contextInstanceSegmentMembership,
    ),
  );
}

export function contextInstanceSegmentMembershipFromJSON(
  jsonString: string,
): SafeParseResult<ContextInstanceSegmentMembership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextInstanceSegmentMembership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextInstanceSegmentMembership' from JSON`,
  );
}
