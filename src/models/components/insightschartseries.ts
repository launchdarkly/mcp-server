/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsChartSeriesDataPoint,
  InsightsChartSeriesDataPoint$inboundSchema,
  InsightsChartSeriesDataPoint$Outbound,
  InsightsChartSeriesDataPoint$outboundSchema,
} from "./insightschartseriesdatapoint.js";
import {
  InsightsChartSeriesMetadata,
  InsightsChartSeriesMetadata$inboundSchema,
  InsightsChartSeriesMetadata$Outbound,
  InsightsChartSeriesMetadata$outboundSchema,
} from "./insightschartseriesmetadata.js";

export type InsightsChartSeries = {
  metadata: InsightsChartSeriesMetadata;
  /**
   * Data points for the series
   */
  data: Array<InsightsChartSeriesDataPoint>;
};

/** @internal */
export const InsightsChartSeries$inboundSchema: z.ZodType<
  InsightsChartSeries,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: InsightsChartSeriesMetadata$inboundSchema,
  data: z.array(InsightsChartSeriesDataPoint$inboundSchema),
});

/** @internal */
export type InsightsChartSeries$Outbound = {
  metadata: InsightsChartSeriesMetadata$Outbound;
  data: Array<InsightsChartSeriesDataPoint$Outbound>;
};

/** @internal */
export const InsightsChartSeries$outboundSchema: z.ZodType<
  InsightsChartSeries$Outbound,
  z.ZodTypeDef,
  InsightsChartSeries
> = z.object({
  metadata: InsightsChartSeriesMetadata$outboundSchema,
  data: z.array(InsightsChartSeriesDataPoint$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsChartSeries$ {
  /** @deprecated use `InsightsChartSeries$inboundSchema` instead. */
  export const inboundSchema = InsightsChartSeries$inboundSchema;
  /** @deprecated use `InsightsChartSeries$outboundSchema` instead. */
  export const outboundSchema = InsightsChartSeries$outboundSchema;
  /** @deprecated use `InsightsChartSeries$Outbound` instead. */
  export type Outbound = InsightsChartSeries$Outbound;
}

export function insightsChartSeriesToJSON(
  insightsChartSeries: InsightsChartSeries,
): string {
  return JSON.stringify(
    InsightsChartSeries$outboundSchema.parse(insightsChartSeries),
  );
}

export function insightsChartSeriesFromJSON(
  jsonString: string,
): SafeParseResult<InsightsChartSeries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsChartSeries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsChartSeries' from JSON`,
  );
}
