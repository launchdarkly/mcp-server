/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of change to make to the removal date for this user from individual targeting for this flag.
 */
export const InstructionUserRequestKind = {
  AddExpireUserTargetDate: "addExpireUserTargetDate",
  UpdateExpireUserTargetDate: "updateExpireUserTargetDate",
  RemoveExpireUserTargetDate: "removeExpireUserTargetDate",
} as const;
/**
 * The type of change to make to the removal date for this user from individual targeting for this flag.
 */
export type InstructionUserRequestKind = ClosedEnum<
  typeof InstructionUserRequestKind
>;

export type InstructionUserRequest = {
  /**
   * The type of change to make to the removal date for this user from individual targeting for this flag.
   */
  kind: InstructionUserRequestKind;
  /**
   * The flag key
   */
  flagKey: string;
  /**
   * ID of a variation on the flag
   */
  variationId: string;
  /**
   * The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag. Required if <code>kind</code> is <code>addExpireUserTargetDate</code> or <code>updateExpireUserTargetDate</code>.
   */
  value?: number | undefined;
  /**
   * The version of the expiring user target to update. Optional and only used if <code>kind</code> is <code>updateExpireUserTargetDate</code>. If included, update will fail if version doesn't match current version of the expiring user target.
   */
  version?: number | undefined;
};

/** @internal */
export const InstructionUserRequestKind$inboundSchema: z.ZodNativeEnum<
  typeof InstructionUserRequestKind
> = z.nativeEnum(InstructionUserRequestKind);

/** @internal */
export const InstructionUserRequestKind$outboundSchema: z.ZodNativeEnum<
  typeof InstructionUserRequestKind
> = InstructionUserRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionUserRequestKind$ {
  /** @deprecated use `InstructionUserRequestKind$inboundSchema` instead. */
  export const inboundSchema = InstructionUserRequestKind$inboundSchema;
  /** @deprecated use `InstructionUserRequestKind$outboundSchema` instead. */
  export const outboundSchema = InstructionUserRequestKind$outboundSchema;
}

/** @internal */
export const InstructionUserRequest$inboundSchema: z.ZodType<
  InstructionUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: InstructionUserRequestKind$inboundSchema,
  flagKey: z.string(),
  variationId: z.string(),
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type InstructionUserRequest$Outbound = {
  kind: string;
  flagKey: string;
  variationId: string;
  value?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const InstructionUserRequest$outboundSchema: z.ZodType<
  InstructionUserRequest$Outbound,
  z.ZodTypeDef,
  InstructionUserRequest
> = z.object({
  kind: InstructionUserRequestKind$outboundSchema,
  flagKey: z.string(),
  variationId: z.string(),
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionUserRequest$ {
  /** @deprecated use `InstructionUserRequest$inboundSchema` instead. */
  export const inboundSchema = InstructionUserRequest$inboundSchema;
  /** @deprecated use `InstructionUserRequest$outboundSchema` instead. */
  export const outboundSchema = InstructionUserRequest$outboundSchema;
  /** @deprecated use `InstructionUserRequest$Outbound` instead. */
  export type Outbound = InstructionUserRequest$Outbound;
}

export function instructionUserRequestToJSON(
  instructionUserRequest: InstructionUserRequest,
): string {
  return JSON.stringify(
    InstructionUserRequest$outboundSchema.parse(instructionUserRequest),
  );
}

export function instructionUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<InstructionUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionUserRequest' from JSON`,
  );
}
