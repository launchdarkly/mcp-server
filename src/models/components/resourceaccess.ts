/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResourceAccess = {
  action?: string | undefined;
  resource?: string | undefined;
};

/** @internal */
export const ResourceAccess$inboundSchema: z.ZodType<
  ResourceAccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string().optional(),
  resource: z.string().optional(),
});

/** @internal */
export type ResourceAccess$Outbound = {
  action?: string | undefined;
  resource?: string | undefined;
};

/** @internal */
export const ResourceAccess$outboundSchema: z.ZodType<
  ResourceAccess$Outbound,
  z.ZodTypeDef,
  ResourceAccess
> = z.object({
  action: z.string().optional(),
  resource: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceAccess$ {
  /** @deprecated use `ResourceAccess$inboundSchema` instead. */
  export const inboundSchema = ResourceAccess$inboundSchema;
  /** @deprecated use `ResourceAccess$outboundSchema` instead. */
  export const outboundSchema = ResourceAccess$outboundSchema;
  /** @deprecated use `ResourceAccess$Outbound` instead. */
  export type Outbound = ResourceAccess$Outbound;
}

export function resourceAccessToJSON(resourceAccess: ResourceAccess): string {
  return JSON.stringify(ResourceAccess$outboundSchema.parse(resourceAccess));
}

export function resourceAccessFromJSON(
  jsonString: string,
): SafeParseResult<ResourceAccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceAccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceAccess' from JSON`,
  );
}
