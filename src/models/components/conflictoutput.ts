/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConflictOutput = {
  /**
   * The stage ID
   */
  stageId: string;
  /**
   * Message about the conflict
   */
  message: string;
};

/** @internal */
export const ConflictOutput$inboundSchema: z.ZodType<
  ConflictOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  stageId: z.string(),
  message: z.string(),
});

/** @internal */
export type ConflictOutput$Outbound = {
  stageId: string;
  message: string;
};

/** @internal */
export const ConflictOutput$outboundSchema: z.ZodType<
  ConflictOutput$Outbound,
  z.ZodTypeDef,
  ConflictOutput
> = z.object({
  stageId: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictOutput$ {
  /** @deprecated use `ConflictOutput$inboundSchema` instead. */
  export const inboundSchema = ConflictOutput$inboundSchema;
  /** @deprecated use `ConflictOutput$outboundSchema` instead. */
  export const outboundSchema = ConflictOutput$outboundSchema;
  /** @deprecated use `ConflictOutput$Outbound` instead. */
  export type Outbound = ConflictOutput$Outbound;
}

export function conflictOutputToJSON(conflictOutput: ConflictOutput): string {
  return JSON.stringify(ConflictOutput$outboundSchema.parse(conflictOutput));
}

export function conflictOutputFromJSON(
  jsonString: string,
): SafeParseResult<ConflictOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictOutput' from JSON`,
  );
}
