/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResourceId = {
  /**
   * The environment key
   */
  environmentKey?: string | undefined;
  /**
   * Deprecated, use <code>key</code> instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  flagKey?: string | undefined;
  /**
   * The key of the flag or segment
   */
  key?: string | undefined;
  kind?: string | undefined;
  /**
   * The project key
   */
  projectKey?: string | undefined;
};

/** @internal */
export const ResourceId$inboundSchema: z.ZodType<
  ResourceId,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentKey: z.string().optional(),
  flagKey: z.string().optional(),
  key: z.string().optional(),
  kind: z.string().optional(),
  projectKey: z.string().optional(),
});

/** @internal */
export type ResourceId$Outbound = {
  environmentKey?: string | undefined;
  flagKey?: string | undefined;
  key?: string | undefined;
  kind?: string | undefined;
  projectKey?: string | undefined;
};

/** @internal */
export const ResourceId$outboundSchema: z.ZodType<
  ResourceId$Outbound,
  z.ZodTypeDef,
  ResourceId
> = z.object({
  environmentKey: z.string().optional(),
  flagKey: z.string().optional(),
  key: z.string().optional(),
  kind: z.string().optional(),
  projectKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceId$ {
  /** @deprecated use `ResourceId$inboundSchema` instead. */
  export const inboundSchema = ResourceId$inboundSchema;
  /** @deprecated use `ResourceId$outboundSchema` instead. */
  export const outboundSchema = ResourceId$outboundSchema;
  /** @deprecated use `ResourceId$Outbound` instead. */
  export type Outbound = ResourceId$Outbound;
}

export function resourceIdToJSON(resourceId: ResourceId): string {
  return JSON.stringify(ResourceId$outboundSchema.parse(resourceId));
}

export function resourceIdFromJSON(
  jsonString: string,
): SafeParseResult<ResourceId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceId' from JSON`,
  );
}
