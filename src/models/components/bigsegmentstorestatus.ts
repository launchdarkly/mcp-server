/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StoreIntegrationError,
  StoreIntegrationError$inboundSchema,
  StoreIntegrationError$Outbound,
  StoreIntegrationError$outboundSchema,
} from "./storeintegrationerror.js";

export type BigSegmentStoreStatus = {
  /**
   * Whether the persistent store integration is fully synchronized with the LaunchDarkly environment, and the <code>lastSync</code> occurred within a few minutes
   */
  available?: boolean | undefined;
  /**
   * Whether the persistent store integration may not be fully synchronized with the LaunchDarkly environment. <code>true</code> if the integration could be stale.
   */
  potentiallyStale?: boolean | undefined;
  lastSync?: number | undefined;
  lastError?: number | undefined;
  errors?: Array<StoreIntegrationError> | undefined;
};

/** @internal */
export const BigSegmentStoreStatus$inboundSchema: z.ZodType<
  BigSegmentStoreStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.boolean().optional(),
  potentiallyStale: z.boolean().optional(),
  lastSync: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errors: z.array(StoreIntegrationError$inboundSchema).optional(),
});

/** @internal */
export type BigSegmentStoreStatus$Outbound = {
  available?: boolean | undefined;
  potentiallyStale?: boolean | undefined;
  lastSync?: number | undefined;
  lastError?: number | undefined;
  errors?: Array<StoreIntegrationError$Outbound> | undefined;
};

/** @internal */
export const BigSegmentStoreStatus$outboundSchema: z.ZodType<
  BigSegmentStoreStatus$Outbound,
  z.ZodTypeDef,
  BigSegmentStoreStatus
> = z.object({
  available: z.boolean().optional(),
  potentiallyStale: z.boolean().optional(),
  lastSync: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errors: z.array(StoreIntegrationError$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BigSegmentStoreStatus$ {
  /** @deprecated use `BigSegmentStoreStatus$inboundSchema` instead. */
  export const inboundSchema = BigSegmentStoreStatus$inboundSchema;
  /** @deprecated use `BigSegmentStoreStatus$outboundSchema` instead. */
  export const outboundSchema = BigSegmentStoreStatus$outboundSchema;
  /** @deprecated use `BigSegmentStoreStatus$Outbound` instead. */
  export type Outbound = BigSegmentStoreStatus$Outbound;
}

export function bigSegmentStoreStatusToJSON(
  bigSegmentStoreStatus: BigSegmentStoreStatus,
): string {
  return JSON.stringify(
    BigSegmentStoreStatus$outboundSchema.parse(bigSegmentStoreStatus),
  );
}

export function bigSegmentStoreStatusFromJSON(
  jsonString: string,
): SafeParseResult<BigSegmentStoreStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BigSegmentStoreStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BigSegmentStoreStatus' from JSON`,
  );
}
