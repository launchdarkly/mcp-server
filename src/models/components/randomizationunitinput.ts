/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * One of LaunchDarkly's fixed set of standard randomization units.
 */
export const StandardRandomizationUnit = {
  Guest: "guest",
  GuestTime: "guestTime",
  Organization: "organization",
  Request: "request",
  User: "user",
  UserTime: "userTime",
} as const;
/**
 * One of LaunchDarkly's fixed set of standard randomization units.
 */
export type StandardRandomizationUnit = ClosedEnum<
  typeof StandardRandomizationUnit
>;

export type RandomizationUnitInput = {
  /**
   * The unit of randomization. Must match the key of an existing context kind in this project.
   */
  randomizationUnit: string;
  /**
   * If true, any experiment iterations created within this project will default to using this randomization unit. A project can only have one default randomization unit.
   */
  default?: boolean | undefined;
  /**
   * One of LaunchDarkly's fixed set of standard randomization units.
   */
  standardRandomizationUnit: StandardRandomizationUnit;
};

/** @internal */
export const StandardRandomizationUnit$inboundSchema: z.ZodNativeEnum<
  typeof StandardRandomizationUnit
> = z.nativeEnum(StandardRandomizationUnit);

/** @internal */
export const StandardRandomizationUnit$outboundSchema: z.ZodNativeEnum<
  typeof StandardRandomizationUnit
> = StandardRandomizationUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StandardRandomizationUnit$ {
  /** @deprecated use `StandardRandomizationUnit$inboundSchema` instead. */
  export const inboundSchema = StandardRandomizationUnit$inboundSchema;
  /** @deprecated use `StandardRandomizationUnit$outboundSchema` instead. */
  export const outboundSchema = StandardRandomizationUnit$outboundSchema;
}

/** @internal */
export const RandomizationUnitInput$inboundSchema: z.ZodType<
  RandomizationUnitInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  randomizationUnit: z.string(),
  default: z.boolean().optional(),
  standardRandomizationUnit: StandardRandomizationUnit$inboundSchema,
});

/** @internal */
export type RandomizationUnitInput$Outbound = {
  randomizationUnit: string;
  default?: boolean | undefined;
  standardRandomizationUnit: string;
};

/** @internal */
export const RandomizationUnitInput$outboundSchema: z.ZodType<
  RandomizationUnitInput$Outbound,
  z.ZodTypeDef,
  RandomizationUnitInput
> = z.object({
  randomizationUnit: z.string(),
  default: z.boolean().optional(),
  standardRandomizationUnit: StandardRandomizationUnit$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RandomizationUnitInput$ {
  /** @deprecated use `RandomizationUnitInput$inboundSchema` instead. */
  export const inboundSchema = RandomizationUnitInput$inboundSchema;
  /** @deprecated use `RandomizationUnitInput$outboundSchema` instead. */
  export const outboundSchema = RandomizationUnitInput$outboundSchema;
  /** @deprecated use `RandomizationUnitInput$Outbound` instead. */
  export type Outbound = RandomizationUnitInput$Outbound;
}

export function randomizationUnitInputToJSON(
  randomizationUnitInput: RandomizationUnitInput,
): string {
  return JSON.stringify(
    RandomizationUnitInput$outboundSchema.parse(randomizationUnitInput),
  );
}

export function randomizationUnitInputFromJSON(
  jsonString: string,
): SafeParseResult<RandomizationUnitInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RandomizationUnitInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RandomizationUnitInput' from JSON`,
  );
}
