/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsRepository,
  InsightsRepository$inboundSchema,
  InsightsRepository$Outbound,
  InsightsRepository$outboundSchema,
} from "./insightsrepository.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type InsightsRepositoryCollection = {
  /**
   * Total number of repositories
   */
  totalCount: number;
  /**
   * List of repositories
   */
  items: Array<InsightsRepository>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const InsightsRepositoryCollection$inboundSchema: z.ZodType<
  InsightsRepositoryCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightsRepository$inboundSchema),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InsightsRepositoryCollection$Outbound = {
  totalCount: number;
  items: Array<InsightsRepository$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const InsightsRepositoryCollection$outboundSchema: z.ZodType<
  InsightsRepositoryCollection$Outbound,
  z.ZodTypeDef,
  InsightsRepositoryCollection
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightsRepository$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRepositoryCollection$ {
  /** @deprecated use `InsightsRepositoryCollection$inboundSchema` instead. */
  export const inboundSchema = InsightsRepositoryCollection$inboundSchema;
  /** @deprecated use `InsightsRepositoryCollection$outboundSchema` instead. */
  export const outboundSchema = InsightsRepositoryCollection$outboundSchema;
  /** @deprecated use `InsightsRepositoryCollection$Outbound` instead. */
  export type Outbound = InsightsRepositoryCollection$Outbound;
}

export function insightsRepositoryCollectionToJSON(
  insightsRepositoryCollection: InsightsRepositoryCollection,
): string {
  return JSON.stringify(
    InsightsRepositoryCollection$outboundSchema.parse(
      insightsRepositoryCollection,
    ),
  );
}

export function insightsRepositoryCollectionFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRepositoryCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsRepositoryCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRepositoryCollection' from JSON`,
  );
}
