/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SourceEnv = {
  /**
   * The key of the source environment to clone from
   */
  key?: string | undefined;
  /**
   * (Optional) The version number of the source environment to clone from. Used for optimistic locking
   */
  version?: number | undefined;
};

/** @internal */
export const SourceEnv$inboundSchema: z.ZodType<
  SourceEnv,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type SourceEnv$Outbound = {
  key?: string | undefined;
  version?: number | undefined;
};

/** @internal */
export const SourceEnv$outboundSchema: z.ZodType<
  SourceEnv$Outbound,
  z.ZodTypeDef,
  SourceEnv
> = z.object({
  key: z.string().optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceEnv$ {
  /** @deprecated use `SourceEnv$inboundSchema` instead. */
  export const inboundSchema = SourceEnv$inboundSchema;
  /** @deprecated use `SourceEnv$outboundSchema` instead. */
  export const outboundSchema = SourceEnv$outboundSchema;
  /** @deprecated use `SourceEnv$Outbound` instead. */
  export type Outbound = SourceEnv$Outbound;
}

export function sourceEnvToJSON(sourceEnv: SourceEnv): string {
  return JSON.stringify(SourceEnv$outboundSchema.parse(sourceEnv));
}

export function sourceEnvFromJSON(
  jsonString: string,
): SafeParseResult<SourceEnv, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceEnv$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceEnv' from JSON`,
  );
}
