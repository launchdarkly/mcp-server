/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OptionsArray,
  OptionsArray$inboundSchema,
  OptionsArray$Outbound,
  OptionsArray$outboundSchema,
} from "./optionsarray.js";

export type DynamicOptionsParser = {
  optionsItems?: OptionsArray | undefined;
  optionsPath?: string | undefined;
};

/** @internal */
export const DynamicOptionsParser$inboundSchema: z.ZodType<
  DynamicOptionsParser,
  z.ZodTypeDef,
  unknown
> = z.object({
  optionsItems: OptionsArray$inboundSchema.optional(),
  optionsPath: z.string().optional(),
});

/** @internal */
export type DynamicOptionsParser$Outbound = {
  optionsItems?: OptionsArray$Outbound | undefined;
  optionsPath?: string | undefined;
};

/** @internal */
export const DynamicOptionsParser$outboundSchema: z.ZodType<
  DynamicOptionsParser$Outbound,
  z.ZodTypeDef,
  DynamicOptionsParser
> = z.object({
  optionsItems: OptionsArray$outboundSchema.optional(),
  optionsPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DynamicOptionsParser$ {
  /** @deprecated use `DynamicOptionsParser$inboundSchema` instead. */
  export const inboundSchema = DynamicOptionsParser$inboundSchema;
  /** @deprecated use `DynamicOptionsParser$outboundSchema` instead. */
  export const outboundSchema = DynamicOptionsParser$outboundSchema;
  /** @deprecated use `DynamicOptionsParser$Outbound` instead. */
  export type Outbound = DynamicOptionsParser$Outbound;
}

export function dynamicOptionsParserToJSON(
  dynamicOptionsParser: DynamicOptionsParser,
): string {
  return JSON.stringify(
    DynamicOptionsParser$outboundSchema.parse(dynamicOptionsParser),
  );
}

export function dynamicOptionsParserFromJSON(
  jsonString: string,
): SafeParseResult<DynamicOptionsParser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DynamicOptionsParser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DynamicOptionsParser' from JSON`,
  );
}
