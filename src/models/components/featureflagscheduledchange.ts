/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FeatureFlagScheduledChange = {
  id: string;
  creationDate: number;
  /**
   * The ID of the scheduled change maintainer
   */
  maintainerId: string;
  /**
   * Version of the scheduled change
   */
  version: number;
  executionDate: number;
  instructions: Array<{ [k: string]: any }>;
  /**
   * Details on any conflicting scheduled changes
   */
  conflicts?: any | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const FeatureFlagScheduledChange$inboundSchema: z.ZodType<
  FeatureFlagScheduledChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _creationDate: z.number().int(),
  _maintainerId: z.string(),
  _version: z.number().int(),
  executionDate: z.number().int(),
  instructions: z.array(z.record(z.any())),
  conflicts: z.any().optional(),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_creationDate": "creationDate",
    "_maintainerId": "maintainerId",
    "_version": "version",
    "_links": "links",
  });
});

/** @internal */
export type FeatureFlagScheduledChange$Outbound = {
  _id: string;
  _creationDate: number;
  _maintainerId: string;
  _version: number;
  executionDate: number;
  instructions: Array<{ [k: string]: any }>;
  conflicts?: any | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const FeatureFlagScheduledChange$outboundSchema: z.ZodType<
  FeatureFlagScheduledChange$Outbound,
  z.ZodTypeDef,
  FeatureFlagScheduledChange
> = z.object({
  id: z.string(),
  creationDate: z.number().int(),
  maintainerId: z.string(),
  version: z.number().int(),
  executionDate: z.number().int(),
  instructions: z.array(z.record(z.any())),
  conflicts: z.any().optional(),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    creationDate: "_creationDate",
    maintainerId: "_maintainerId",
    version: "_version",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureFlagScheduledChange$ {
  /** @deprecated use `FeatureFlagScheduledChange$inboundSchema` instead. */
  export const inboundSchema = FeatureFlagScheduledChange$inboundSchema;
  /** @deprecated use `FeatureFlagScheduledChange$outboundSchema` instead. */
  export const outboundSchema = FeatureFlagScheduledChange$outboundSchema;
  /** @deprecated use `FeatureFlagScheduledChange$Outbound` instead. */
  export type Outbound = FeatureFlagScheduledChange$Outbound;
}

export function featureFlagScheduledChangeToJSON(
  featureFlagScheduledChange: FeatureFlagScheduledChange,
): string {
  return JSON.stringify(
    FeatureFlagScheduledChange$outboundSchema.parse(featureFlagScheduledChange),
  );
}

export function featureFlagScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<FeatureFlagScheduledChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeatureFlagScheduledChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureFlagScheduledChange' from JSON`,
  );
}
