/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MetricInput,
  MetricInput$inboundSchema,
  MetricInput$Outbound,
  MetricInput$outboundSchema,
} from "./metricinput.js";

export type HoldoutPostRequest = {
  /**
   * A human-friendly name for the holdout
   */
  name?: string | undefined;
  /**
   * A key that identifies the holdout
   */
  key?: string | undefined;
  /**
   * Description of the holdout
   */
  description?: string | undefined;
  /**
   * The chosen randomization unit for the holdout base experiment
   */
  randomizationunit?: string | undefined;
  /**
   * The attributes that the holdout iteration's results can be sliced by
   */
  attributes?: Array<string> | undefined;
  /**
   * Audience allocation for the holdout
   */
  holdoutamount?: string | undefined;
  /**
   * The key of the primary metric for this holdout
   */
  primarymetrickey?: string | undefined;
  /**
   * Details on the metrics for this experiment
   */
  metrics?: Array<MetricInput> | undefined;
  /**
   * The key of the flag that the holdout is dependent on
   */
  prerequisiteflagkey?: string | undefined;
  /**
   * Maintainer id
   */
  maintainerId?: string | undefined;
};

/** @internal */
export const HoldoutPostRequest$inboundSchema: z.ZodType<
  HoldoutPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  key: z.string().optional(),
  description: z.string().optional(),
  randomizationunit: z.string().optional(),
  attributes: z.array(z.string()).optional(),
  holdoutamount: z.string().optional(),
  primarymetrickey: z.string().optional(),
  metrics: z.array(MetricInput$inboundSchema).optional(),
  prerequisiteflagkey: z.string().optional(),
  maintainerId: z.string().optional(),
});

/** @internal */
export type HoldoutPostRequest$Outbound = {
  name?: string | undefined;
  key?: string | undefined;
  description?: string | undefined;
  randomizationunit?: string | undefined;
  attributes?: Array<string> | undefined;
  holdoutamount?: string | undefined;
  primarymetrickey?: string | undefined;
  metrics?: Array<MetricInput$Outbound> | undefined;
  prerequisiteflagkey?: string | undefined;
  maintainerId?: string | undefined;
};

/** @internal */
export const HoldoutPostRequest$outboundSchema: z.ZodType<
  HoldoutPostRequest$Outbound,
  z.ZodTypeDef,
  HoldoutPostRequest
> = z.object({
  name: z.string().optional(),
  key: z.string().optional(),
  description: z.string().optional(),
  randomizationunit: z.string().optional(),
  attributes: z.array(z.string()).optional(),
  holdoutamount: z.string().optional(),
  primarymetrickey: z.string().optional(),
  metrics: z.array(MetricInput$outboundSchema).optional(),
  prerequisiteflagkey: z.string().optional(),
  maintainerId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutPostRequest$ {
  /** @deprecated use `HoldoutPostRequest$inboundSchema` instead. */
  export const inboundSchema = HoldoutPostRequest$inboundSchema;
  /** @deprecated use `HoldoutPostRequest$outboundSchema` instead. */
  export const outboundSchema = HoldoutPostRequest$outboundSchema;
  /** @deprecated use `HoldoutPostRequest$Outbound` instead. */
  export type Outbound = HoldoutPostRequest$Outbound;
}

export function holdoutPostRequestToJSON(
  holdoutPostRequest: HoldoutPostRequest,
): string {
  return JSON.stringify(
    HoldoutPostRequest$outboundSchema.parse(holdoutPostRequest),
  );
}

export function holdoutPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<HoldoutPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HoldoutPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HoldoutPostRequest' from JSON`,
  );
}
