/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of distribution.
 */
export const DistributionKind = {
  Normal: "normal",
  Beta: "beta",
} as const;
/**
 * The type of distribution.
 */
export type DistributionKind = ClosedEnum<typeof DistributionKind>;

export type Distribution = {
  /**
   * The type of distribution.
   */
  kind?: DistributionKind | undefined;
  /**
   * The parameters of the distribution. The parameters are different for each distribution type. When <code>kind</code> is <code>normal</code>, the parameters of the distribution are 'mu' and 'sigma'. When <code>kind</code> is <code>beta</code>, the parameters of the distribution are 'alpha' and 'beta.'
   */
  parameters?: { [k: string]: number } | undefined;
};

/** @internal */
export const DistributionKind$inboundSchema: z.ZodNativeEnum<
  typeof DistributionKind
> = z.nativeEnum(DistributionKind);

/** @internal */
export const DistributionKind$outboundSchema: z.ZodNativeEnum<
  typeof DistributionKind
> = DistributionKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DistributionKind$ {
  /** @deprecated use `DistributionKind$inboundSchema` instead. */
  export const inboundSchema = DistributionKind$inboundSchema;
  /** @deprecated use `DistributionKind$outboundSchema` instead. */
  export const outboundSchema = DistributionKind$outboundSchema;
}

/** @internal */
export const Distribution$inboundSchema: z.ZodType<
  Distribution,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: DistributionKind$inboundSchema.optional(),
  parameters: z.record(z.number()).optional(),
});

/** @internal */
export type Distribution$Outbound = {
  kind?: string | undefined;
  parameters?: { [k: string]: number } | undefined;
};

/** @internal */
export const Distribution$outboundSchema: z.ZodType<
  Distribution$Outbound,
  z.ZodTypeDef,
  Distribution
> = z.object({
  kind: DistributionKind$outboundSchema.optional(),
  parameters: z.record(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Distribution$ {
  /** @deprecated use `Distribution$inboundSchema` instead. */
  export const inboundSchema = Distribution$inboundSchema;
  /** @deprecated use `Distribution$outboundSchema` instead. */
  export const outboundSchema = Distribution$outboundSchema;
  /** @deprecated use `Distribution$Outbound` instead. */
  export type Outbound = Distribution$Outbound;
}

export function distributionToJSON(distribution: Distribution): string {
  return JSON.stringify(Distribution$outboundSchema.parse(distribution));
}

export function distributionFromJSON(
  jsonString: string,
): SafeParseResult<Distribution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Distribution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Distribution' from JSON`,
  );
}
