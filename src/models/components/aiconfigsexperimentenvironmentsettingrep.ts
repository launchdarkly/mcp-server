/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AiConfigsExperimentEnabledPeriodRep,
  AiConfigsExperimentEnabledPeriodRep$inboundSchema,
  AiConfigsExperimentEnabledPeriodRep$Outbound,
  AiConfigsExperimentEnabledPeriodRep$outboundSchema,
} from "./aiconfigsexperimentenabledperiodrep.js";

export type AiConfigsExperimentEnvironmentSettingRep = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
  enabledPeriods?: Array<AiConfigsExperimentEnabledPeriodRep> | undefined;
};

/** @internal */
export const AiConfigsExperimentEnvironmentSettingRep$inboundSchema: z.ZodType<
  AiConfigsExperimentEnvironmentSettingRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
  enabledPeriods: z.array(AiConfigsExperimentEnabledPeriodRep$inboundSchema)
    .optional(),
});

/** @internal */
export type AiConfigsExperimentEnvironmentSettingRep$Outbound = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
  enabledPeriods?:
    | Array<AiConfigsExperimentEnabledPeriodRep$Outbound>
    | undefined;
};

/** @internal */
export const AiConfigsExperimentEnvironmentSettingRep$outboundSchema: z.ZodType<
  AiConfigsExperimentEnvironmentSettingRep$Outbound,
  z.ZodTypeDef,
  AiConfigsExperimentEnvironmentSettingRep
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
  enabledPeriods: z.array(AiConfigsExperimentEnabledPeriodRep$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiConfigsExperimentEnvironmentSettingRep$ {
  /** @deprecated use `AiConfigsExperimentEnvironmentSettingRep$inboundSchema` instead. */
  export const inboundSchema =
    AiConfigsExperimentEnvironmentSettingRep$inboundSchema;
  /** @deprecated use `AiConfigsExperimentEnvironmentSettingRep$outboundSchema` instead. */
  export const outboundSchema =
    AiConfigsExperimentEnvironmentSettingRep$outboundSchema;
  /** @deprecated use `AiConfigsExperimentEnvironmentSettingRep$Outbound` instead. */
  export type Outbound = AiConfigsExperimentEnvironmentSettingRep$Outbound;
}

export function aiConfigsExperimentEnvironmentSettingRepToJSON(
  aiConfigsExperimentEnvironmentSettingRep:
    AiConfigsExperimentEnvironmentSettingRep,
): string {
  return JSON.stringify(
    AiConfigsExperimentEnvironmentSettingRep$outboundSchema.parse(
      aiConfigsExperimentEnvironmentSettingRep,
    ),
  );
}

export function aiConfigsExperimentEnvironmentSettingRepFromJSON(
  jsonString: string,
): SafeParseResult<
  AiConfigsExperimentEnvironmentSettingRep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AiConfigsExperimentEnvironmentSettingRep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AiConfigsExperimentEnvironmentSettingRep' from JSON`,
  );
}
