/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StatementPost,
  StatementPost$inboundSchema,
  StatementPost$Outbound,
  StatementPost$outboundSchema,
} from "./statementpost.js";

/**
 * Built-in role for the token
 */
export const AccessTokenPostRole = {
  Reader: "reader",
  Writer: "writer",
  Admin: "admin",
} as const;
/**
 * Built-in role for the token
 */
export type AccessTokenPostRole = ClosedEnum<typeof AccessTokenPostRole>;

export type AccessTokenPost = {
  /**
   * A human-friendly name for the access token
   */
  name?: string | undefined;
  /**
   * A description for the access token
   */
  description?: string | undefined;
  /**
   * Built-in role for the token
   */
  role?: AccessTokenPostRole | undefined;
  /**
   * A list of custom role IDs to use as access limits for the access token
   */
  customRoleIds?: Array<string> | undefined;
  /**
   * A JSON array of statements represented as JSON objects with three attributes: effect, resources, actions. May be used in place of a built-in or custom role.
   */
  inlineRole?: Array<StatementPost> | undefined;
  /**
   * Whether the token is a service token
   */
  serviceToken?: boolean | undefined;
  /**
   * The default API version for this token
   */
  defaultApiVersion?: number | undefined;
};

/** @internal */
export const AccessTokenPostRole$inboundSchema: z.ZodNativeEnum<
  typeof AccessTokenPostRole
> = z.nativeEnum(AccessTokenPostRole);

/** @internal */
export const AccessTokenPostRole$outboundSchema: z.ZodNativeEnum<
  typeof AccessTokenPostRole
> = AccessTokenPostRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenPostRole$ {
  /** @deprecated use `AccessTokenPostRole$inboundSchema` instead. */
  export const inboundSchema = AccessTokenPostRole$inboundSchema;
  /** @deprecated use `AccessTokenPostRole$outboundSchema` instead. */
  export const outboundSchema = AccessTokenPostRole$outboundSchema;
}

/** @internal */
export const AccessTokenPost$inboundSchema: z.ZodType<
  AccessTokenPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  role: AccessTokenPostRole$inboundSchema.optional(),
  customRoleIds: z.array(z.string()).optional(),
  inlineRole: z.array(StatementPost$inboundSchema).optional(),
  serviceToken: z.boolean().optional(),
  defaultApiVersion: z.number().int().optional(),
});

/** @internal */
export type AccessTokenPost$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  role?: string | undefined;
  customRoleIds?: Array<string> | undefined;
  inlineRole?: Array<StatementPost$Outbound> | undefined;
  serviceToken?: boolean | undefined;
  defaultApiVersion?: number | undefined;
};

/** @internal */
export const AccessTokenPost$outboundSchema: z.ZodType<
  AccessTokenPost$Outbound,
  z.ZodTypeDef,
  AccessTokenPost
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  role: AccessTokenPostRole$outboundSchema.optional(),
  customRoleIds: z.array(z.string()).optional(),
  inlineRole: z.array(StatementPost$outboundSchema).optional(),
  serviceToken: z.boolean().optional(),
  defaultApiVersion: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenPost$ {
  /** @deprecated use `AccessTokenPost$inboundSchema` instead. */
  export const inboundSchema = AccessTokenPost$inboundSchema;
  /** @deprecated use `AccessTokenPost$outboundSchema` instead. */
  export const outboundSchema = AccessTokenPost$outboundSchema;
  /** @deprecated use `AccessTokenPost$Outbound` instead. */
  export type Outbound = AccessTokenPost$Outbound;
}

export function accessTokenPostToJSON(
  accessTokenPost: AccessTokenPost,
): string {
  return JSON.stringify(AccessTokenPost$outboundSchema.parse(accessTokenPost));
}

export function accessTokenPostFromJSON(
  jsonString: string,
): SafeParseResult<AccessTokenPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessTokenPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessTokenPost' from JSON`,
  );
}
