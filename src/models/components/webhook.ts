/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Statement,
  Statement$inboundSchema,
  Statement$Outbound,
  Statement$outboundSchema,
} from "./statement.js";

export type Webhook = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The ID of this webhook
   */
  id: string;
  /**
   * A human-readable name for this webhook
   */
  name?: string | undefined;
  /**
   * The URL to which LaunchDarkly sends an HTTP POST payload for this webhook
   */
  url: string;
  /**
   * The secret for this webhook
   */
  secret?: string | undefined;
  /**
   * Represents a Custom role policy, defining a resource kinds filter the webhook responds to.
   */
  statements?: Array<Statement> | undefined;
  /**
   * Whether or not this webhook is enabled
   */
  on: boolean;
  /**
   * List of tags for this webhook
   */
  tags: Array<string>;
  access?: Access | undefined;
};

/** @internal */
export const Webhook$inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> =
  z.object({
    _links: z.record(Link$inboundSchema),
    _id: z.string(),
    name: z.string().optional(),
    url: z.string(),
    secret: z.string().optional(),
    statements: z.array(Statement$inboundSchema).optional(),
    on: z.boolean(),
    tags: z.array(z.string()),
    _access: Access$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_id": "id",
      "_access": "access",
    });
  });

/** @internal */
export type Webhook$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _id: string;
  name?: string | undefined;
  url: string;
  secret?: string | undefined;
  statements?: Array<Statement$Outbound> | undefined;
  on: boolean;
  tags: Array<string>;
  _access?: Access$Outbound | undefined;
};

/** @internal */
export const Webhook$outboundSchema: z.ZodType<
  Webhook$Outbound,
  z.ZodTypeDef,
  Webhook
> = z.object({
  links: z.record(Link$outboundSchema),
  id: z.string(),
  name: z.string().optional(),
  url: z.string(),
  secret: z.string().optional(),
  statements: z.array(Statement$outboundSchema).optional(),
  on: z.boolean(),
  tags: z.array(z.string()),
  access: Access$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook$ {
  /** @deprecated use `Webhook$inboundSchema` instead. */
  export const inboundSchema = Webhook$inboundSchema;
  /** @deprecated use `Webhook$outboundSchema` instead. */
  export const outboundSchema = Webhook$outboundSchema;
  /** @deprecated use `Webhook$Outbound` instead. */
  export type Outbound = Webhook$Outbound;
}

export function webhookToJSON(webhook: Webhook): string {
  return JSON.stringify(Webhook$outboundSchema.parse(webhook));
}

export function webhookFromJSON(
  jsonString: string,
): SafeParseResult<Webhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Webhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Webhook' from JSON`,
  );
}
