/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The casing convention to enforce for new flag keys in this project
 */
export const Case = {
  None: "none",
  CamelCase: "camelCase",
  UpperCamelCase: "upperCamelCase",
  SnakeCase: "snakeCase",
  KebabCase: "kebabCase",
} as const;
/**
 * The casing convention to enforce for new flag keys in this project
 */
export type Case = ClosedEnum<typeof Case>;

export type NamingConvention = {
  /**
   * The casing convention to enforce for new flag keys in this project
   */
  case?: Case | undefined;
  /**
   * The prefix to enforce for new flag keys in this project
   */
  prefix?: string | undefined;
};

/** @internal */
export const Case$inboundSchema: z.ZodNativeEnum<typeof Case> = z.nativeEnum(
  Case,
);

/** @internal */
export const Case$outboundSchema: z.ZodNativeEnum<typeof Case> =
  Case$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Case$ {
  /** @deprecated use `Case$inboundSchema` instead. */
  export const inboundSchema = Case$inboundSchema;
  /** @deprecated use `Case$outboundSchema` instead. */
  export const outboundSchema = Case$outboundSchema;
}

/** @internal */
export const NamingConvention$inboundSchema: z.ZodType<
  NamingConvention,
  z.ZodTypeDef,
  unknown
> = z.object({
  case: Case$inboundSchema.optional(),
  prefix: z.string().optional(),
});

/** @internal */
export type NamingConvention$Outbound = {
  case?: string | undefined;
  prefix?: string | undefined;
};

/** @internal */
export const NamingConvention$outboundSchema: z.ZodType<
  NamingConvention$Outbound,
  z.ZodTypeDef,
  NamingConvention
> = z.object({
  case: Case$outboundSchema.optional(),
  prefix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NamingConvention$ {
  /** @deprecated use `NamingConvention$inboundSchema` instead. */
  export const inboundSchema = NamingConvention$inboundSchema;
  /** @deprecated use `NamingConvention$outboundSchema` instead. */
  export const outboundSchema = NamingConvention$outboundSchema;
  /** @deprecated use `NamingConvention$Outbound` instead. */
  export type Outbound = NamingConvention$Outbound;
}

export function namingConventionToJSON(
  namingConvention: NamingConvention,
): string {
  return JSON.stringify(
    NamingConvention$outboundSchema.parse(namingConvention),
  );
}

export function namingConventionFromJSON(
  jsonString: string,
): SafeParseResult<NamingConvention, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NamingConvention$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NamingConvention' from JSON`,
  );
}
