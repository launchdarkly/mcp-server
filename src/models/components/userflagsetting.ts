/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvaluationReason,
  EvaluationReason$inboundSchema,
  EvaluationReason$Outbound,
  EvaluationReason$outboundSchema,
} from "./evaluationreason.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type UserFlagSetting = {
  /**
   * The location and content type of related resources.
   */
  links: { [k: string]: Link };
  /**
   * The value of the flag variation that the user receives. If there is no defined default rule, this is null.
   */
  value?: any | undefined;
  /**
   * Whether the user is explicitly targeted to receive a particular variation. The setting is false if you have turned off a feature flag for a user. It is null if you haven't assigned that user to a specific variation.
   */
  setting?: any | undefined;
  reason?: EvaluationReason | undefined;
};

/** @internal */
export const UserFlagSetting$inboundSchema: z.ZodType<
  UserFlagSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  _value: z.any().optional(),
  setting: z.any().optional(),
  reason: EvaluationReason$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_value": "value",
  });
});

/** @internal */
export type UserFlagSetting$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _value?: any | undefined;
  setting?: any | undefined;
  reason?: EvaluationReason$Outbound | undefined;
};

/** @internal */
export const UserFlagSetting$outboundSchema: z.ZodType<
  UserFlagSetting$Outbound,
  z.ZodTypeDef,
  UserFlagSetting
> = z.object({
  links: z.record(Link$outboundSchema),
  value: z.any().optional(),
  setting: z.any().optional(),
  reason: EvaluationReason$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    value: "_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserFlagSetting$ {
  /** @deprecated use `UserFlagSetting$inboundSchema` instead. */
  export const inboundSchema = UserFlagSetting$inboundSchema;
  /** @deprecated use `UserFlagSetting$outboundSchema` instead. */
  export const outboundSchema = UserFlagSetting$outboundSchema;
  /** @deprecated use `UserFlagSetting$Outbound` instead. */
  export type Outbound = UserFlagSetting$Outbound;
}

export function userFlagSettingToJSON(
  userFlagSetting: UserFlagSetting,
): string {
  return JSON.stringify(UserFlagSetting$outboundSchema.parse(userFlagSetting));
}

export function userFlagSettingFromJSON(
  jsonString: string,
): SafeParseResult<UserFlagSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserFlagSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserFlagSetting' from JSON`,
  );
}
