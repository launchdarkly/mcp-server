/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  RandomizationUnitRep,
  RandomizationUnitRep$inboundSchema,
  RandomizationUnitRep$Outbound,
  RandomizationUnitRep$outboundSchema,
} from "./randomizationunitrep.js";

export type RandomizationSettingsRep = {
  /**
   * The project ID
   */
  projectId?: string | undefined;
  /**
   * The project key
   */
  projectKey?: string | undefined;
  /**
   * An array of the randomization units in this project
   */
  randomizationUnits?: Array<RandomizationUnitRep> | undefined;
  creationDate?: number | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const RandomizationSettingsRep$inboundSchema: z.ZodType<
  RandomizationSettingsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _projectId: z.string().optional(),
  _projectKey: z.string().optional(),
  randomizationUnits: z.array(RandomizationUnitRep$inboundSchema).optional(),
  _creationDate: z.number().int().optional(),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_projectId": "projectId",
    "_projectKey": "projectKey",
    "_creationDate": "creationDate",
    "_links": "links",
  });
});

/** @internal */
export type RandomizationSettingsRep$Outbound = {
  _projectId?: string | undefined;
  _projectKey?: string | undefined;
  randomizationUnits?: Array<RandomizationUnitRep$Outbound> | undefined;
  _creationDate?: number | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const RandomizationSettingsRep$outboundSchema: z.ZodType<
  RandomizationSettingsRep$Outbound,
  z.ZodTypeDef,
  RandomizationSettingsRep
> = z.object({
  projectId: z.string().optional(),
  projectKey: z.string().optional(),
  randomizationUnits: z.array(RandomizationUnitRep$outboundSchema).optional(),
  creationDate: z.number().int().optional(),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "_projectId",
    projectKey: "_projectKey",
    creationDate: "_creationDate",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RandomizationSettingsRep$ {
  /** @deprecated use `RandomizationSettingsRep$inboundSchema` instead. */
  export const inboundSchema = RandomizationSettingsRep$inboundSchema;
  /** @deprecated use `RandomizationSettingsRep$outboundSchema` instead. */
  export const outboundSchema = RandomizationSettingsRep$outboundSchema;
  /** @deprecated use `RandomizationSettingsRep$Outbound` instead. */
  export type Outbound = RandomizationSettingsRep$Outbound;
}

export function randomizationSettingsRepToJSON(
  randomizationSettingsRep: RandomizationSettingsRep,
): string {
  return JSON.stringify(
    RandomizationSettingsRep$outboundSchema.parse(randomizationSettingsRep),
  );
}

export function randomizationSettingsRepFromJSON(
  jsonString: string,
): SafeParseResult<RandomizationSettingsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RandomizationSettingsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RandomizationSettingsRep' from JSON`,
  );
}
