/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextAttributeValue = {
  /**
   * A value for a context attribute.
   */
  name?: any | undefined;
  /**
   * A relative estimate of the number of contexts seen recently that have a matching value for a given attribute.
   */
  weight: number;
};

/** @internal */
export const ContextAttributeValue$inboundSchema: z.ZodType<
  ContextAttributeValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.any().optional(),
  weight: z.number().int(),
});

/** @internal */
export type ContextAttributeValue$Outbound = {
  name?: any | undefined;
  weight: number;
};

/** @internal */
export const ContextAttributeValue$outboundSchema: z.ZodType<
  ContextAttributeValue$Outbound,
  z.ZodTypeDef,
  ContextAttributeValue
> = z.object({
  name: z.any().optional(),
  weight: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextAttributeValue$ {
  /** @deprecated use `ContextAttributeValue$inboundSchema` instead. */
  export const inboundSchema = ContextAttributeValue$inboundSchema;
  /** @deprecated use `ContextAttributeValue$outboundSchema` instead. */
  export const outboundSchema = ContextAttributeValue$outboundSchema;
  /** @deprecated use `ContextAttributeValue$Outbound` instead. */
  export type Outbound = ContextAttributeValue$Outbound;
}

export function contextAttributeValueToJSON(
  contextAttributeValue: ContextAttributeValue,
): string {
  return JSON.stringify(
    ContextAttributeValue$outboundSchema.parse(contextAttributeValue),
  );
}

export function contextAttributeValueFromJSON(
  jsonString: string,
): SafeParseResult<ContextAttributeValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextAttributeValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextAttributeValue' from JSON`,
  );
}
