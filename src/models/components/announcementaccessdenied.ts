/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementAccessDeniedReason,
  AnnouncementAccessDeniedReason$inboundSchema,
  AnnouncementAccessDeniedReason$Outbound,
  AnnouncementAccessDeniedReason$outboundSchema,
} from "./announcementaccessdeniedreason.js";

export type AnnouncementAccessDenied = {
  action: string;
  reason: AnnouncementAccessDeniedReason;
};

/** @internal */
export const AnnouncementAccessDenied$inboundSchema: z.ZodType<
  AnnouncementAccessDenied,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  reason: AnnouncementAccessDeniedReason$inboundSchema,
});

/** @internal */
export type AnnouncementAccessDenied$Outbound = {
  action: string;
  reason: AnnouncementAccessDeniedReason$Outbound;
};

/** @internal */
export const AnnouncementAccessDenied$outboundSchema: z.ZodType<
  AnnouncementAccessDenied$Outbound,
  z.ZodTypeDef,
  AnnouncementAccessDenied
> = z.object({
  action: z.string(),
  reason: AnnouncementAccessDeniedReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementAccessDenied$ {
  /** @deprecated use `AnnouncementAccessDenied$inboundSchema` instead. */
  export const inboundSchema = AnnouncementAccessDenied$inboundSchema;
  /** @deprecated use `AnnouncementAccessDenied$outboundSchema` instead. */
  export const outboundSchema = AnnouncementAccessDenied$outboundSchema;
  /** @deprecated use `AnnouncementAccessDenied$Outbound` instead. */
  export type Outbound = AnnouncementAccessDenied$Outbound;
}

export function announcementAccessDeniedToJSON(
  announcementAccessDenied: AnnouncementAccessDenied,
): string {
  return JSON.stringify(
    AnnouncementAccessDenied$outboundSchema.parse(announcementAccessDenied),
  );
}

export function announcementAccessDeniedFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementAccessDenied, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementAccessDenied$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementAccessDenied' from JSON`,
  );
}
