/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Rollout,
  Rollout$inboundSchema,
  Rollout$Outbound,
  Rollout$outboundSchema,
} from "./rollout.js";

export type VariationOrRolloutRep = {
  /**
   * The index of the variation, from the array of variations for this flag
   */
  variation?: number | undefined;
  rollout?: Rollout | undefined;
};

/** @internal */
export const VariationOrRolloutRep$inboundSchema: z.ZodType<
  VariationOrRolloutRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  variation: z.number().int().optional(),
  rollout: Rollout$inboundSchema.optional(),
});

/** @internal */
export type VariationOrRolloutRep$Outbound = {
  variation?: number | undefined;
  rollout?: Rollout$Outbound | undefined;
};

/** @internal */
export const VariationOrRolloutRep$outboundSchema: z.ZodType<
  VariationOrRolloutRep$Outbound,
  z.ZodTypeDef,
  VariationOrRolloutRep
> = z.object({
  variation: z.number().int().optional(),
  rollout: Rollout$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariationOrRolloutRep$ {
  /** @deprecated use `VariationOrRolloutRep$inboundSchema` instead. */
  export const inboundSchema = VariationOrRolloutRep$inboundSchema;
  /** @deprecated use `VariationOrRolloutRep$outboundSchema` instead. */
  export const outboundSchema = VariationOrRolloutRep$outboundSchema;
  /** @deprecated use `VariationOrRolloutRep$Outbound` instead. */
  export type Outbound = VariationOrRolloutRep$Outbound;
}

export function variationOrRolloutRepToJSON(
  variationOrRolloutRep: VariationOrRolloutRep,
): string {
  return JSON.stringify(
    VariationOrRolloutRep$outboundSchema.parse(variationOrRolloutRep),
  );
}

export function variationOrRolloutRepFromJSON(
  jsonString: string,
): SafeParseResult<VariationOrRolloutRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariationOrRolloutRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariationOrRolloutRep' from JSON`,
  );
}
