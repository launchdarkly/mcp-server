/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricInput = {
  /**
   * The metric key
   */
  key: string;
  /**
   * Whether this is a metric group (true) or a metric (false). Defaults to false
   */
  isGroup?: boolean | undefined;
  /**
   * Deprecated, use <code>primarySingleMetricKey</code> and <code>primaryFunnelKey</code>. Whether this is a primary metric (true) or a secondary metric (false)
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  primary?: boolean | undefined;
};

/** @internal */
export const MetricInput$inboundSchema: z.ZodType<
  MetricInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  isGroup: z.boolean().optional(),
  primary: z.boolean().optional(),
});

/** @internal */
export type MetricInput$Outbound = {
  key: string;
  isGroup?: boolean | undefined;
  primary?: boolean | undefined;
};

/** @internal */
export const MetricInput$outboundSchema: z.ZodType<
  MetricInput$Outbound,
  z.ZodTypeDef,
  MetricInput
> = z.object({
  key: z.string(),
  isGroup: z.boolean().optional(),
  primary: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInput$ {
  /** @deprecated use `MetricInput$inboundSchema` instead. */
  export const inboundSchema = MetricInput$inboundSchema;
  /** @deprecated use `MetricInput$outboundSchema` instead. */
  export const outboundSchema = MetricInput$outboundSchema;
  /** @deprecated use `MetricInput$Outbound` instead. */
  export type Outbound = MetricInput$Outbound;
}

export function metricInputToJSON(metricInput: MetricInput): string {
  return JSON.stringify(MetricInput$outboundSchema.parse(metricInput));
}

export function metricInputFromJSON(
  jsonString: string,
): SafeParseResult<MetricInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricInput' from JSON`,
  );
}
