/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IterationRep,
  IterationRep$inboundSchema,
  IterationRep$Outbound,
  IterationRep$outboundSchema,
} from "./iterationrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type Experiment = {
  /**
   * The experiment ID
   */
  id?: string | undefined;
  /**
   * The experiment key
   */
  key: string;
  /**
   * The experiment name
   */
  name: string;
  /**
   * The experiment description
   */
  description?: string | undefined;
  /**
   * The ID of the member who maintains this experiment.
   */
  maintainerId: string;
  creationDate: number;
  environmentKey: string;
  archivedDate?: number | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The holdout ID
   */
  holdoutId?: string | undefined;
  currentIteration?: IterationRep | undefined;
  draftIteration?: IterationRep | undefined;
  /**
   * Details on the previous iterations for this experiment.
   */
  previousIterations?: Array<IterationRep> | undefined;
};

/** @internal */
export const Experiment$inboundSchema: z.ZodType<
  Experiment,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  key: z.string(),
  name: z.string(),
  description: z.string().optional(),
  _maintainerId: z.string(),
  _creationDate: z.number().int(),
  environmentKey: z.string(),
  archivedDate: z.number().int().optional(),
  _links: z.record(Link$inboundSchema),
  holdoutId: z.string().optional(),
  currentIteration: IterationRep$inboundSchema.optional(),
  draftIteration: IterationRep$inboundSchema.optional(),
  previousIterations: z.array(IterationRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_maintainerId": "maintainerId",
    "_creationDate": "creationDate",
    "_links": "links",
  });
});

/** @internal */
export type Experiment$Outbound = {
  _id?: string | undefined;
  key: string;
  name: string;
  description?: string | undefined;
  _maintainerId: string;
  _creationDate: number;
  environmentKey: string;
  archivedDate?: number | undefined;
  _links: { [k: string]: Link$Outbound };
  holdoutId?: string | undefined;
  currentIteration?: IterationRep$Outbound | undefined;
  draftIteration?: IterationRep$Outbound | undefined;
  previousIterations?: Array<IterationRep$Outbound> | undefined;
};

/** @internal */
export const Experiment$outboundSchema: z.ZodType<
  Experiment$Outbound,
  z.ZodTypeDef,
  Experiment
> = z.object({
  id: z.string().optional(),
  key: z.string(),
  name: z.string(),
  description: z.string().optional(),
  maintainerId: z.string(),
  creationDate: z.number().int(),
  environmentKey: z.string(),
  archivedDate: z.number().int().optional(),
  links: z.record(Link$outboundSchema),
  holdoutId: z.string().optional(),
  currentIteration: IterationRep$outboundSchema.optional(),
  draftIteration: IterationRep$outboundSchema.optional(),
  previousIterations: z.array(IterationRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    maintainerId: "_maintainerId",
    creationDate: "_creationDate",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experiment$ {
  /** @deprecated use `Experiment$inboundSchema` instead. */
  export const inboundSchema = Experiment$inboundSchema;
  /** @deprecated use `Experiment$outboundSchema` instead. */
  export const outboundSchema = Experiment$outboundSchema;
  /** @deprecated use `Experiment$Outbound` instead. */
  export type Outbound = Experiment$Outbound;
}

export function experimentToJSON(experiment: Experiment): string {
  return JSON.stringify(Experiment$outboundSchema.parse(experiment));
}

export function experimentFromJSON(
  jsonString: string,
): SafeParseResult<Experiment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experiment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experiment' from JSON`,
  );
}
