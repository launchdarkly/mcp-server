/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Prerequisite = {
  key: string;
  variation: number;
};

/** @internal */
export const Prerequisite$inboundSchema: z.ZodType<
  Prerequisite,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  variation: z.number().int(),
});

/** @internal */
export type Prerequisite$Outbound = {
  key: string;
  variation: number;
};

/** @internal */
export const Prerequisite$outboundSchema: z.ZodType<
  Prerequisite$Outbound,
  z.ZodTypeDef,
  Prerequisite
> = z.object({
  key: z.string(),
  variation: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Prerequisite$ {
  /** @deprecated use `Prerequisite$inboundSchema` instead. */
  export const inboundSchema = Prerequisite$inboundSchema;
  /** @deprecated use `Prerequisite$outboundSchema` instead. */
  export const outboundSchema = Prerequisite$outboundSchema;
  /** @deprecated use `Prerequisite$Outbound` instead. */
  export type Outbound = Prerequisite$Outbound;
}

export function prerequisiteToJSON(prerequisite: Prerequisite): string {
  return JSON.stringify(Prerequisite$outboundSchema.parse(prerequisite));
}

export function prerequisiteFromJSON(
  jsonString: string,
): SafeParseResult<Prerequisite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Prerequisite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Prerequisite' from JSON`,
  );
}
