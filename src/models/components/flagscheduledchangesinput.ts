/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FlagScheduledChangesInput = {
  /**
   * Optional comment describing the update to the scheduled changes
   */
  comment?: string | undefined;
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const FlagScheduledChangesInput$inboundSchema: z.ZodType<
  FlagScheduledChangesInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())),
});

/** @internal */
export type FlagScheduledChangesInput$Outbound = {
  comment?: string | undefined;
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const FlagScheduledChangesInput$outboundSchema: z.ZodType<
  FlagScheduledChangesInput$Outbound,
  z.ZodTypeDef,
  FlagScheduledChangesInput
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagScheduledChangesInput$ {
  /** @deprecated use `FlagScheduledChangesInput$inboundSchema` instead. */
  export const inboundSchema = FlagScheduledChangesInput$inboundSchema;
  /** @deprecated use `FlagScheduledChangesInput$outboundSchema` instead. */
  export const outboundSchema = FlagScheduledChangesInput$outboundSchema;
  /** @deprecated use `FlagScheduledChangesInput$Outbound` instead. */
  export type Outbound = FlagScheduledChangesInput$Outbound;
}

export function flagScheduledChangesInputToJSON(
  flagScheduledChangesInput: FlagScheduledChangesInput,
): string {
  return JSON.stringify(
    FlagScheduledChangesInput$outboundSchema.parse(flagScheduledChangesInput),
  );
}

export function flagScheduledChangesInputFromJSON(
  jsonString: string,
): SafeParseResult<FlagScheduledChangesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagScheduledChangesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagScheduledChangesInput' from JSON`,
  );
}
