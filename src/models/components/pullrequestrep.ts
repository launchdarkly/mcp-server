/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeploymentCollectionRep,
  DeploymentCollectionRep$inboundSchema,
  DeploymentCollectionRep$Outbound,
  DeploymentCollectionRep$outboundSchema,
} from "./deploymentcollectionrep.js";
import {
  FlagReferenceCollectionRep,
  FlagReferenceCollectionRep$inboundSchema,
  FlagReferenceCollectionRep$Outbound,
  FlagReferenceCollectionRep$outboundSchema,
} from "./flagreferencecollectionrep.js";
import {
  PullRequestLeadTimeRep,
  PullRequestLeadTimeRep$inboundSchema,
  PullRequestLeadTimeRep$Outbound,
  PullRequestLeadTimeRep$outboundSchema,
} from "./pullrequestleadtimerep.js";

export type PullRequestRep = {
  /**
   * The pull request internal ID
   */
  id: string;
  /**
   * The pull request number
   */
  externalId: string;
  /**
   * The pull request title
   */
  title: string;
  /**
   * The pull request status
   */
  status: string;
  /**
   * The pull request author
   */
  author: string;
  createTime: number;
  mergeTime?: number | undefined;
  /**
   * The pull request merge commit key
   */
  mergeCommitKey?: string | undefined;
  /**
   * The pull request base commit key
   */
  baseCommitKey: string;
  /**
   * The pull request head commit key
   */
  headCommitKey: string;
  /**
   * The number of files changed
   */
  filesChanged: number;
  /**
   * The number of lines added
   */
  linesAdded: number;
  /**
   * The number of lines deleted
   */
  linesDeleted: number;
  /**
   * The pull request URL
   */
  url: string;
  deployments?: DeploymentCollectionRep | undefined;
  flagReferences?: FlagReferenceCollectionRep | undefined;
  leadTime?: PullRequestLeadTimeRep | undefined;
};

/** @internal */
export const PullRequestRep$inboundSchema: z.ZodType<
  PullRequestRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  title: z.string(),
  status: z.string(),
  author: z.string(),
  createTime: z.number().int(),
  mergeTime: z.number().int().optional(),
  mergeCommitKey: z.string().optional(),
  baseCommitKey: z.string(),
  headCommitKey: z.string(),
  filesChanged: z.number().int(),
  linesAdded: z.number().int(),
  linesDeleted: z.number().int(),
  url: z.string(),
  deployments: z.lazy(() => DeploymentCollectionRep$inboundSchema).optional(),
  flagReferences: FlagReferenceCollectionRep$inboundSchema.optional(),
  leadTime: PullRequestLeadTimeRep$inboundSchema.optional(),
});

/** @internal */
export type PullRequestRep$Outbound = {
  id: string;
  externalId: string;
  title: string;
  status: string;
  author: string;
  createTime: number;
  mergeTime?: number | undefined;
  mergeCommitKey?: string | undefined;
  baseCommitKey: string;
  headCommitKey: string;
  filesChanged: number;
  linesAdded: number;
  linesDeleted: number;
  url: string;
  deployments?: DeploymentCollectionRep$Outbound | undefined;
  flagReferences?: FlagReferenceCollectionRep$Outbound | undefined;
  leadTime?: PullRequestLeadTimeRep$Outbound | undefined;
};

/** @internal */
export const PullRequestRep$outboundSchema: z.ZodType<
  PullRequestRep$Outbound,
  z.ZodTypeDef,
  PullRequestRep
> = z.object({
  id: z.string(),
  externalId: z.string(),
  title: z.string(),
  status: z.string(),
  author: z.string(),
  createTime: z.number().int(),
  mergeTime: z.number().int().optional(),
  mergeCommitKey: z.string().optional(),
  baseCommitKey: z.string(),
  headCommitKey: z.string(),
  filesChanged: z.number().int(),
  linesAdded: z.number().int(),
  linesDeleted: z.number().int(),
  url: z.string(),
  deployments: z.lazy(() => DeploymentCollectionRep$outboundSchema).optional(),
  flagReferences: FlagReferenceCollectionRep$outboundSchema.optional(),
  leadTime: PullRequestLeadTimeRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PullRequestRep$ {
  /** @deprecated use `PullRequestRep$inboundSchema` instead. */
  export const inboundSchema = PullRequestRep$inboundSchema;
  /** @deprecated use `PullRequestRep$outboundSchema` instead. */
  export const outboundSchema = PullRequestRep$outboundSchema;
  /** @deprecated use `PullRequestRep$Outbound` instead. */
  export type Outbound = PullRequestRep$Outbound;
}

export function pullRequestRepToJSON(pullRequestRep: PullRequestRep): string {
  return JSON.stringify(PullRequestRep$outboundSchema.parse(pullRequestRep));
}

export function pullRequestRepFromJSON(
  jsonString: string,
): SafeParseResult<PullRequestRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PullRequestRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PullRequestRep' from JSON`,
  );
}
