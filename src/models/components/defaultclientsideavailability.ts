/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DefaultClientSideAvailability = {
  /**
   * Whether to enable availability for mobile SDKs
   */
  usingMobileKey: boolean;
  /**
   * Whether to enable availability for client-side SDKs
   */
  usingEnvironmentId: boolean;
};

/** @internal */
export const DefaultClientSideAvailability$inboundSchema: z.ZodType<
  DefaultClientSideAvailability,
  z.ZodTypeDef,
  unknown
> = z.object({
  usingMobileKey: z.boolean(),
  usingEnvironmentId: z.boolean(),
});

/** @internal */
export type DefaultClientSideAvailability$Outbound = {
  usingMobileKey: boolean;
  usingEnvironmentId: boolean;
};

/** @internal */
export const DefaultClientSideAvailability$outboundSchema: z.ZodType<
  DefaultClientSideAvailability$Outbound,
  z.ZodTypeDef,
  DefaultClientSideAvailability
> = z.object({
  usingMobileKey: z.boolean(),
  usingEnvironmentId: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultClientSideAvailability$ {
  /** @deprecated use `DefaultClientSideAvailability$inboundSchema` instead. */
  export const inboundSchema = DefaultClientSideAvailability$inboundSchema;
  /** @deprecated use `DefaultClientSideAvailability$outboundSchema` instead. */
  export const outboundSchema = DefaultClientSideAvailability$outboundSchema;
  /** @deprecated use `DefaultClientSideAvailability$Outbound` instead. */
  export type Outbound = DefaultClientSideAvailability$Outbound;
}

export function defaultClientSideAvailabilityToJSON(
  defaultClientSideAvailability: DefaultClientSideAvailability,
): string {
  return JSON.stringify(
    DefaultClientSideAvailability$outboundSchema.parse(
      defaultClientSideAvailability,
    ),
  );
}

export function defaultClientSideAvailabilityFromJSON(
  jsonString: string,
): SafeParseResult<DefaultClientSideAvailability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultClientSideAvailability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultClientSideAvailability' from JSON`,
  );
}
