/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvaluationsSummary,
  EvaluationsSummary$inboundSchema,
  EvaluationsSummary$Outbound,
  EvaluationsSummary$outboundSchema,
} from "./evaluationssummary.js";

/**
 * The size of the flag event impact. Sizes are defined as: none (0%), small (0-20%), medium (20-80%), large (>80%)
 */
export const Size = {
  None: "none",
  Small: "small",
  Medium: "medium",
  Large: "large",
} as const;
/**
 * The size of the flag event impact. Sizes are defined as: none (0%), small (0-20%), medium (20-80%), large (>80%)
 */
export type Size = ClosedEnum<typeof Size>;

export type FlagEventImpactRep = {
  /**
   * The size of the flag event impact. Sizes are defined as: none (0%), small (0-20%), medium (20-80%), large (>80%)
   */
  size?: Size | undefined;
  /**
   * The percentage of the flag event impact
   */
  percentage?: number | undefined;
  reason?: string | undefined;
  evaluationsSummary?: EvaluationsSummary | undefined;
};

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const FlagEventImpactRep$inboundSchema: z.ZodType<
  FlagEventImpactRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: Size$inboundSchema.optional(),
  percentage: z.number().optional(),
  reason: z.string().optional(),
  evaluationsSummary: EvaluationsSummary$inboundSchema.optional(),
});

/** @internal */
export type FlagEventImpactRep$Outbound = {
  size?: string | undefined;
  percentage?: number | undefined;
  reason?: string | undefined;
  evaluationsSummary?: EvaluationsSummary$Outbound | undefined;
};

/** @internal */
export const FlagEventImpactRep$outboundSchema: z.ZodType<
  FlagEventImpactRep$Outbound,
  z.ZodTypeDef,
  FlagEventImpactRep
> = z.object({
  size: Size$outboundSchema.optional(),
  percentage: z.number().optional(),
  reason: z.string().optional(),
  evaluationsSummary: EvaluationsSummary$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagEventImpactRep$ {
  /** @deprecated use `FlagEventImpactRep$inboundSchema` instead. */
  export const inboundSchema = FlagEventImpactRep$inboundSchema;
  /** @deprecated use `FlagEventImpactRep$outboundSchema` instead. */
  export const outboundSchema = FlagEventImpactRep$outboundSchema;
  /** @deprecated use `FlagEventImpactRep$Outbound` instead. */
  export type Outbound = FlagEventImpactRep$Outbound;
}

export function flagEventImpactRepToJSON(
  flagEventImpactRep: FlagEventImpactRep,
): string {
  return JSON.stringify(
    FlagEventImpactRep$outboundSchema.parse(flagEventImpactRep),
  );
}

export function flagEventImpactRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagEventImpactRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagEventImpactRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagEventImpactRep' from JSON`,
  );
}
