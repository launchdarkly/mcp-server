/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AIConfigTargetingVariationValue,
  AIConfigTargetingVariationValue$inboundSchema,
  AIConfigTargetingVariationValue$Outbound,
  AIConfigTargetingVariationValue$outboundSchema,
} from "./aiconfigtargetingvariationvalue.js";

export type AIConfigTargetingVariation = {
  id: string;
  description: string;
  name: string;
  value: AIConfigTargetingVariationValue;
};

/** @internal */
export const AIConfigTargetingVariation$inboundSchema: z.ZodType<
  AIConfigTargetingVariation,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  description: z.string(),
  name: z.string(),
  value: AIConfigTargetingVariationValue$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type AIConfigTargetingVariation$Outbound = {
  _id: string;
  description: string;
  name: string;
  value: AIConfigTargetingVariationValue$Outbound;
};

/** @internal */
export const AIConfigTargetingVariation$outboundSchema: z.ZodType<
  AIConfigTargetingVariation$Outbound,
  z.ZodTypeDef,
  AIConfigTargetingVariation
> = z.object({
  id: z.string(),
  description: z.string(),
  name: z.string(),
  value: AIConfigTargetingVariationValue$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigTargetingVariation$ {
  /** @deprecated use `AIConfigTargetingVariation$inboundSchema` instead. */
  export const inboundSchema = AIConfigTargetingVariation$inboundSchema;
  /** @deprecated use `AIConfigTargetingVariation$outboundSchema` instead. */
  export const outboundSchema = AIConfigTargetingVariation$outboundSchema;
  /** @deprecated use `AIConfigTargetingVariation$Outbound` instead. */
  export type Outbound = AIConfigTargetingVariation$Outbound;
}

export function aiConfigTargetingVariationToJSON(
  aiConfigTargetingVariation: AIConfigTargetingVariation,
): string {
  return JSON.stringify(
    AIConfigTargetingVariation$outboundSchema.parse(aiConfigTargetingVariation),
  );
}

export function aiConfigTargetingVariationFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigTargetingVariation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigTargetingVariation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigTargetingVariation' from JSON`,
  );
}
