/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccessAllowedReason,
  AccessAllowedReason$inboundSchema,
  AccessAllowedReason$Outbound,
  AccessAllowedReason$outboundSchema,
} from "./accessallowedreason.js";

export type AccessAllowedRep = {
  action: string;
  reason: AccessAllowedReason;
};

/** @internal */
export const AccessAllowedRep$inboundSchema: z.ZodType<
  AccessAllowedRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  reason: AccessAllowedReason$inboundSchema,
});

/** @internal */
export type AccessAllowedRep$Outbound = {
  action: string;
  reason: AccessAllowedReason$Outbound;
};

/** @internal */
export const AccessAllowedRep$outboundSchema: z.ZodType<
  AccessAllowedRep$Outbound,
  z.ZodTypeDef,
  AccessAllowedRep
> = z.object({
  action: z.string(),
  reason: AccessAllowedReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessAllowedRep$ {
  /** @deprecated use `AccessAllowedRep$inboundSchema` instead. */
  export const inboundSchema = AccessAllowedRep$inboundSchema;
  /** @deprecated use `AccessAllowedRep$outboundSchema` instead. */
  export const outboundSchema = AccessAllowedRep$outboundSchema;
  /** @deprecated use `AccessAllowedRep$Outbound` instead. */
  export type Outbound = AccessAllowedRep$Outbound;
}

export function accessAllowedRepToJSON(
  accessAllowedRep: AccessAllowedRep,
): string {
  return JSON.stringify(
    AccessAllowedRep$outboundSchema.parse(accessAllowedRep),
  );
}

export function accessAllowedRepFromJSON(
  jsonString: string,
): SafeParseResult<AccessAllowedRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessAllowedRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessAllowedRep' from JSON`,
  );
}
