/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionInput,
  ActionInput$inboundSchema,
  ActionInput$Outbound,
  ActionInput$outboundSchema,
} from "./actioninput.js";
import {
  ConditionInput,
  ConditionInput$inboundSchema,
  ConditionInput$Outbound,
  ConditionInput$outboundSchema,
} from "./conditioninput.js";

export type StageInput = {
  /**
   * The stage name
   */
  name?: string | undefined;
  /**
   * Whether to execute the conditions in sequence for the given stage
   */
  executeConditionsInSequence?: boolean | undefined;
  /**
   * An array of conditions for the stage
   */
  conditions?: Array<ConditionInput> | undefined;
  action?: ActionInput | undefined;
};

/** @internal */
export const StageInput$inboundSchema: z.ZodType<
  StageInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  executeConditionsInSequence: z.boolean().optional(),
  conditions: z.array(ConditionInput$inboundSchema).optional(),
  action: ActionInput$inboundSchema.optional(),
});

/** @internal */
export type StageInput$Outbound = {
  name?: string | undefined;
  executeConditionsInSequence?: boolean | undefined;
  conditions?: Array<ConditionInput$Outbound> | undefined;
  action?: ActionInput$Outbound | undefined;
};

/** @internal */
export const StageInput$outboundSchema: z.ZodType<
  StageInput$Outbound,
  z.ZodTypeDef,
  StageInput
> = z.object({
  name: z.string().optional(),
  executeConditionsInSequence: z.boolean().optional(),
  conditions: z.array(ConditionInput$outboundSchema).optional(),
  action: ActionInput$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageInput$ {
  /** @deprecated use `StageInput$inboundSchema` instead. */
  export const inboundSchema = StageInput$inboundSchema;
  /** @deprecated use `StageInput$outboundSchema` instead. */
  export const outboundSchema = StageInput$outboundSchema;
  /** @deprecated use `StageInput$Outbound` instead. */
  export type Outbound = StageInput$Outbound;
}

export function stageInputToJSON(stageInput: StageInput): string {
  return JSON.stringify(StageInput$outboundSchema.parse(stageInput));
}

export function stageInputFromJSON(
  jsonString: string,
): SafeParseResult<StageInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageInput' from JSON`,
  );
}
