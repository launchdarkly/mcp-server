/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextSearch = {
  /**
   * A collection of context filters
   */
  filter?: string | undefined;
  /**
   * Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying <code>ts</code> for this value, or descending order by specifying <code>-ts</code>.
   */
  sort?: string | undefined;
  /**
   * Specifies the maximum number of items in the collection to return (max: 50, default: 20)
   */
  limit?: number | undefined;
  /**
   * Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the <code>next</code> link instead, because this value is an obfuscated string.
   */
  continuationToken?: string | undefined;
};

/** @internal */
export const ContextSearch$inboundSchema: z.ZodType<
  ContextSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
});

/** @internal */
export type ContextSearch$Outbound = {
  filter?: string | undefined;
  sort?: string | undefined;
  limit?: number | undefined;
  continuationToken?: string | undefined;
};

/** @internal */
export const ContextSearch$outboundSchema: z.ZodType<
  ContextSearch$Outbound,
  z.ZodTypeDef,
  ContextSearch
> = z.object({
  filter: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextSearch$ {
  /** @deprecated use `ContextSearch$inboundSchema` instead. */
  export const inboundSchema = ContextSearch$inboundSchema;
  /** @deprecated use `ContextSearch$outboundSchema` instead. */
  export const outboundSchema = ContextSearch$outboundSchema;
  /** @deprecated use `ContextSearch$Outbound` instead. */
  export type Outbound = ContextSearch$Outbound;
}

export function contextSearchToJSON(contextSearch: ContextSearch): string {
  return JSON.stringify(ContextSearch$outboundSchema.parse(contextSearch));
}

export function contextSearchFromJSON(
  jsonString: string,
): SafeParseResult<ContextSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextSearch' from JSON`,
  );
}
