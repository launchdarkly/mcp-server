/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReleasePipeline,
  ReleasePipeline$inboundSchema,
  ReleasePipeline$Outbound,
  ReleasePipeline$outboundSchema,
} from "./releasepipeline.js";

export type ReleasePipelineCollection = {
  /**
   * An array of release pipelines
   */
  items: Array<ReleasePipeline>;
  /**
   * Total number of release pipelines
   */
  totalCount: number;
};

/** @internal */
export const ReleasePipelineCollection$inboundSchema: z.ZodType<
  ReleasePipelineCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ReleasePipeline$inboundSchema),
  totalCount: z.number().int(),
});

/** @internal */
export type ReleasePipelineCollection$Outbound = {
  items: Array<ReleasePipeline$Outbound>;
  totalCount: number;
};

/** @internal */
export const ReleasePipelineCollection$outboundSchema: z.ZodType<
  ReleasePipelineCollection$Outbound,
  z.ZodTypeDef,
  ReleasePipelineCollection
> = z.object({
  items: z.array(ReleasePipeline$outboundSchema),
  totalCount: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleasePipelineCollection$ {
  /** @deprecated use `ReleasePipelineCollection$inboundSchema` instead. */
  export const inboundSchema = ReleasePipelineCollection$inboundSchema;
  /** @deprecated use `ReleasePipelineCollection$outboundSchema` instead. */
  export const outboundSchema = ReleasePipelineCollection$outboundSchema;
  /** @deprecated use `ReleasePipelineCollection$Outbound` instead. */
  export type Outbound = ReleasePipelineCollection$Outbound;
}

export function releasePipelineCollectionToJSON(
  releasePipelineCollection: ReleasePipelineCollection,
): string {
  return JSON.stringify(
    ReleasePipelineCollection$outboundSchema.parse(releasePipelineCollection),
  );
}

export function releasePipelineCollectionFromJSON(
  jsonString: string,
): SafeParseResult<ReleasePipelineCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleasePipelineCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleasePipelineCollection' from JSON`,
  );
}
