/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsChartBounds,
  InsightsChartBounds$inboundSchema,
  InsightsChartBounds$Outbound,
  InsightsChartBounds$outboundSchema,
} from "./insightschartbounds.js";

export type InsightsChartSeriesMetadata = {
  /**
   * Name of the series
   */
  name: string;
  /**
   * Aggregate count of the series values
   */
  count?: number | undefined;
  /**
   * Bounds for the series data
   */
  bounds?: Array<InsightsChartBounds> | undefined;
};

/** @internal */
export const InsightsChartSeriesMetadata$inboundSchema: z.ZodType<
  InsightsChartSeriesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  count: z.number().int().optional(),
  bounds: z.array(InsightsChartBounds$inboundSchema).optional(),
});

/** @internal */
export type InsightsChartSeriesMetadata$Outbound = {
  name: string;
  count?: number | undefined;
  bounds?: Array<InsightsChartBounds$Outbound> | undefined;
};

/** @internal */
export const InsightsChartSeriesMetadata$outboundSchema: z.ZodType<
  InsightsChartSeriesMetadata$Outbound,
  z.ZodTypeDef,
  InsightsChartSeriesMetadata
> = z.object({
  name: z.string(),
  count: z.number().int().optional(),
  bounds: z.array(InsightsChartBounds$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsChartSeriesMetadata$ {
  /** @deprecated use `InsightsChartSeriesMetadata$inboundSchema` instead. */
  export const inboundSchema = InsightsChartSeriesMetadata$inboundSchema;
  /** @deprecated use `InsightsChartSeriesMetadata$outboundSchema` instead. */
  export const outboundSchema = InsightsChartSeriesMetadata$outboundSchema;
  /** @deprecated use `InsightsChartSeriesMetadata$Outbound` instead. */
  export type Outbound = InsightsChartSeriesMetadata$Outbound;
}

export function insightsChartSeriesMetadataToJSON(
  insightsChartSeriesMetadata: InsightsChartSeriesMetadata,
): string {
  return JSON.stringify(
    InsightsChartSeriesMetadata$outboundSchema.parse(
      insightsChartSeriesMetadata,
    ),
  );
}

export function insightsChartSeriesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<InsightsChartSeriesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsChartSeriesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsChartSeriesMetadata' from JSON`,
  );
}
