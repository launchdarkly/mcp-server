/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TimestampRep = {
  milliseconds?: number | undefined;
  seconds?: number | undefined;
  rfc3339?: string | undefined;
  simple?: string | undefined;
};

/** @internal */
export const TimestampRep$inboundSchema: z.ZodType<
  TimestampRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  milliseconds: z.number().int().optional(),
  seconds: z.number().int().optional(),
  rfc3339: z.string().optional(),
  simple: z.string().optional(),
});

/** @internal */
export type TimestampRep$Outbound = {
  milliseconds?: number | undefined;
  seconds?: number | undefined;
  rfc3339?: string | undefined;
  simple?: string | undefined;
};

/** @internal */
export const TimestampRep$outboundSchema: z.ZodType<
  TimestampRep$Outbound,
  z.ZodTypeDef,
  TimestampRep
> = z.object({
  milliseconds: z.number().int().optional(),
  seconds: z.number().int().optional(),
  rfc3339: z.string().optional(),
  simple: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimestampRep$ {
  /** @deprecated use `TimestampRep$inboundSchema` instead. */
  export const inboundSchema = TimestampRep$inboundSchema;
  /** @deprecated use `TimestampRep$outboundSchema` instead. */
  export const outboundSchema = TimestampRep$outboundSchema;
  /** @deprecated use `TimestampRep$Outbound` instead. */
  export type Outbound = TimestampRep$Outbound;
}

export function timestampRepToJSON(timestampRep: TimestampRep): string {
  return JSON.stringify(TimestampRep$outboundSchema.parse(timestampRep));
}

export function timestampRepFromJSON(
  jsonString: string,
): SafeParseResult<TimestampRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimestampRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimestampRep' from JSON`,
  );
}
