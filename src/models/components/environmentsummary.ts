/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type EnvironmentSummary = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * A project-unique key for the environment
   */
  key: string;
  /**
   * A human-friendly name for the environment
   */
  name: string;
  /**
   * The color used to indicate this environment in the UI
   */
  color: string;
};

/** @internal */
export const EnvironmentSummary$inboundSchema: z.ZodType<
  EnvironmentSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  key: z.string(),
  name: z.string(),
  color: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EnvironmentSummary$Outbound = {
  _links: { [k: string]: Link$Outbound };
  key: string;
  name: string;
  color: string;
};

/** @internal */
export const EnvironmentSummary$outboundSchema: z.ZodType<
  EnvironmentSummary$Outbound,
  z.ZodTypeDef,
  EnvironmentSummary
> = z.object({
  links: z.record(Link$outboundSchema),
  key: z.string(),
  name: z.string(),
  color: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentSummary$ {
  /** @deprecated use `EnvironmentSummary$inboundSchema` instead. */
  export const inboundSchema = EnvironmentSummary$inboundSchema;
  /** @deprecated use `EnvironmentSummary$outboundSchema` instead. */
  export const outboundSchema = EnvironmentSummary$outboundSchema;
  /** @deprecated use `EnvironmentSummary$Outbound` instead. */
  export type Outbound = EnvironmentSummary$Outbound;
}

export function environmentSummaryToJSON(
  environmentSummary: EnvironmentSummary,
): string {
  return JSON.stringify(
    EnvironmentSummary$outboundSchema.parse(environmentSummary),
  );
}

export function environmentSummaryFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentSummary' from JSON`,
  );
}
