/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AiConfigsAccess,
  AiConfigsAccess$inboundSchema,
  AiConfigsAccess$Outbound,
  AiConfigsAccess$outboundSchema,
} from "./aiconfigsaccess.js";

export type ModelConfigParams = {};

export type ModelConfigCustomParams = {};

export type ModelConfig = {
  access?: AiConfigsAccess | undefined;
  /**
   * Human readable name of the model
   */
  name: string;
  /**
   * Unique key for the model
   */
  key: string;
  /**
   * Identifier for the model, for use with third party providers
   */
  id: string;
  /**
   * Icon for the model
   */
  icon?: string | undefined;
  /**
   * Provider for the model
   */
  provider?: string | undefined;
  /**
   * Whether the model is global
   */
  global: boolean;
  params?: ModelConfigParams | undefined;
  customParams?: ModelConfigCustomParams | undefined;
  tags: Array<string>;
  version: number;
  /**
   * Cost per input token in USD
   */
  costPerInputToken?: number | undefined;
  /**
   * Cost per output token in USD
   */
  costPerOutputToken?: number | undefined;
  /**
   * Whether the model is restricted
   */
  isRestricted: boolean;
};

/** @internal */
export const ModelConfigParams$inboundSchema: z.ZodType<
  ModelConfigParams,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ModelConfigParams$Outbound = {};

/** @internal */
export const ModelConfigParams$outboundSchema: z.ZodType<
  ModelConfigParams$Outbound,
  z.ZodTypeDef,
  ModelConfigParams
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelConfigParams$ {
  /** @deprecated use `ModelConfigParams$inboundSchema` instead. */
  export const inboundSchema = ModelConfigParams$inboundSchema;
  /** @deprecated use `ModelConfigParams$outboundSchema` instead. */
  export const outboundSchema = ModelConfigParams$outboundSchema;
  /** @deprecated use `ModelConfigParams$Outbound` instead. */
  export type Outbound = ModelConfigParams$Outbound;
}

export function modelConfigParamsToJSON(
  modelConfigParams: ModelConfigParams,
): string {
  return JSON.stringify(
    ModelConfigParams$outboundSchema.parse(modelConfigParams),
  );
}

export function modelConfigParamsFromJSON(
  jsonString: string,
): SafeParseResult<ModelConfigParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelConfigParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelConfigParams' from JSON`,
  );
}

/** @internal */
export const ModelConfigCustomParams$inboundSchema: z.ZodType<
  ModelConfigCustomParams,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ModelConfigCustomParams$Outbound = {};

/** @internal */
export const ModelConfigCustomParams$outboundSchema: z.ZodType<
  ModelConfigCustomParams$Outbound,
  z.ZodTypeDef,
  ModelConfigCustomParams
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelConfigCustomParams$ {
  /** @deprecated use `ModelConfigCustomParams$inboundSchema` instead. */
  export const inboundSchema = ModelConfigCustomParams$inboundSchema;
  /** @deprecated use `ModelConfigCustomParams$outboundSchema` instead. */
  export const outboundSchema = ModelConfigCustomParams$outboundSchema;
  /** @deprecated use `ModelConfigCustomParams$Outbound` instead. */
  export type Outbound = ModelConfigCustomParams$Outbound;
}

export function modelConfigCustomParamsToJSON(
  modelConfigCustomParams: ModelConfigCustomParams,
): string {
  return JSON.stringify(
    ModelConfigCustomParams$outboundSchema.parse(modelConfigCustomParams),
  );
}

export function modelConfigCustomParamsFromJSON(
  jsonString: string,
): SafeParseResult<ModelConfigCustomParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelConfigCustomParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelConfigCustomParams' from JSON`,
  );
}

/** @internal */
export const ModelConfig$inboundSchema: z.ZodType<
  ModelConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  _access: AiConfigsAccess$inboundSchema.optional(),
  name: z.string(),
  key: z.string(),
  id: z.string(),
  icon: z.string().optional(),
  provider: z.string().optional(),
  global: z.boolean(),
  params: z.lazy(() => ModelConfigParams$inboundSchema).optional(),
  customParams: z.lazy(() => ModelConfigCustomParams$inboundSchema).optional(),
  tags: z.array(z.string()),
  version: z.number().int(),
  costPerInputToken: z.number().optional(),
  costPerOutputToken: z.number().optional(),
  isRestricted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_access": "access",
  });
});

/** @internal */
export type ModelConfig$Outbound = {
  _access?: AiConfigsAccess$Outbound | undefined;
  name: string;
  key: string;
  id: string;
  icon?: string | undefined;
  provider?: string | undefined;
  global: boolean;
  params?: ModelConfigParams$Outbound | undefined;
  customParams?: ModelConfigCustomParams$Outbound | undefined;
  tags: Array<string>;
  version: number;
  costPerInputToken?: number | undefined;
  costPerOutputToken?: number | undefined;
  isRestricted: boolean;
};

/** @internal */
export const ModelConfig$outboundSchema: z.ZodType<
  ModelConfig$Outbound,
  z.ZodTypeDef,
  ModelConfig
> = z.object({
  access: AiConfigsAccess$outboundSchema.optional(),
  name: z.string(),
  key: z.string(),
  id: z.string(),
  icon: z.string().optional(),
  provider: z.string().optional(),
  global: z.boolean(),
  params: z.lazy(() => ModelConfigParams$outboundSchema).optional(),
  customParams: z.lazy(() => ModelConfigCustomParams$outboundSchema).optional(),
  tags: z.array(z.string()),
  version: z.number().int(),
  costPerInputToken: z.number().optional(),
  costPerOutputToken: z.number().optional(),
  isRestricted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelConfig$ {
  /** @deprecated use `ModelConfig$inboundSchema` instead. */
  export const inboundSchema = ModelConfig$inboundSchema;
  /** @deprecated use `ModelConfig$outboundSchema` instead. */
  export const outboundSchema = ModelConfig$outboundSchema;
  /** @deprecated use `ModelConfig$Outbound` instead. */
  export type Outbound = ModelConfig$Outbound;
}

export function modelConfigToJSON(modelConfig: ModelConfig): string {
  return JSON.stringify(ModelConfig$outboundSchema.parse(modelConfig));
}

export function modelConfigFromJSON(
  jsonString: string,
): SafeParseResult<ModelConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelConfig' from JSON`,
  );
}
