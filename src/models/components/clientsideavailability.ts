/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientSideAvailability = {
  usingMobileKey?: boolean | undefined;
  usingEnvironmentId?: boolean | undefined;
};

/** @internal */
export const ClientSideAvailability$inboundSchema: z.ZodType<
  ClientSideAvailability,
  z.ZodTypeDef,
  unknown
> = z.object({
  usingMobileKey: z.boolean().optional(),
  usingEnvironmentId: z.boolean().optional(),
});

/** @internal */
export type ClientSideAvailability$Outbound = {
  usingMobileKey?: boolean | undefined;
  usingEnvironmentId?: boolean | undefined;
};

/** @internal */
export const ClientSideAvailability$outboundSchema: z.ZodType<
  ClientSideAvailability$Outbound,
  z.ZodTypeDef,
  ClientSideAvailability
> = z.object({
  usingMobileKey: z.boolean().optional(),
  usingEnvironmentId: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSideAvailability$ {
  /** @deprecated use `ClientSideAvailability$inboundSchema` instead. */
  export const inboundSchema = ClientSideAvailability$inboundSchema;
  /** @deprecated use `ClientSideAvailability$outboundSchema` instead. */
  export const outboundSchema = ClientSideAvailability$outboundSchema;
  /** @deprecated use `ClientSideAvailability$Outbound` instead. */
  export type Outbound = ClientSideAvailability$Outbound;
}

export function clientSideAvailabilityToJSON(
  clientSideAvailability: ClientSideAvailability,
): string {
  return JSON.stringify(
    ClientSideAvailability$outboundSchema.parse(clientSideAvailability),
  );
}

export function clientSideAvailabilityFromJSON(
  jsonString: string,
): SafeParseResult<ClientSideAvailability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSideAvailability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSideAvailability' from JSON`,
  );
}
