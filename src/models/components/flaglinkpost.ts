/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FlagLinkPost = {
  /**
   * The flag link key
   */
  key?: string | undefined;
  /**
   * The integration key for an integration whose <code>manifest.json</code> includes the <code>flagLink</code> capability, if this is a flag link for an existing integration. Do not include for URL flag links.
   */
  integrationKey?: string | undefined;
  timestamp?: number | undefined;
  /**
   * The URL for the external resource you are linking the flag to
   */
  deepLink?: string | undefined;
  /**
   * The title of the flag link
   */
  title?: string | undefined;
  /**
   * The description of the flag link
   */
  description?: string | undefined;
  /**
   * The metadata required by this integration in order to create a flag link, if this is a flag link for an existing integration. Defined in the integration's <code>manifest.json</code> file under <code>flagLink</code>.
   */
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const FlagLinkPost$inboundSchema: z.ZodType<
  FlagLinkPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  integrationKey: z.string().optional(),
  timestamp: z.number().int().optional(),
  deepLink: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
});

/** @internal */
export type FlagLinkPost$Outbound = {
  key?: string | undefined;
  integrationKey?: string | undefined;
  timestamp?: number | undefined;
  deepLink?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const FlagLinkPost$outboundSchema: z.ZodType<
  FlagLinkPost$Outbound,
  z.ZodTypeDef,
  FlagLinkPost
> = z.object({
  key: z.string().optional(),
  integrationKey: z.string().optional(),
  timestamp: z.number().int().optional(),
  deepLink: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagLinkPost$ {
  /** @deprecated use `FlagLinkPost$inboundSchema` instead. */
  export const inboundSchema = FlagLinkPost$inboundSchema;
  /** @deprecated use `FlagLinkPost$outboundSchema` instead. */
  export const outboundSchema = FlagLinkPost$outboundSchema;
  /** @deprecated use `FlagLinkPost$Outbound` instead. */
  export type Outbound = FlagLinkPost$Outbound;
}

export function flagLinkPostToJSON(flagLinkPost: FlagLinkPost): string {
  return JSON.stringify(FlagLinkPost$outboundSchema.parse(flagLinkPost));
}

export function flagLinkPostFromJSON(
  jsonString: string,
): SafeParseResult<FlagLinkPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagLinkPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagLinkPost' from JSON`,
  );
}
