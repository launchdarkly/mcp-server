/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationConfigurationsRep,
  IntegrationConfigurationsRep$inboundSchema,
  IntegrationConfigurationsRep$Outbound,
  IntegrationConfigurationsRep$outboundSchema,
} from "./integrationconfigurationsrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type IntegrationConfigurationCollectionRep = {
  /**
   * An array of integration configurations
   */
  items: Array<IntegrationConfigurationsRep>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const IntegrationConfigurationCollectionRep$inboundSchema: z.ZodType<
  IntegrationConfigurationCollectionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(IntegrationConfigurationsRep$inboundSchema),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type IntegrationConfigurationCollectionRep$Outbound = {
  items: Array<IntegrationConfigurationsRep$Outbound>;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const IntegrationConfigurationCollectionRep$outboundSchema: z.ZodType<
  IntegrationConfigurationCollectionRep$Outbound,
  z.ZodTypeDef,
  IntegrationConfigurationCollectionRep
> = z.object({
  items: z.array(IntegrationConfigurationsRep$outboundSchema),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationConfigurationCollectionRep$ {
  /** @deprecated use `IntegrationConfigurationCollectionRep$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationConfigurationCollectionRep$inboundSchema;
  /** @deprecated use `IntegrationConfigurationCollectionRep$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationConfigurationCollectionRep$outboundSchema;
  /** @deprecated use `IntegrationConfigurationCollectionRep$Outbound` instead. */
  export type Outbound = IntegrationConfigurationCollectionRep$Outbound;
}

export function integrationConfigurationCollectionRepToJSON(
  integrationConfigurationCollectionRep: IntegrationConfigurationCollectionRep,
): string {
  return JSON.stringify(
    IntegrationConfigurationCollectionRep$outboundSchema.parse(
      integrationConfigurationCollectionRep,
    ),
  );
}

export function integrationConfigurationCollectionRepFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationConfigurationCollectionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationConfigurationCollectionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationConfigurationCollectionRep' from JSON`,
  );
}
