/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConflictOutput,
  ConflictOutput$inboundSchema,
  ConflictOutput$Outbound,
  ConflictOutput$outboundSchema,
} from "./conflictoutput.js";
import {
  ExecutionOutput,
  ExecutionOutput$inboundSchema,
  ExecutionOutput$Outbound,
  ExecutionOutput$outboundSchema,
} from "./executionoutput.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  StageOutput,
  StageOutput$inboundSchema,
  StageOutput$Outbound,
  StageOutput$outboundSchema,
} from "./stageoutput.js";
import {
  WorkflowTemplateMetadata,
  WorkflowTemplateMetadata$inboundSchema,
  WorkflowTemplateMetadata$Outbound,
  WorkflowTemplateMetadata$outboundSchema,
} from "./workflowtemplatemetadata.js";

export type CustomWorkflowOutput = {
  /**
   * The ID of the workflow
   */
  id: string;
  /**
   * The version of the workflow
   */
  version: number;
  /**
   * Any conflicts that are present in the workflow stages
   */
  conflicts: Array<ConflictOutput>;
  creationDate: number;
  /**
   * The member ID of the maintainer of the workflow. Defaults to the workflow creator.
   */
  maintainerId: string;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The name of the workflow
   */
  name: string;
  /**
   * A brief description of the workflow
   */
  description?: string | undefined;
  /**
   * The kind of workflow
   */
  kind?: string | undefined;
  /**
   * The stages that make up the workflow. Each stage contains conditions and actions.
   */
  stages?: Array<StageOutput> | undefined;
  execution: ExecutionOutput;
  meta?: WorkflowTemplateMetadata | undefined;
  /**
   * For workflows being created from a workflow template, this value is the template's key
   */
  templateKey?: string | undefined;
};

/** @internal */
export const CustomWorkflowOutput$inboundSchema: z.ZodType<
  CustomWorkflowOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _version: z.number().int(),
  _conflicts: z.array(ConflictOutput$inboundSchema),
  _creationDate: z.number().int(),
  _maintainerId: z.string(),
  _links: z.record(Link$inboundSchema),
  name: z.string(),
  description: z.string().optional(),
  kind: z.string().optional(),
  stages: z.array(StageOutput$inboundSchema).optional(),
  _execution: ExecutionOutput$inboundSchema,
  meta: WorkflowTemplateMetadata$inboundSchema.optional(),
  templateKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_version": "version",
    "_conflicts": "conflicts",
    "_creationDate": "creationDate",
    "_maintainerId": "maintainerId",
    "_links": "links",
    "_execution": "execution",
  });
});

/** @internal */
export type CustomWorkflowOutput$Outbound = {
  _id: string;
  _version: number;
  _conflicts: Array<ConflictOutput$Outbound>;
  _creationDate: number;
  _maintainerId: string;
  _links: { [k: string]: Link$Outbound };
  name: string;
  description?: string | undefined;
  kind?: string | undefined;
  stages?: Array<StageOutput$Outbound> | undefined;
  _execution: ExecutionOutput$Outbound;
  meta?: WorkflowTemplateMetadata$Outbound | undefined;
  templateKey?: string | undefined;
};

/** @internal */
export const CustomWorkflowOutput$outboundSchema: z.ZodType<
  CustomWorkflowOutput$Outbound,
  z.ZodTypeDef,
  CustomWorkflowOutput
> = z.object({
  id: z.string(),
  version: z.number().int(),
  conflicts: z.array(ConflictOutput$outboundSchema),
  creationDate: z.number().int(),
  maintainerId: z.string(),
  links: z.record(Link$outboundSchema),
  name: z.string(),
  description: z.string().optional(),
  kind: z.string().optional(),
  stages: z.array(StageOutput$outboundSchema).optional(),
  execution: ExecutionOutput$outboundSchema,
  meta: WorkflowTemplateMetadata$outboundSchema.optional(),
  templateKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    version: "_version",
    conflicts: "_conflicts",
    creationDate: "_creationDate",
    maintainerId: "_maintainerId",
    links: "_links",
    execution: "_execution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomWorkflowOutput$ {
  /** @deprecated use `CustomWorkflowOutput$inboundSchema` instead. */
  export const inboundSchema = CustomWorkflowOutput$inboundSchema;
  /** @deprecated use `CustomWorkflowOutput$outboundSchema` instead. */
  export const outboundSchema = CustomWorkflowOutput$outboundSchema;
  /** @deprecated use `CustomWorkflowOutput$Outbound` instead. */
  export type Outbound = CustomWorkflowOutput$Outbound;
}

export function customWorkflowOutputToJSON(
  customWorkflowOutput: CustomWorkflowOutput,
): string {
  return JSON.stringify(
    CustomWorkflowOutput$outboundSchema.parse(customWorkflowOutput),
  );
}

export function customWorkflowOutputFromJSON(
  jsonString: string,
): SafeParseResult<CustomWorkflowOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomWorkflowOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomWorkflowOutput' from JSON`,
  );
}
