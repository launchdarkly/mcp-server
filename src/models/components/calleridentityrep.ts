/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallerIdentityRep = {
  accountId?: string | undefined;
  environmentId?: string | undefined;
  projectId?: string | undefined;
  environmentName?: string | undefined;
  projectName?: string | undefined;
  authKind?: string | undefined;
  tokenKind?: string | undefined;
  clientId?: string | undefined;
  tokenName?: string | undefined;
  tokenId?: string | undefined;
  memberId?: string | undefined;
  serviceToken?: boolean | undefined;
};

/** @internal */
export const CallerIdentityRep$inboundSchema: z.ZodType<
  CallerIdentityRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string().optional(),
  environmentId: z.string().optional(),
  projectId: z.string().optional(),
  environmentName: z.string().optional(),
  projectName: z.string().optional(),
  authKind: z.string().optional(),
  tokenKind: z.string().optional(),
  clientId: z.string().optional(),
  tokenName: z.string().optional(),
  tokenId: z.string().optional(),
  memberId: z.string().optional(),
  serviceToken: z.boolean().optional(),
});

/** @internal */
export type CallerIdentityRep$Outbound = {
  accountId?: string | undefined;
  environmentId?: string | undefined;
  projectId?: string | undefined;
  environmentName?: string | undefined;
  projectName?: string | undefined;
  authKind?: string | undefined;
  tokenKind?: string | undefined;
  clientId?: string | undefined;
  tokenName?: string | undefined;
  tokenId?: string | undefined;
  memberId?: string | undefined;
  serviceToken?: boolean | undefined;
};

/** @internal */
export const CallerIdentityRep$outboundSchema: z.ZodType<
  CallerIdentityRep$Outbound,
  z.ZodTypeDef,
  CallerIdentityRep
> = z.object({
  accountId: z.string().optional(),
  environmentId: z.string().optional(),
  projectId: z.string().optional(),
  environmentName: z.string().optional(),
  projectName: z.string().optional(),
  authKind: z.string().optional(),
  tokenKind: z.string().optional(),
  clientId: z.string().optional(),
  tokenName: z.string().optional(),
  tokenId: z.string().optional(),
  memberId: z.string().optional(),
  serviceToken: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallerIdentityRep$ {
  /** @deprecated use `CallerIdentityRep$inboundSchema` instead. */
  export const inboundSchema = CallerIdentityRep$inboundSchema;
  /** @deprecated use `CallerIdentityRep$outboundSchema` instead. */
  export const outboundSchema = CallerIdentityRep$outboundSchema;
  /** @deprecated use `CallerIdentityRep$Outbound` instead. */
  export type Outbound = CallerIdentityRep$Outbound;
}

export function callerIdentityRepToJSON(
  callerIdentityRep: CallerIdentityRep,
): string {
  return JSON.stringify(
    CallerIdentityRep$outboundSchema.parse(callerIdentityRep),
  );
}

export function callerIdentityRepFromJSON(
  jsonString: string,
): SafeParseResult<CallerIdentityRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallerIdentityRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallerIdentityRep' from JSON`,
  );
}
