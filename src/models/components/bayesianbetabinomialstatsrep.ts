/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BayesianBetaBinomialStatsRep = {
  /**
   * Sum of converted pseudo-units for prior distribution
   */
  priorAlpha?: number | undefined;
  /**
   * Sum of non-converted pseudo-units for prior distribution
   */
  priorBeta?: number | undefined;
  /**
   * Mean of the prior distribution
   */
  priorMean?: number | undefined;
  /**
   * The precision weight of the data mean
   */
  dataWeight?: number | undefined;
};

/** @internal */
export const BayesianBetaBinomialStatsRep$inboundSchema: z.ZodType<
  BayesianBetaBinomialStatsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  priorAlpha: z.number().optional(),
  priorBeta: z.number().optional(),
  priorMean: z.number().optional(),
  dataWeight: z.number().optional(),
});

/** @internal */
export type BayesianBetaBinomialStatsRep$Outbound = {
  priorAlpha?: number | undefined;
  priorBeta?: number | undefined;
  priorMean?: number | undefined;
  dataWeight?: number | undefined;
};

/** @internal */
export const BayesianBetaBinomialStatsRep$outboundSchema: z.ZodType<
  BayesianBetaBinomialStatsRep$Outbound,
  z.ZodTypeDef,
  BayesianBetaBinomialStatsRep
> = z.object({
  priorAlpha: z.number().optional(),
  priorBeta: z.number().optional(),
  priorMean: z.number().optional(),
  dataWeight: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BayesianBetaBinomialStatsRep$ {
  /** @deprecated use `BayesianBetaBinomialStatsRep$inboundSchema` instead. */
  export const inboundSchema = BayesianBetaBinomialStatsRep$inboundSchema;
  /** @deprecated use `BayesianBetaBinomialStatsRep$outboundSchema` instead. */
  export const outboundSchema = BayesianBetaBinomialStatsRep$outboundSchema;
  /** @deprecated use `BayesianBetaBinomialStatsRep$Outbound` instead. */
  export type Outbound = BayesianBetaBinomialStatsRep$Outbound;
}

export function bayesianBetaBinomialStatsRepToJSON(
  bayesianBetaBinomialStatsRep: BayesianBetaBinomialStatsRep,
): string {
  return JSON.stringify(
    BayesianBetaBinomialStatsRep$outboundSchema.parse(
      bayesianBetaBinomialStatsRep,
    ),
  );
}

export function bayesianBetaBinomialStatsRepFromJSON(
  jsonString: string,
): SafeParseResult<BayesianBetaBinomialStatsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BayesianBetaBinomialStatsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BayesianBetaBinomialStatsRep' from JSON`,
  );
}
