/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InitiatorRep,
  InitiatorRep$inboundSchema,
  InitiatorRep$Outbound,
  InitiatorRep$outboundSchema,
} from "./initiatorrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type Export = {
  /**
   * The export ID
   */
  id: string;
  /**
   * The segment key
   */
  segmentKey: string;
  creationTime: number;
  /**
   * The export status
   */
  status: string;
  /**
   * The export size, in bytes
   */
  sizeBytes: number;
  /**
   * The export size, with units
   */
  size: string;
  initiator: InitiatorRep;
  /**
   * The location and content type of related resources, including the location of the exported file
   */
  links: { [k: string]: Link };
};

/** @internal */
export const Export$inboundSchema: z.ZodType<Export, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    segmentKey: z.string(),
    creationTime: z.number().int(),
    status: z.string(),
    sizeBytes: z.number().int(),
    size: z.string(),
    initiator: InitiatorRep$inboundSchema,
    _links: z.record(Link$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Export$Outbound = {
  id: string;
  segmentKey: string;
  creationTime: number;
  status: string;
  sizeBytes: number;
  size: string;
  initiator: InitiatorRep$Outbound;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const Export$outboundSchema: z.ZodType<
  Export$Outbound,
  z.ZodTypeDef,
  Export
> = z.object({
  id: z.string(),
  segmentKey: z.string(),
  creationTime: z.number().int(),
  status: z.string(),
  sizeBytes: z.number().int(),
  size: z.string(),
  initiator: InitiatorRep$outboundSchema,
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Export$ {
  /** @deprecated use `Export$inboundSchema` instead. */
  export const inboundSchema = Export$inboundSchema;
  /** @deprecated use `Export$outboundSchema` instead. */
  export const outboundSchema = Export$outboundSchema;
  /** @deprecated use `Export$Outbound` instead. */
  export type Outbound = Export$Outbound;
}

export function exportToJSON(value: Export): string {
  return JSON.stringify(Export$outboundSchema.parse(value));
}

export function exportFromJSON(
  jsonString: string,
): SafeParseResult<Export, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Export$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Export' from JSON`,
  );
}
