/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlagValueUnion,
  FlagValueUnion$inboundSchema,
  FlagValueUnion$Outbound,
  FlagValueUnion$outboundSchema,
} from "./flagvalueunion.js";

/**
 * variation of a flag
 */
export type Variation = {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  /**
   * value of a feature flag variation
   */
  value: FlagValueUnion;
};

/** @internal */
export const Variation$inboundSchema: z.ZodType<
  Variation,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  value: FlagValueUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type Variation$Outbound = {
  _id: string;
  name?: string | undefined;
  description?: string | undefined;
  value: FlagValueUnion$Outbound;
};

/** @internal */
export const Variation$outboundSchema: z.ZodType<
  Variation$Outbound,
  z.ZodTypeDef,
  Variation
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  value: FlagValueUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variation$ {
  /** @deprecated use `Variation$inboundSchema` instead. */
  export const inboundSchema = Variation$inboundSchema;
  /** @deprecated use `Variation$outboundSchema` instead. */
  export const outboundSchema = Variation$outboundSchema;
  /** @deprecated use `Variation$Outbound` instead. */
  export type Outbound = Variation$Outbound;
}

export function variationToJSON(variation: Variation): string {
  return JSON.stringify(Variation$outboundSchema.parse(variation));
}

export function variationFromJSON(
  jsonString: string,
): SafeParseResult<Variation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variation' from JSON`,
  );
}
