/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  TeamCustomRoles,
  TeamCustomRoles$inboundSchema,
  TeamCustomRoles$Outbound,
  TeamCustomRoles$outboundSchema,
} from "./teamcustomroles.js";
import {
  TeamMaintainers,
  TeamMaintainers$inboundSchema,
  TeamMaintainers$Outbound,
  TeamMaintainers$outboundSchema,
} from "./teammaintainers.js";
import {
  TeamMembers,
  TeamMembers$inboundSchema,
  TeamMembers$Outbound,
  TeamMembers$outboundSchema,
} from "./teammembers.js";
import {
  TeamProjects,
  TeamProjects$inboundSchema,
  TeamProjects$Outbound,
  TeamProjects$outboundSchema,
} from "./teamprojects.js";

export type Team = {
  /**
   * A description of the team
   */
  description?: string | undefined;
  /**
   * The team key
   */
  key?: string | undefined;
  /**
   * A human-friendly name for the team
   */
  name?: string | undefined;
  access?: Access | undefined;
  creationDate?: number | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  lastModified?: number | undefined;
  /**
   * The team version
   */
  version?: number | undefined;
  /**
   * Whether the team has been synced with an external identity provider (IdP). Team sync is available to customers on an Enterprise plan.
   */
  idpSynced?: boolean | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
  roles?: TeamCustomRoles | undefined;
  members?: TeamMembers | undefined;
  projects?: TeamProjects | undefined;
  maintainers?: TeamMaintainers | undefined;
};

/** @internal */
export const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown> = z
  .object({
    description: z.string().optional(),
    key: z.string().optional(),
    name: z.string().optional(),
    _access: Access$inboundSchema.optional(),
    _creationDate: z.number().int().optional(),
    _links: z.record(Link$inboundSchema).optional(),
    _lastModified: z.number().int().optional(),
    _version: z.number().int().optional(),
    _idpSynced: z.boolean().optional(),
    roleAttributes: z.record(z.array(z.string())).optional(),
    roles: TeamCustomRoles$inboundSchema.optional(),
    members: TeamMembers$inboundSchema.optional(),
    projects: TeamProjects$inboundSchema.optional(),
    maintainers: TeamMaintainers$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "_access": "access",
      "_creationDate": "creationDate",
      "_links": "links",
      "_lastModified": "lastModified",
      "_version": "version",
      "_idpSynced": "idpSynced",
    });
  });

/** @internal */
export type Team$Outbound = {
  description?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
  _access?: Access$Outbound | undefined;
  _creationDate?: number | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _lastModified?: number | undefined;
  _version?: number | undefined;
  _idpSynced?: boolean | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
  roles?: TeamCustomRoles$Outbound | undefined;
  members?: TeamMembers$Outbound | undefined;
  projects?: TeamProjects$Outbound | undefined;
  maintainers?: TeamMaintainers$Outbound | undefined;
};

/** @internal */
export const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team> =
  z.object({
    description: z.string().optional(),
    key: z.string().optional(),
    name: z.string().optional(),
    access: Access$outboundSchema.optional(),
    creationDate: z.number().int().optional(),
    links: z.record(Link$outboundSchema).optional(),
    lastModified: z.number().int().optional(),
    version: z.number().int().optional(),
    idpSynced: z.boolean().optional(),
    roleAttributes: z.record(z.array(z.string())).optional(),
    roles: TeamCustomRoles$outboundSchema.optional(),
    members: TeamMembers$outboundSchema.optional(),
    projects: TeamProjects$outboundSchema.optional(),
    maintainers: TeamMaintainers$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      access: "_access",
      creationDate: "_creationDate",
      links: "_links",
      lastModified: "_lastModified",
      version: "_version",
      idpSynced: "_idpSynced",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Team$ {
  /** @deprecated use `Team$inboundSchema` instead. */
  export const inboundSchema = Team$inboundSchema;
  /** @deprecated use `Team$outboundSchema` instead. */
  export const outboundSchema = Team$outboundSchema;
  /** @deprecated use `Team$Outbound` instead. */
  export type Outbound = Team$Outbound;
}

export function teamToJSON(team: Team): string {
  return JSON.stringify(Team$outboundSchema.parse(team));
}

export function teamFromJSON(
  jsonString: string,
): SafeParseResult<Team, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Team$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Team' from JSON`,
  );
}
