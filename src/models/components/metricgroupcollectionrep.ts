/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MetricGroupRep,
  MetricGroupRep$inboundSchema,
  MetricGroupRep$Outbound,
  MetricGroupRep$outboundSchema,
} from "./metricgrouprep.js";

export type MetricGroupCollectionRep = {
  /**
   * An array of metric groups
   */
  items: Array<MetricGroupRep>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const MetricGroupCollectionRep$inboundSchema: z.ZodType<
  MetricGroupCollectionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(MetricGroupRep$inboundSchema),
  _links: z.record(Link$inboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type MetricGroupCollectionRep$Outbound = {
  items: Array<MetricGroupRep$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const MetricGroupCollectionRep$outboundSchema: z.ZodType<
  MetricGroupCollectionRep$Outbound,
  z.ZodTypeDef,
  MetricGroupCollectionRep
> = z.object({
  items: z.array(MetricGroupRep$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricGroupCollectionRep$ {
  /** @deprecated use `MetricGroupCollectionRep$inboundSchema` instead. */
  export const inboundSchema = MetricGroupCollectionRep$inboundSchema;
  /** @deprecated use `MetricGroupCollectionRep$outboundSchema` instead. */
  export const outboundSchema = MetricGroupCollectionRep$outboundSchema;
  /** @deprecated use `MetricGroupCollectionRep$Outbound` instead. */
  export type Outbound = MetricGroupCollectionRep$Outbound;
}

export function metricGroupCollectionRepToJSON(
  metricGroupCollectionRep: MetricGroupCollectionRep,
): string {
  return JSON.stringify(
    MetricGroupCollectionRep$outboundSchema.parse(metricGroupCollectionRep),
  );
}

export function metricGroupCollectionRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricGroupCollectionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricGroupCollectionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricGroupCollectionRep' from JSON`,
  );
}
