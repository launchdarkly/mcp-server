/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The member's built-in role
 */
export const NewMemberFormRole = {
  Reader: "reader",
  Writer: "writer",
  Admin: "admin",
  NoAccess: "no_access",
} as const;
/**
 * The member's built-in role
 */
export type NewMemberFormRole = ClosedEnum<typeof NewMemberFormRole>;

export type NewMemberForm = {
  /**
   * The member's email
   */
  email: string;
  /**
   * The member's password
   */
  password?: string | undefined;
  /**
   * The member's first name
   */
  firstName?: string | undefined;
  /**
   * The member's last name
   */
  lastName?: string | undefined;
  /**
   * The member's built-in role
   */
  role?: NewMemberFormRole | undefined;
  /**
   * An array of the member's custom roles
   */
  customRoles?: Array<string> | undefined;
  /**
   * An array of the member's teams
   */
  teamKeys?: Array<string> | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const NewMemberFormRole$inboundSchema: z.ZodNativeEnum<
  typeof NewMemberFormRole
> = z.nativeEnum(NewMemberFormRole);

/** @internal */
export const NewMemberFormRole$outboundSchema: z.ZodNativeEnum<
  typeof NewMemberFormRole
> = NewMemberFormRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewMemberFormRole$ {
  /** @deprecated use `NewMemberFormRole$inboundSchema` instead. */
  export const inboundSchema = NewMemberFormRole$inboundSchema;
  /** @deprecated use `NewMemberFormRole$outboundSchema` instead. */
  export const outboundSchema = NewMemberFormRole$outboundSchema;
}

/** @internal */
export const NewMemberForm$inboundSchema: z.ZodType<
  NewMemberForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  password: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: NewMemberFormRole$inboundSchema.optional(),
  customRoles: z.array(z.string()).optional(),
  teamKeys: z.array(z.string()).optional(),
  roleAttributes: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type NewMemberForm$Outbound = {
  email: string;
  password?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  role?: string | undefined;
  customRoles?: Array<string> | undefined;
  teamKeys?: Array<string> | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const NewMemberForm$outboundSchema: z.ZodType<
  NewMemberForm$Outbound,
  z.ZodTypeDef,
  NewMemberForm
> = z.object({
  email: z.string(),
  password: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: NewMemberFormRole$outboundSchema.optional(),
  customRoles: z.array(z.string()).optional(),
  teamKeys: z.array(z.string()).optional(),
  roleAttributes: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewMemberForm$ {
  /** @deprecated use `NewMemberForm$inboundSchema` instead. */
  export const inboundSchema = NewMemberForm$inboundSchema;
  /** @deprecated use `NewMemberForm$outboundSchema` instead. */
  export const outboundSchema = NewMemberForm$outboundSchema;
  /** @deprecated use `NewMemberForm$Outbound` instead. */
  export type Outbound = NewMemberForm$Outbound;
}

export function newMemberFormToJSON(newMemberForm: NewMemberForm): string {
  return JSON.stringify(NewMemberForm$outboundSchema.parse(newMemberForm));
}

export function newMemberFormFromJSON(
  jsonString: string,
): SafeParseResult<NewMemberForm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewMemberForm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewMemberForm' from JSON`,
  );
}
