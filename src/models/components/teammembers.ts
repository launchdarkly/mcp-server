/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TeamMembers = {
  /**
   * The total count of members that belong to the team
   */
  totalCount?: number | undefined;
};

/** @internal */
export const TeamMembers$inboundSchema: z.ZodType<
  TeamMembers,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int().optional(),
});

/** @internal */
export type TeamMembers$Outbound = {
  totalCount?: number | undefined;
};

/** @internal */
export const TeamMembers$outboundSchema: z.ZodType<
  TeamMembers$Outbound,
  z.ZodTypeDef,
  TeamMembers
> = z.object({
  totalCount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamMembers$ {
  /** @deprecated use `TeamMembers$inboundSchema` instead. */
  export const inboundSchema = TeamMembers$inboundSchema;
  /** @deprecated use `TeamMembers$outboundSchema` instead. */
  export const outboundSchema = TeamMembers$outboundSchema;
  /** @deprecated use `TeamMembers$Outbound` instead. */
  export type Outbound = TeamMembers$Outbound;
}

export function teamMembersToJSON(teamMembers: TeamMembers): string {
  return JSON.stringify(TeamMembers$outboundSchema.parse(teamMembers));
}

export function teamMembersFromJSON(
  jsonString: string,
): SafeParseResult<TeamMembers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamMembers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamMembers' from JSON`,
  );
}
