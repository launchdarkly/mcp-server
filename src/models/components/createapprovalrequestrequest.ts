/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateApprovalRequestRequest = {
  /**
   * String representation of the resource specifier
   */
  resourceId: string;
  /**
   * Optional comment describing the approval request
   */
  comment?: string | undefined;
  /**
   * A brief description of the changes you're requesting
   */
  description: string;
  instructions: Array<{ [k: string]: any }>;
  /**
   * An array of member IDs. These members are notified to review the approval request.
   */
  notifyMemberIds?: Array<string> | undefined;
  /**
   * An array of team keys. The members of these teams are notified to review the approval request.
   */
  notifyTeamKeys?: Array<string> | undefined;
  integrationConfig?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateApprovalRequestRequest$inboundSchema: z.ZodType<
  CreateApprovalRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string(),
  comment: z.string().optional(),
  description: z.string(),
  instructions: z.array(z.record(z.any())),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  integrationConfig: z.record(z.any()).optional(),
});

/** @internal */
export type CreateApprovalRequestRequest$Outbound = {
  resourceId: string;
  comment?: string | undefined;
  description: string;
  instructions: Array<{ [k: string]: any }>;
  notifyMemberIds?: Array<string> | undefined;
  notifyTeamKeys?: Array<string> | undefined;
  integrationConfig?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateApprovalRequestRequest$outboundSchema: z.ZodType<
  CreateApprovalRequestRequest$Outbound,
  z.ZodTypeDef,
  CreateApprovalRequestRequest
> = z.object({
  resourceId: z.string(),
  comment: z.string().optional(),
  description: z.string(),
  instructions: z.array(z.record(z.any())),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  integrationConfig: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApprovalRequestRequest$ {
  /** @deprecated use `CreateApprovalRequestRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApprovalRequestRequest$inboundSchema;
  /** @deprecated use `CreateApprovalRequestRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApprovalRequestRequest$outboundSchema;
  /** @deprecated use `CreateApprovalRequestRequest$Outbound` instead. */
  export type Outbound = CreateApprovalRequestRequest$Outbound;
}

export function createApprovalRequestRequestToJSON(
  createApprovalRequestRequest: CreateApprovalRequestRequest,
): string {
  return JSON.stringify(
    CreateApprovalRequestRequest$outboundSchema.parse(
      createApprovalRequestRequest,
    ),
  );
}

export function createApprovalRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApprovalRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApprovalRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApprovalRequestRequest' from JSON`,
  );
}
