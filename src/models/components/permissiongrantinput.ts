/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A group of related actions to allow. Specify either <code>actionSet</code> or <code>actions</code>. Use <code>maintainTeam</code> to add team maintainers.
 */
export const ActionSet = {
  MaintainTeam: "maintainTeam",
} as const;
/**
 * A group of related actions to allow. Specify either <code>actionSet</code> or <code>actions</code>. Use <code>maintainTeam</code> to add team maintainers.
 */
export type ActionSet = ClosedEnum<typeof ActionSet>;

export type PermissionGrantInput = {
  /**
   * A group of related actions to allow. Specify either <code>actionSet</code> or <code>actions</code>. Use <code>maintainTeam</code> to add team maintainers.
   */
  actionSet?: ActionSet | undefined;
  /**
   * A list of actions to allow. Specify either <code>actionSet</code> or <code>actions</code>. To learn more, read [Role actions](https://launchdarkly.com/docs/ld-docs/home/account/role-actions).
   */
  actions?: Array<string> | undefined;
  /**
   * A list of member IDs who receive the permission grant.
   */
  memberIDs?: Array<string> | undefined;
};

/** @internal */
export const ActionSet$inboundSchema: z.ZodNativeEnum<typeof ActionSet> = z
  .nativeEnum(ActionSet);

/** @internal */
export const ActionSet$outboundSchema: z.ZodNativeEnum<typeof ActionSet> =
  ActionSet$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionSet$ {
  /** @deprecated use `ActionSet$inboundSchema` instead. */
  export const inboundSchema = ActionSet$inboundSchema;
  /** @deprecated use `ActionSet$outboundSchema` instead. */
  export const outboundSchema = ActionSet$outboundSchema;
}

/** @internal */
export const PermissionGrantInput$inboundSchema: z.ZodType<
  PermissionGrantInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  actionSet: ActionSet$inboundSchema.optional(),
  actions: z.array(z.string()).optional(),
  memberIDs: z.array(z.string()).optional(),
});

/** @internal */
export type PermissionGrantInput$Outbound = {
  actionSet?: string | undefined;
  actions?: Array<string> | undefined;
  memberIDs?: Array<string> | undefined;
};

/** @internal */
export const PermissionGrantInput$outboundSchema: z.ZodType<
  PermissionGrantInput$Outbound,
  z.ZodTypeDef,
  PermissionGrantInput
> = z.object({
  actionSet: ActionSet$outboundSchema.optional(),
  actions: z.array(z.string()).optional(),
  memberIDs: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionGrantInput$ {
  /** @deprecated use `PermissionGrantInput$inboundSchema` instead. */
  export const inboundSchema = PermissionGrantInput$inboundSchema;
  /** @deprecated use `PermissionGrantInput$outboundSchema` instead. */
  export const outboundSchema = PermissionGrantInput$outboundSchema;
  /** @deprecated use `PermissionGrantInput$Outbound` instead. */
  export type Outbound = PermissionGrantInput$Outbound;
}

export function permissionGrantInputToJSON(
  permissionGrantInput: PermissionGrantInput,
): string {
  return JSON.stringify(
    PermissionGrantInput$outboundSchema.parse(permissionGrantInput),
  );
}

export function permissionGrantInputFromJSON(
  jsonString: string,
): SafeParseResult<PermissionGrantInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermissionGrantInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermissionGrantInput' from JSON`,
  );
}
