/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiConfigsExperimentEnabledPeriodRep = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
};

/** @internal */
export const AiConfigsExperimentEnabledPeriodRep$inboundSchema: z.ZodType<
  AiConfigsExperimentEnabledPeriodRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
});

/** @internal */
export type AiConfigsExperimentEnabledPeriodRep$Outbound = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
};

/** @internal */
export const AiConfigsExperimentEnabledPeriodRep$outboundSchema: z.ZodType<
  AiConfigsExperimentEnabledPeriodRep$Outbound,
  z.ZodTypeDef,
  AiConfigsExperimentEnabledPeriodRep
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiConfigsExperimentEnabledPeriodRep$ {
  /** @deprecated use `AiConfigsExperimentEnabledPeriodRep$inboundSchema` instead. */
  export const inboundSchema =
    AiConfigsExperimentEnabledPeriodRep$inboundSchema;
  /** @deprecated use `AiConfigsExperimentEnabledPeriodRep$outboundSchema` instead. */
  export const outboundSchema =
    AiConfigsExperimentEnabledPeriodRep$outboundSchema;
  /** @deprecated use `AiConfigsExperimentEnabledPeriodRep$Outbound` instead. */
  export type Outbound = AiConfigsExperimentEnabledPeriodRep$Outbound;
}

export function aiConfigsExperimentEnabledPeriodRepToJSON(
  aiConfigsExperimentEnabledPeriodRep: AiConfigsExperimentEnabledPeriodRep,
): string {
  return JSON.stringify(
    AiConfigsExperimentEnabledPeriodRep$outboundSchema.parse(
      aiConfigsExperimentEnabledPeriodRep,
    ),
  );
}

export function aiConfigsExperimentEnabledPeriodRepFromJSON(
  jsonString: string,
): SafeParseResult<AiConfigsExperimentEnabledPeriodRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AiConfigsExperimentEnabledPeriodRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiConfigsExperimentEnabledPeriodRep' from JSON`,
  );
}
