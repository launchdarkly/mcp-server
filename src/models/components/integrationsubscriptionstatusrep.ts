/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationStatusRep,
  IntegrationStatusRep$inboundSchema,
  IntegrationStatusRep$Outbound,
  IntegrationStatusRep$outboundSchema,
} from "./integrationstatusrep.js";

export type IntegrationSubscriptionStatusRep = {
  successCount?: number | undefined;
  lastSuccess?: number | undefined;
  lastError?: number | undefined;
  errorCount?: number | undefined;
  errors?: Array<IntegrationStatusRep> | undefined;
};

/** @internal */
export const IntegrationSubscriptionStatusRep$inboundSchema: z.ZodType<
  IntegrationSubscriptionStatusRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  successCount: z.number().int().optional(),
  lastSuccess: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errorCount: z.number().int().optional(),
  errors: z.array(IntegrationStatusRep$inboundSchema).optional(),
});

/** @internal */
export type IntegrationSubscriptionStatusRep$Outbound = {
  successCount?: number | undefined;
  lastSuccess?: number | undefined;
  lastError?: number | undefined;
  errorCount?: number | undefined;
  errors?: Array<IntegrationStatusRep$Outbound> | undefined;
};

/** @internal */
export const IntegrationSubscriptionStatusRep$outboundSchema: z.ZodType<
  IntegrationSubscriptionStatusRep$Outbound,
  z.ZodTypeDef,
  IntegrationSubscriptionStatusRep
> = z.object({
  successCount: z.number().int().optional(),
  lastSuccess: z.number().int().optional(),
  lastError: z.number().int().optional(),
  errorCount: z.number().int().optional(),
  errors: z.array(IntegrationStatusRep$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationSubscriptionStatusRep$ {
  /** @deprecated use `IntegrationSubscriptionStatusRep$inboundSchema` instead. */
  export const inboundSchema = IntegrationSubscriptionStatusRep$inboundSchema;
  /** @deprecated use `IntegrationSubscriptionStatusRep$outboundSchema` instead. */
  export const outboundSchema = IntegrationSubscriptionStatusRep$outboundSchema;
  /** @deprecated use `IntegrationSubscriptionStatusRep$Outbound` instead. */
  export type Outbound = IntegrationSubscriptionStatusRep$Outbound;
}

export function integrationSubscriptionStatusRepToJSON(
  integrationSubscriptionStatusRep: IntegrationSubscriptionStatusRep,
): string {
  return JSON.stringify(
    IntegrationSubscriptionStatusRep$outboundSchema.parse(
      integrationSubscriptionStatusRep,
    ),
  );
}

export function integrationSubscriptionStatusRepFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationSubscriptionStatusRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationSubscriptionStatusRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationSubscriptionStatusRep' from JSON`,
  );
}
