/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlagReferenceRep,
  FlagReferenceRep$inboundSchema,
  FlagReferenceRep$Outbound,
  FlagReferenceRep$outboundSchema,
} from "./flagreferencerep.js";

export type FlagReferenceCollectionRep = {
  /**
   * The total number of flag references
   */
  totalCount: number;
  /**
   * A list of flag references
   */
  items: Array<FlagReferenceRep>;
};

/** @internal */
export const FlagReferenceCollectionRep$inboundSchema: z.ZodType<
  FlagReferenceCollectionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int(),
  items: z.array(FlagReferenceRep$inboundSchema),
});

/** @internal */
export type FlagReferenceCollectionRep$Outbound = {
  totalCount: number;
  items: Array<FlagReferenceRep$Outbound>;
};

/** @internal */
export const FlagReferenceCollectionRep$outboundSchema: z.ZodType<
  FlagReferenceCollectionRep$Outbound,
  z.ZodTypeDef,
  FlagReferenceCollectionRep
> = z.object({
  totalCount: z.number().int(),
  items: z.array(FlagReferenceRep$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagReferenceCollectionRep$ {
  /** @deprecated use `FlagReferenceCollectionRep$inboundSchema` instead. */
  export const inboundSchema = FlagReferenceCollectionRep$inboundSchema;
  /** @deprecated use `FlagReferenceCollectionRep$outboundSchema` instead. */
  export const outboundSchema = FlagReferenceCollectionRep$outboundSchema;
  /** @deprecated use `FlagReferenceCollectionRep$Outbound` instead. */
  export type Outbound = FlagReferenceCollectionRep$Outbound;
}

export function flagReferenceCollectionRepToJSON(
  flagReferenceCollectionRep: FlagReferenceCollectionRep,
): string {
  return JSON.stringify(
    FlagReferenceCollectionRep$outboundSchema.parse(flagReferenceCollectionRep),
  );
}

export function flagReferenceCollectionRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagReferenceCollectionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagReferenceCollectionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagReferenceCollectionRep' from JSON`,
  );
}
