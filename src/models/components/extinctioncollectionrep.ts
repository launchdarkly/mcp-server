/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Extinction,
  Extinction$inboundSchema,
  Extinction$Outbound,
  Extinction$outboundSchema,
} from "./extinction.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ExtinctionCollectionRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * An array of extinction events
   */
  items: { [k: string]: Array<Extinction> };
};

/** @internal */
export const ExtinctionCollectionRep$inboundSchema: z.ZodType<
  ExtinctionCollectionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  items: z.record(z.array(Extinction$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ExtinctionCollectionRep$Outbound = {
  _links: { [k: string]: Link$Outbound };
  items: { [k: string]: Array<Extinction$Outbound> };
};

/** @internal */
export const ExtinctionCollectionRep$outboundSchema: z.ZodType<
  ExtinctionCollectionRep$Outbound,
  z.ZodTypeDef,
  ExtinctionCollectionRep
> = z.object({
  links: z.record(Link$outboundSchema),
  items: z.record(z.array(Extinction$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtinctionCollectionRep$ {
  /** @deprecated use `ExtinctionCollectionRep$inboundSchema` instead. */
  export const inboundSchema = ExtinctionCollectionRep$inboundSchema;
  /** @deprecated use `ExtinctionCollectionRep$outboundSchema` instead. */
  export const outboundSchema = ExtinctionCollectionRep$outboundSchema;
  /** @deprecated use `ExtinctionCollectionRep$Outbound` instead. */
  export type Outbound = ExtinctionCollectionRep$Outbound;
}

export function extinctionCollectionRepToJSON(
  extinctionCollectionRep: ExtinctionCollectionRep,
): string {
  return JSON.stringify(
    ExtinctionCollectionRep$outboundSchema.parse(extinctionCollectionRep),
  );
}

export function extinctionCollectionRepFromJSON(
  jsonString: string,
): SafeParseResult<ExtinctionCollectionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtinctionCollectionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtinctionCollectionRep' from JSON`,
  );
}
