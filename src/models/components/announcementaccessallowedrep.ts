/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementAccessAllowedReason,
  AnnouncementAccessAllowedReason$inboundSchema,
  AnnouncementAccessAllowedReason$Outbound,
  AnnouncementAccessAllowedReason$outboundSchema,
} from "./announcementaccessallowedreason.js";

export type AnnouncementAccessAllowedRep = {
  action: string;
  reason: AnnouncementAccessAllowedReason;
};

/** @internal */
export const AnnouncementAccessAllowedRep$inboundSchema: z.ZodType<
  AnnouncementAccessAllowedRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  reason: AnnouncementAccessAllowedReason$inboundSchema,
});

/** @internal */
export type AnnouncementAccessAllowedRep$Outbound = {
  action: string;
  reason: AnnouncementAccessAllowedReason$Outbound;
};

/** @internal */
export const AnnouncementAccessAllowedRep$outboundSchema: z.ZodType<
  AnnouncementAccessAllowedRep$Outbound,
  z.ZodTypeDef,
  AnnouncementAccessAllowedRep
> = z.object({
  action: z.string(),
  reason: AnnouncementAccessAllowedReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementAccessAllowedRep$ {
  /** @deprecated use `AnnouncementAccessAllowedRep$inboundSchema` instead. */
  export const inboundSchema = AnnouncementAccessAllowedRep$inboundSchema;
  /** @deprecated use `AnnouncementAccessAllowedRep$outboundSchema` instead. */
  export const outboundSchema = AnnouncementAccessAllowedRep$outboundSchema;
  /** @deprecated use `AnnouncementAccessAllowedRep$Outbound` instead. */
  export type Outbound = AnnouncementAccessAllowedRep$Outbound;
}

export function announcementAccessAllowedRepToJSON(
  announcementAccessAllowedRep: AnnouncementAccessAllowedRep,
): string {
  return JSON.stringify(
    AnnouncementAccessAllowedRep$outboundSchema.parse(
      announcementAccessAllowedRep,
    ),
  );
}

export function announcementAccessAllowedRepFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementAccessAllowedRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementAccessAllowedRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementAccessAllowedRep' from JSON`,
  );
}
