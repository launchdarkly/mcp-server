/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SourceEnv,
  SourceEnv$inboundSchema,
  SourceEnv$Outbound,
  SourceEnv$outboundSchema,
} from "./sourceenv.js";

export type EnvironmentPost = {
  /**
   * A human-friendly name for the new environment
   */
  name: string;
  /**
   * A project-unique key for the new environment
   */
  key: string;
  /**
   * A color to indicate this environment in the UI
   */
  color: string;
  /**
   * The default time (in minutes) that the PHP SDK can cache feature flag rules locally
   */
  defaultTtl?: number | undefined;
  /**
   * Ensures that one end user of the client-side SDK cannot inspect the variations for another end user
   */
  secureMode?: boolean | undefined;
  /**
   * Enables tracking detailed information for new flags by default
   */
  defaultTrackEvents?: boolean | undefined;
  /**
   * Requires confirmation for all flag and segment changes via the UI in this environment
   */
  confirmChanges?: boolean | undefined;
  /**
   * Requires comments for all flag and segment changes via the UI in this environment
   */
  requireComments?: boolean | undefined;
  /**
   * Tags to apply to the new environment
   */
  tags?: Array<string> | undefined;
  source?: SourceEnv | undefined;
  /**
   * Whether the environment is critical
   */
  critical?: boolean | undefined;
};

/** @internal */
export const EnvironmentPost$inboundSchema: z.ZodType<
  EnvironmentPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  color: z.string(),
  defaultTtl: z.number().int().optional(),
  secureMode: z.boolean().optional(),
  defaultTrackEvents: z.boolean().optional(),
  confirmChanges: z.boolean().optional(),
  requireComments: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  source: SourceEnv$inboundSchema.optional(),
  critical: z.boolean().optional(),
});

/** @internal */
export type EnvironmentPost$Outbound = {
  name: string;
  key: string;
  color: string;
  defaultTtl?: number | undefined;
  secureMode?: boolean | undefined;
  defaultTrackEvents?: boolean | undefined;
  confirmChanges?: boolean | undefined;
  requireComments?: boolean | undefined;
  tags?: Array<string> | undefined;
  source?: SourceEnv$Outbound | undefined;
  critical?: boolean | undefined;
};

/** @internal */
export const EnvironmentPost$outboundSchema: z.ZodType<
  EnvironmentPost$Outbound,
  z.ZodTypeDef,
  EnvironmentPost
> = z.object({
  name: z.string(),
  key: z.string(),
  color: z.string(),
  defaultTtl: z.number().int().optional(),
  secureMode: z.boolean().optional(),
  defaultTrackEvents: z.boolean().optional(),
  confirmChanges: z.boolean().optional(),
  requireComments: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  source: SourceEnv$outboundSchema.optional(),
  critical: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentPost$ {
  /** @deprecated use `EnvironmentPost$inboundSchema` instead. */
  export const inboundSchema = EnvironmentPost$inboundSchema;
  /** @deprecated use `EnvironmentPost$outboundSchema` instead. */
  export const outboundSchema = EnvironmentPost$outboundSchema;
  /** @deprecated use `EnvironmentPost$Outbound` instead. */
  export type Outbound = EnvironmentPost$Outbound;
}

export function environmentPostToJSON(
  environmentPost: EnvironmentPost,
): string {
  return JSON.stringify(EnvironmentPost$outboundSchema.parse(environmentPost));
}

export function environmentPostFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentPost' from JSON`,
  );
}
