/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AiConfigsMaintainerTeam = {
  key: string;
  name: string;
  kind: string;
};

export type MaintainerMember = {
  id: string;
  email: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  role: string;
  kind: string;
};

export type AIConfigMaintainer = AiConfigsMaintainerTeam | MaintainerMember;

/** @internal */
export const AiConfigsMaintainerTeam$inboundSchema: z.ZodType<
  AiConfigsMaintainerTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
  kind: z.string(),
});

/** @internal */
export type AiConfigsMaintainerTeam$Outbound = {
  key: string;
  name: string;
  kind: string;
};

/** @internal */
export const AiConfigsMaintainerTeam$outboundSchema: z.ZodType<
  AiConfigsMaintainerTeam$Outbound,
  z.ZodTypeDef,
  AiConfigsMaintainerTeam
> = z.object({
  key: z.string(),
  name: z.string(),
  kind: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiConfigsMaintainerTeam$ {
  /** @deprecated use `AiConfigsMaintainerTeam$inboundSchema` instead. */
  export const inboundSchema = AiConfigsMaintainerTeam$inboundSchema;
  /** @deprecated use `AiConfigsMaintainerTeam$outboundSchema` instead. */
  export const outboundSchema = AiConfigsMaintainerTeam$outboundSchema;
  /** @deprecated use `AiConfigsMaintainerTeam$Outbound` instead. */
  export type Outbound = AiConfigsMaintainerTeam$Outbound;
}

export function aiConfigsMaintainerTeamToJSON(
  aiConfigsMaintainerTeam: AiConfigsMaintainerTeam,
): string {
  return JSON.stringify(
    AiConfigsMaintainerTeam$outboundSchema.parse(aiConfigsMaintainerTeam),
  );
}

export function aiConfigsMaintainerTeamFromJSON(
  jsonString: string,
): SafeParseResult<AiConfigsMaintainerTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiConfigsMaintainerTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiConfigsMaintainerTeam' from JSON`,
  );
}

/** @internal */
export const MaintainerMember$inboundSchema: z.ZodType<
  MaintainerMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  email: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: z.string(),
  kind: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type MaintainerMember$Outbound = {
  _id: string;
  email: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  role: string;
  kind: string;
};

/** @internal */
export const MaintainerMember$outboundSchema: z.ZodType<
  MaintainerMember$Outbound,
  z.ZodTypeDef,
  MaintainerMember
> = z.object({
  id: z.string(),
  email: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  role: z.string(),
  kind: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaintainerMember$ {
  /** @deprecated use `MaintainerMember$inboundSchema` instead. */
  export const inboundSchema = MaintainerMember$inboundSchema;
  /** @deprecated use `MaintainerMember$outboundSchema` instead. */
  export const outboundSchema = MaintainerMember$outboundSchema;
  /** @deprecated use `MaintainerMember$Outbound` instead. */
  export type Outbound = MaintainerMember$Outbound;
}

export function maintainerMemberToJSON(
  maintainerMember: MaintainerMember,
): string {
  return JSON.stringify(
    MaintainerMember$outboundSchema.parse(maintainerMember),
  );
}

export function maintainerMemberFromJSON(
  jsonString: string,
): SafeParseResult<MaintainerMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaintainerMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaintainerMember' from JSON`,
  );
}

/** @internal */
export const AIConfigMaintainer$inboundSchema: z.ZodType<
  AIConfigMaintainer,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AiConfigsMaintainerTeam$inboundSchema),
  z.lazy(() => MaintainerMember$inboundSchema),
]);

/** @internal */
export type AIConfigMaintainer$Outbound =
  | AiConfigsMaintainerTeam$Outbound
  | MaintainerMember$Outbound;

/** @internal */
export const AIConfigMaintainer$outboundSchema: z.ZodType<
  AIConfigMaintainer$Outbound,
  z.ZodTypeDef,
  AIConfigMaintainer
> = z.union([
  z.lazy(() => AiConfigsMaintainerTeam$outboundSchema),
  z.lazy(() => MaintainerMember$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigMaintainer$ {
  /** @deprecated use `AIConfigMaintainer$inboundSchema` instead. */
  export const inboundSchema = AIConfigMaintainer$inboundSchema;
  /** @deprecated use `AIConfigMaintainer$outboundSchema` instead. */
  export const outboundSchema = AIConfigMaintainer$outboundSchema;
  /** @deprecated use `AIConfigMaintainer$Outbound` instead. */
  export type Outbound = AIConfigMaintainer$Outbound;
}

export function aiConfigMaintainerToJSON(
  aiConfigMaintainer: AIConfigMaintainer,
): string {
  return JSON.stringify(
    AIConfigMaintainer$outboundSchema.parse(aiConfigMaintainer),
  );
}

export function aiConfigMaintainerFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigMaintainer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigMaintainer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigMaintainer' from JSON`,
  );
}
