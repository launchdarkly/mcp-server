/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FlagValue = {};

/**
 * value of a feature flag variation
 */
export type FlagValueUnion = FlagValue | string | boolean | number;

/** @internal */
export const FlagValue$inboundSchema: z.ZodType<
  FlagValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FlagValue$Outbound = {};

/** @internal */
export const FlagValue$outboundSchema: z.ZodType<
  FlagValue$Outbound,
  z.ZodTypeDef,
  FlagValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagValue$ {
  /** @deprecated use `FlagValue$inboundSchema` instead. */
  export const inboundSchema = FlagValue$inboundSchema;
  /** @deprecated use `FlagValue$outboundSchema` instead. */
  export const outboundSchema = FlagValue$outboundSchema;
  /** @deprecated use `FlagValue$Outbound` instead. */
  export type Outbound = FlagValue$Outbound;
}

export function flagValueToJSON(flagValue: FlagValue): string {
  return JSON.stringify(FlagValue$outboundSchema.parse(flagValue));
}

export function flagValueFromJSON(
  jsonString: string,
): SafeParseResult<FlagValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagValue' from JSON`,
  );
}

/** @internal */
export const FlagValueUnion$inboundSchema: z.ZodType<
  FlagValueUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FlagValue$inboundSchema),
  z.string(),
  z.boolean(),
  z.number(),
]);

/** @internal */
export type FlagValueUnion$Outbound =
  | FlagValue$Outbound
  | string
  | boolean
  | number;

/** @internal */
export const FlagValueUnion$outboundSchema: z.ZodType<
  FlagValueUnion$Outbound,
  z.ZodTypeDef,
  FlagValueUnion
> = z.union([
  z.lazy(() => FlagValue$outboundSchema),
  z.string(),
  z.boolean(),
  z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagValueUnion$ {
  /** @deprecated use `FlagValueUnion$inboundSchema` instead. */
  export const inboundSchema = FlagValueUnion$inboundSchema;
  /** @deprecated use `FlagValueUnion$outboundSchema` instead. */
  export const outboundSchema = FlagValueUnion$outboundSchema;
  /** @deprecated use `FlagValueUnion$Outbound` instead. */
  export type Outbound = FlagValueUnion$Outbound;
}

export function flagValueUnionToJSON(flagValueUnion: FlagValueUnion): string {
  return JSON.stringify(FlagValueUnion$outboundSchema.parse(flagValueUnion));
}

export function flagValueUnionFromJSON(
  jsonString: string,
): SafeParseResult<FlagValueUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagValueUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagValueUnion' from JSON`,
  );
}
