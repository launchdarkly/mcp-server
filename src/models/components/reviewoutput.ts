/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReviewOutput = {
  id: string;
  kind: string;
  creationDate?: number | undefined;
  comment?: string | undefined;
  memberId?: string | undefined;
  serviceTokenId?: string | undefined;
};

/** @internal */
export const ReviewOutput$inboundSchema: z.ZodType<
  ReviewOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  kind: z.string(),
  creationDate: z.number().int().optional(),
  comment: z.string().optional(),
  memberId: z.string().optional(),
  serviceTokenId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type ReviewOutput$Outbound = {
  _id: string;
  kind: string;
  creationDate?: number | undefined;
  comment?: string | undefined;
  memberId?: string | undefined;
  serviceTokenId?: string | undefined;
};

/** @internal */
export const ReviewOutput$outboundSchema: z.ZodType<
  ReviewOutput$Outbound,
  z.ZodTypeDef,
  ReviewOutput
> = z.object({
  id: z.string(),
  kind: z.string(),
  creationDate: z.number().int().optional(),
  comment: z.string().optional(),
  memberId: z.string().optional(),
  serviceTokenId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewOutput$ {
  /** @deprecated use `ReviewOutput$inboundSchema` instead. */
  export const inboundSchema = ReviewOutput$inboundSchema;
  /** @deprecated use `ReviewOutput$outboundSchema` instead. */
  export const outboundSchema = ReviewOutput$outboundSchema;
  /** @deprecated use `ReviewOutput$Outbound` instead. */
  export type Outbound = ReviewOutput$Outbound;
}

export function reviewOutputToJSON(reviewOutput: ReviewOutput): string {
  return JSON.stringify(ReviewOutput$outboundSchema.parse(reviewOutput));
}

export function reviewOutputFromJSON(
  jsonString: string,
): SafeParseResult<ReviewOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReviewOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReviewOutput' from JSON`,
  );
}
