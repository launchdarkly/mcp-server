/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BooleanFlagDefaults = {
  /**
   * The display name for the true variation, displayed in the LaunchDarkly user interface
   */
  trueDisplayName: string;
  /**
   * The display name for the false variation, displayed in the LaunchDarkly user interface
   */
  falseDisplayName: string;
  /**
   * The description for the true variation
   */
  trueDescription: string;
  /**
   * The description for the false variation
   */
  falseDescription: string;
  /**
   * The variation index of the flag variation to use for the default targeting behavior when a flag's targeting is on and the target did not match any rules
   */
  onVariation: number;
  /**
   * The variation index of the flag variation to use for the default targeting behavior when a flag's targeting is off
   */
  offVariation: number;
};

/** @internal */
export const BooleanFlagDefaults$inboundSchema: z.ZodType<
  BooleanFlagDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  trueDisplayName: z.string(),
  falseDisplayName: z.string(),
  trueDescription: z.string(),
  falseDescription: z.string(),
  onVariation: z.number().int(),
  offVariation: z.number().int(),
});

/** @internal */
export type BooleanFlagDefaults$Outbound = {
  trueDisplayName: string;
  falseDisplayName: string;
  trueDescription: string;
  falseDescription: string;
  onVariation: number;
  offVariation: number;
};

/** @internal */
export const BooleanFlagDefaults$outboundSchema: z.ZodType<
  BooleanFlagDefaults$Outbound,
  z.ZodTypeDef,
  BooleanFlagDefaults
> = z.object({
  trueDisplayName: z.string(),
  falseDisplayName: z.string(),
  trueDescription: z.string(),
  falseDescription: z.string(),
  onVariation: z.number().int(),
  offVariation: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BooleanFlagDefaults$ {
  /** @deprecated use `BooleanFlagDefaults$inboundSchema` instead. */
  export const inboundSchema = BooleanFlagDefaults$inboundSchema;
  /** @deprecated use `BooleanFlagDefaults$outboundSchema` instead. */
  export const outboundSchema = BooleanFlagDefaults$outboundSchema;
  /** @deprecated use `BooleanFlagDefaults$Outbound` instead. */
  export type Outbound = BooleanFlagDefaults$Outbound;
}

export function booleanFlagDefaultsToJSON(
  booleanFlagDefaults: BooleanFlagDefaults,
): string {
  return JSON.stringify(
    BooleanFlagDefaults$outboundSchema.parse(booleanFlagDefaults),
  );
}

export function booleanFlagDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<BooleanFlagDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BooleanFlagDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BooleanFlagDefaults' from JSON`,
  );
}
