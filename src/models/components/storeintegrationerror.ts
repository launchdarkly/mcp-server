/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StoreIntegrationError = {
  statusCode?: number | undefined;
  message?: string | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const StoreIntegrationError$inboundSchema: z.ZodType<
  StoreIntegrationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number().int().optional(),
  message: z.string().optional(),
  timestamp: z.number().int().optional(),
});

/** @internal */
export type StoreIntegrationError$Outbound = {
  statusCode?: number | undefined;
  message?: string | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const StoreIntegrationError$outboundSchema: z.ZodType<
  StoreIntegrationError$Outbound,
  z.ZodTypeDef,
  StoreIntegrationError
> = z.object({
  statusCode: z.number().int().optional(),
  message: z.string().optional(),
  timestamp: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoreIntegrationError$ {
  /** @deprecated use `StoreIntegrationError$inboundSchema` instead. */
  export const inboundSchema = StoreIntegrationError$inboundSchema;
  /** @deprecated use `StoreIntegrationError$outboundSchema` instead. */
  export const outboundSchema = StoreIntegrationError$outboundSchema;
  /** @deprecated use `StoreIntegrationError$Outbound` instead. */
  export type Outbound = StoreIntegrationError$Outbound;
}

export function storeIntegrationErrorToJSON(
  storeIntegrationError: StoreIntegrationError,
): string {
  return JSON.stringify(
    StoreIntegrationError$outboundSchema.parse(storeIntegrationError),
  );
}

export function storeIntegrationErrorFromJSON(
  jsonString: string,
): SafeParseResult<StoreIntegrationError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoreIntegrationError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoreIntegrationError' from JSON`,
  );
}
