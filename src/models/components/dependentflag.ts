/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type DependentFlag = {
  /**
   * The flag name
   */
  name?: string | undefined;
  /**
   * The flag key
   */
  key: string;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  site: Link;
};

/** @internal */
export const DependentFlag$inboundSchema: z.ZodType<
  DependentFlag,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  _links: z.record(Link$inboundSchema),
  _site: Link$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_site": "site",
  });
});

/** @internal */
export type DependentFlag$Outbound = {
  name?: string | undefined;
  key: string;
  _links: { [k: string]: Link$Outbound };
  _site: Link$Outbound;
};

/** @internal */
export const DependentFlag$outboundSchema: z.ZodType<
  DependentFlag$Outbound,
  z.ZodTypeDef,
  DependentFlag
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  links: z.record(Link$outboundSchema),
  site: Link$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    site: "_site",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DependentFlag$ {
  /** @deprecated use `DependentFlag$inboundSchema` instead. */
  export const inboundSchema = DependentFlag$inboundSchema;
  /** @deprecated use `DependentFlag$outboundSchema` instead. */
  export const outboundSchema = DependentFlag$outboundSchema;
  /** @deprecated use `DependentFlag$Outbound` instead. */
  export type Outbound = DependentFlag$Outbound;
}

export function dependentFlagToJSON(dependentFlag: DependentFlag): string {
  return JSON.stringify(DependentFlag$outboundSchema.parse(dependentFlag));
}

export function dependentFlagFromJSON(
  jsonString: string,
): SafeParseResult<DependentFlag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DependentFlag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DependentFlag' from JSON`,
  );
}
