/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AiConfigsExperimentInfoRep,
  AiConfigsExperimentInfoRep$inboundSchema,
  AiConfigsExperimentInfoRep$Outbound,
  AiConfigsExperimentInfoRep$outboundSchema,
} from "./aiconfigsexperimentinforep.js";
import {
  AIConfigTargetingDefaults,
  AIConfigTargetingDefaults$inboundSchema,
  AIConfigTargetingDefaults$Outbound,
  AIConfigTargetingDefaults$outboundSchema,
} from "./aiconfigtargetingdefaults.js";
import {
  AIConfigTargetingEnvironment,
  AIConfigTargetingEnvironment$inboundSchema,
  AIConfigTargetingEnvironment$Outbound,
  AIConfigTargetingEnvironment$outboundSchema,
} from "./aiconfigtargetingenvironment.js";
import {
  AIConfigTargetingVariation,
  AIConfigTargetingVariation$inboundSchema,
  AIConfigTargetingVariation$Outbound,
  AIConfigTargetingVariation$outboundSchema,
} from "./aiconfigtargetingvariation.js";

export type AIConfigTargeting = {
  /**
   * Unix timestamp in milliseconds
   */
  createdAt: number;
  defaults?: AIConfigTargetingDefaults | undefined;
  environments: { [k: string]: AIConfigTargetingEnvironment };
  experiments: AiConfigsExperimentInfoRep;
  key: string;
  name: string;
  tags: Array<string>;
  variations: Array<AIConfigTargetingVariation>;
  version: number;
};

/** @internal */
export const AIConfigTargeting$inboundSchema: z.ZodType<
  AIConfigTargeting,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number().int(),
  defaults: AIConfigTargetingDefaults$inboundSchema.optional(),
  environments: z.record(AIConfigTargetingEnvironment$inboundSchema),
  experiments: AiConfigsExperimentInfoRep$inboundSchema,
  key: z.string(),
  name: z.string(),
  tags: z.array(z.string()),
  variations: z.array(AIConfigTargetingVariation$inboundSchema),
  _version: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "_version": "version",
  });
});

/** @internal */
export type AIConfigTargeting$Outbound = {
  createdAt: number;
  defaults?: AIConfigTargetingDefaults$Outbound | undefined;
  environments: { [k: string]: AIConfigTargetingEnvironment$Outbound };
  experiments: AiConfigsExperimentInfoRep$Outbound;
  key: string;
  name: string;
  tags: Array<string>;
  variations: Array<AIConfigTargetingVariation$Outbound>;
  _version: number;
};

/** @internal */
export const AIConfigTargeting$outboundSchema: z.ZodType<
  AIConfigTargeting$Outbound,
  z.ZodTypeDef,
  AIConfigTargeting
> = z.object({
  createdAt: z.number().int(),
  defaults: AIConfigTargetingDefaults$outboundSchema.optional(),
  environments: z.record(AIConfigTargetingEnvironment$outboundSchema),
  experiments: AiConfigsExperimentInfoRep$outboundSchema,
  key: z.string(),
  name: z.string(),
  tags: z.array(z.string()),
  variations: z.array(AIConfigTargetingVariation$outboundSchema),
  version: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    version: "_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AIConfigTargeting$ {
  /** @deprecated use `AIConfigTargeting$inboundSchema` instead. */
  export const inboundSchema = AIConfigTargeting$inboundSchema;
  /** @deprecated use `AIConfigTargeting$outboundSchema` instead. */
  export const outboundSchema = AIConfigTargeting$outboundSchema;
  /** @deprecated use `AIConfigTargeting$Outbound` instead. */
  export type Outbound = AIConfigTargeting$Outbound;
}

export function aiConfigTargetingToJSON(
  aiConfigTargeting: AIConfigTargeting,
): string {
  return JSON.stringify(
    AIConfigTargeting$outboundSchema.parse(aiConfigTargeting),
  );
}

export function aiConfigTargetingFromJSON(
  jsonString: string,
): SafeParseResult<AIConfigTargeting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AIConfigTargeting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AIConfigTargeting' from JSON`,
  );
}
