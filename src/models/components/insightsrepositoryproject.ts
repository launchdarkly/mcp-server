/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsightsRepositoryProject = {
  /**
   * The repository key
   */
  repositoryKey: string;
  /**
   * The project key
   */
  projectKey: string;
};

/** @internal */
export const InsightsRepositoryProject$inboundSchema: z.ZodType<
  InsightsRepositoryProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  repositoryKey: z.string(),
  projectKey: z.string(),
});

/** @internal */
export type InsightsRepositoryProject$Outbound = {
  repositoryKey: string;
  projectKey: string;
};

/** @internal */
export const InsightsRepositoryProject$outboundSchema: z.ZodType<
  InsightsRepositoryProject$Outbound,
  z.ZodTypeDef,
  InsightsRepositoryProject
> = z.object({
  repositoryKey: z.string(),
  projectKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRepositoryProject$ {
  /** @deprecated use `InsightsRepositoryProject$inboundSchema` instead. */
  export const inboundSchema = InsightsRepositoryProject$inboundSchema;
  /** @deprecated use `InsightsRepositoryProject$outboundSchema` instead. */
  export const outboundSchema = InsightsRepositoryProject$outboundSchema;
  /** @deprecated use `InsightsRepositoryProject$Outbound` instead. */
  export type Outbound = InsightsRepositoryProject$Outbound;
}

export function insightsRepositoryProjectToJSON(
  insightsRepositoryProject: InsightsRepositoryProject,
): string {
  return JSON.stringify(
    InsightsRepositoryProject$outboundSchema.parse(insightsRepositoryProject),
  );
}

export function insightsRepositoryProjectFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRepositoryProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsRepositoryProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRepositoryProject' from JSON`,
  );
}
