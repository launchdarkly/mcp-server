/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VariationSummary = {
  rules: number;
  nullRules: number;
  targets: number;
  contextTargets: number;
  isFallthrough?: boolean | undefined;
  isOff?: boolean | undefined;
  rollout?: number | undefined;
  bucketBy?: string | undefined;
};

/** @internal */
export const VariationSummary$inboundSchema: z.ZodType<
  VariationSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  rules: z.number().int(),
  nullRules: z.number().int(),
  targets: z.number().int(),
  contextTargets: z.number().int(),
  isFallthrough: z.boolean().optional(),
  isOff: z.boolean().optional(),
  rollout: z.number().int().optional(),
  bucketBy: z.string().optional(),
});

/** @internal */
export type VariationSummary$Outbound = {
  rules: number;
  nullRules: number;
  targets: number;
  contextTargets: number;
  isFallthrough?: boolean | undefined;
  isOff?: boolean | undefined;
  rollout?: number | undefined;
  bucketBy?: string | undefined;
};

/** @internal */
export const VariationSummary$outboundSchema: z.ZodType<
  VariationSummary$Outbound,
  z.ZodTypeDef,
  VariationSummary
> = z.object({
  rules: z.number().int(),
  nullRules: z.number().int(),
  targets: z.number().int(),
  contextTargets: z.number().int(),
  isFallthrough: z.boolean().optional(),
  isOff: z.boolean().optional(),
  rollout: z.number().int().optional(),
  bucketBy: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariationSummary$ {
  /** @deprecated use `VariationSummary$inboundSchema` instead. */
  export const inboundSchema = VariationSummary$inboundSchema;
  /** @deprecated use `VariationSummary$outboundSchema` instead. */
  export const outboundSchema = VariationSummary$outboundSchema;
  /** @deprecated use `VariationSummary$Outbound` instead. */
  export type Outbound = VariationSummary$Outbound;
}

export function variationSummaryToJSON(
  variationSummary: VariationSummary,
): string {
  return JSON.stringify(
    VariationSummary$outboundSchema.parse(variationSummary),
  );
}

export function variationSummaryFromJSON(
  jsonString: string,
): SafeParseResult<VariationSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariationSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariationSummary' from JSON`,
  );
}
