/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationStatus,
  IntegrationStatus$inboundSchema,
  IntegrationStatus$Outbound,
  IntegrationStatus$outboundSchema,
} from "./integrationstatus.js";

export type IntegrationMetadata = {
  externalId: string;
  externalStatus: IntegrationStatus;
  externalUrl: string;
  lastChecked: number;
};

/** @internal */
export const IntegrationMetadata$inboundSchema: z.ZodType<
  IntegrationMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string(),
  externalStatus: IntegrationStatus$inboundSchema,
  externalUrl: z.string(),
  lastChecked: z.number().int(),
});

/** @internal */
export type IntegrationMetadata$Outbound = {
  externalId: string;
  externalStatus: IntegrationStatus$Outbound;
  externalUrl: string;
  lastChecked: number;
};

/** @internal */
export const IntegrationMetadata$outboundSchema: z.ZodType<
  IntegrationMetadata$Outbound,
  z.ZodTypeDef,
  IntegrationMetadata
> = z.object({
  externalId: z.string(),
  externalStatus: IntegrationStatus$outboundSchema,
  externalUrl: z.string(),
  lastChecked: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationMetadata$ {
  /** @deprecated use `IntegrationMetadata$inboundSchema` instead. */
  export const inboundSchema = IntegrationMetadata$inboundSchema;
  /** @deprecated use `IntegrationMetadata$outboundSchema` instead. */
  export const outboundSchema = IntegrationMetadata$outboundSchema;
  /** @deprecated use `IntegrationMetadata$Outbound` instead. */
  export type Outbound = IntegrationMetadata$Outbound;
}

export function integrationMetadataToJSON(
  integrationMetadata: IntegrationMetadata,
): string {
  return JSON.stringify(
    IntegrationMetadata$outboundSchema.parse(integrationMetadata),
  );
}

export function integrationMetadataFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationMetadata' from JSON`,
  );
}
