/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ReleaseProgression = {
  createdAt: number;
  completedAt?: number | undefined;
  /**
   * The flag key
   */
  flagKey: string;
  /**
   * The ID of the currently active release phase
   */
  activePhaseId?: string | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ReleaseProgression$inboundSchema: z.ZodType<
  ReleaseProgression,
  z.ZodTypeDef,
  unknown
> = z.object({
  _createdAt: z.number().int(),
  _completedAt: z.number().int().optional(),
  flagKey: z.string(),
  activePhaseId: z.string().optional(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_createdAt": "createdAt",
    "_completedAt": "completedAt",
    "_links": "links",
  });
});

/** @internal */
export type ReleaseProgression$Outbound = {
  _createdAt: number;
  _completedAt?: number | undefined;
  flagKey: string;
  activePhaseId?: string | undefined;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const ReleaseProgression$outboundSchema: z.ZodType<
  ReleaseProgression$Outbound,
  z.ZodTypeDef,
  ReleaseProgression
> = z.object({
  createdAt: z.number().int(),
  completedAt: z.number().int().optional(),
  flagKey: z.string(),
  activePhaseId: z.string().optional(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "_createdAt",
    completedAt: "_completedAt",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseProgression$ {
  /** @deprecated use `ReleaseProgression$inboundSchema` instead. */
  export const inboundSchema = ReleaseProgression$inboundSchema;
  /** @deprecated use `ReleaseProgression$outboundSchema` instead. */
  export const outboundSchema = ReleaseProgression$outboundSchema;
  /** @deprecated use `ReleaseProgression$Outbound` instead. */
  export type Outbound = ReleaseProgression$Outbound;
}

export function releaseProgressionToJSON(
  releaseProgression: ReleaseProgression,
): string {
  return JSON.stringify(
    ReleaseProgression$outboundSchema.parse(releaseProgression),
  );
}

export function releaseProgressionFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseProgression, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseProgression$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseProgression' from JSON`,
  );
}
