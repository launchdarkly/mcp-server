/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  AssignedToRep,
  AssignedToRep$inboundSchema,
  AssignedToRep$Outbound,
  AssignedToRep$outboundSchema,
} from "./assignedtorep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Statement,
  Statement$inboundSchema,
  Statement$Outbound,
  Statement$outboundSchema,
} from "./statement.js";

export type CustomRole = {
  /**
   * The ID of the custom role
   */
  id: string;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  access?: Access | undefined;
  /**
   * The description of the custom role
   */
  description?: string | undefined;
  /**
   * The key of the custom role
   */
  key: string;
  /**
   * The name of the custom role
   */
  name: string;
  /**
   * An array of the policies that comprise this custom role
   */
  policy: Array<Statement>;
  basePermissions?: string | undefined;
  resourceCategory?: string | undefined;
  assignedTo?: AssignedToRep | undefined;
  /**
   * If created from a preset, the preset bundle version
   */
  presetBundleVersion?: number | undefined;
  /**
   * If created from a preset, the read-only statements copied from the preset
   */
  presetStatements?: Array<Statement> | undefined;
};

/** @internal */
export const CustomRole$inboundSchema: z.ZodType<
  CustomRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _links: z.record(Link$inboundSchema),
  _access: Access$inboundSchema.optional(),
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  policy: z.array(Statement$inboundSchema),
  basePermissions: z.string().optional(),
  resourceCategory: z.string().optional(),
  assignedTo: AssignedToRep$inboundSchema.optional(),
  _presetBundleVersion: z.number().int().optional(),
  _presetStatements: z.array(Statement$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_links": "links",
    "_access": "access",
    "_presetBundleVersion": "presetBundleVersion",
    "_presetStatements": "presetStatements",
  });
});

/** @internal */
export type CustomRole$Outbound = {
  _id: string;
  _links: { [k: string]: Link$Outbound };
  _access?: Access$Outbound | undefined;
  description?: string | undefined;
  key: string;
  name: string;
  policy: Array<Statement$Outbound>;
  basePermissions?: string | undefined;
  resourceCategory?: string | undefined;
  assignedTo?: AssignedToRep$Outbound | undefined;
  _presetBundleVersion?: number | undefined;
  _presetStatements?: Array<Statement$Outbound> | undefined;
};

/** @internal */
export const CustomRole$outboundSchema: z.ZodType<
  CustomRole$Outbound,
  z.ZodTypeDef,
  CustomRole
> = z.object({
  id: z.string(),
  links: z.record(Link$outboundSchema),
  access: Access$outboundSchema.optional(),
  description: z.string().optional(),
  key: z.string(),
  name: z.string(),
  policy: z.array(Statement$outboundSchema),
  basePermissions: z.string().optional(),
  resourceCategory: z.string().optional(),
  assignedTo: AssignedToRep$outboundSchema.optional(),
  presetBundleVersion: z.number().int().optional(),
  presetStatements: z.array(Statement$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    links: "_links",
    access: "_access",
    presetBundleVersion: "_presetBundleVersion",
    presetStatements: "_presetStatements",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomRole$ {
  /** @deprecated use `CustomRole$inboundSchema` instead. */
  export const inboundSchema = CustomRole$inboundSchema;
  /** @deprecated use `CustomRole$outboundSchema` instead. */
  export const outboundSchema = CustomRole$outboundSchema;
  /** @deprecated use `CustomRole$Outbound` instead. */
  export type Outbound = CustomRole$Outbound;
}

export function customRoleToJSON(customRole: CustomRole): string {
  return JSON.stringify(CustomRole$outboundSchema.parse(customRole));
}

export function customRoleFromJSON(
  jsonString: string,
): SafeParseResult<CustomRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomRole' from JSON`,
  );
}
