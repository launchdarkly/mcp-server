/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VariationEvalSummary = {
  /**
   * The variation value
   */
  value?: any | undefined;
  /**
   * The number of evaluations in the ten minutes before the flag event
   */
  before?: number | undefined;
  /**
   * The number of evaluations in the ten minutes after the flag event
   */
  after?: number | undefined;
};

/** @internal */
export const VariationEvalSummary$inboundSchema: z.ZodType<
  VariationEvalSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.any().optional(),
  before: z.number().int().optional(),
  after: z.number().int().optional(),
});

/** @internal */
export type VariationEvalSummary$Outbound = {
  value?: any | undefined;
  before?: number | undefined;
  after?: number | undefined;
};

/** @internal */
export const VariationEvalSummary$outboundSchema: z.ZodType<
  VariationEvalSummary$Outbound,
  z.ZodTypeDef,
  VariationEvalSummary
> = z.object({
  value: z.any().optional(),
  before: z.number().int().optional(),
  after: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariationEvalSummary$ {
  /** @deprecated use `VariationEvalSummary$inboundSchema` instead. */
  export const inboundSchema = VariationEvalSummary$inboundSchema;
  /** @deprecated use `VariationEvalSummary$outboundSchema` instead. */
  export const outboundSchema = VariationEvalSummary$outboundSchema;
  /** @deprecated use `VariationEvalSummary$Outbound` instead. */
  export type Outbound = VariationEvalSummary$Outbound;
}

export function variationEvalSummaryToJSON(
  variationEvalSummary: VariationEvalSummary,
): string {
  return JSON.stringify(
    VariationEvalSummary$outboundSchema.parse(variationEvalSummary),
  );
}

export function variationEvalSummaryFromJSON(
  jsonString: string,
): SafeParseResult<VariationEvalSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariationEvalSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariationEvalSummary' from JSON`,
  );
}
