/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsMetricTierDefinition,
  InsightsMetricTierDefinition$inboundSchema,
  InsightsMetricTierDefinition$Outbound,
  InsightsMetricTierDefinition$outboundSchema,
} from "./insightsmetrictierdefinition.js";

export type InsightsChartMetric = {
  /**
   * Metric indicator tier
   */
  indicator: string;
  /**
   * Metric value
   */
  value: number;
  /**
   * Metric unit
   */
  unit: string;
  /**
   * Metric modifier
   */
  modifier: string;
  /**
   * Metric indicator tiers
   */
  tiers: Array<InsightsMetricTierDefinition>;
};

/** @internal */
export const InsightsChartMetric$inboundSchema: z.ZodType<
  InsightsChartMetric,
  z.ZodTypeDef,
  unknown
> = z.object({
  indicator: z.string(),
  value: z.number(),
  unit: z.string(),
  modifier: z.string(),
  tiers: z.array(InsightsMetricTierDefinition$inboundSchema),
});

/** @internal */
export type InsightsChartMetric$Outbound = {
  indicator: string;
  value: number;
  unit: string;
  modifier: string;
  tiers: Array<InsightsMetricTierDefinition$Outbound>;
};

/** @internal */
export const InsightsChartMetric$outboundSchema: z.ZodType<
  InsightsChartMetric$Outbound,
  z.ZodTypeDef,
  InsightsChartMetric
> = z.object({
  indicator: z.string(),
  value: z.number(),
  unit: z.string(),
  modifier: z.string(),
  tiers: z.array(InsightsMetricTierDefinition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsChartMetric$ {
  /** @deprecated use `InsightsChartMetric$inboundSchema` instead. */
  export const inboundSchema = InsightsChartMetric$inboundSchema;
  /** @deprecated use `InsightsChartMetric$outboundSchema` instead. */
  export const outboundSchema = InsightsChartMetric$outboundSchema;
  /** @deprecated use `InsightsChartMetric$Outbound` instead. */
  export type Outbound = InsightsChartMetric$Outbound;
}

export function insightsChartMetricToJSON(
  insightsChartMetric: InsightsChartMetric,
): string {
  return JSON.stringify(
    InsightsChartMetric$outboundSchema.parse(insightsChartMetric),
  );
}

export function insightsChartMetricFromJSON(
  jsonString: string,
): SafeParseResult<InsightsChartMetric, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsChartMetric$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsChartMetric' from JSON`,
  );
}
