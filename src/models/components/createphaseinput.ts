/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AudiencePost,
  AudiencePost$inboundSchema,
  AudiencePost$Outbound,
  AudiencePost$outboundSchema,
} from "./audiencepost.js";
import {
  PhaseConfiguration,
  PhaseConfiguration$inboundSchema,
  PhaseConfiguration$Outbound,
  PhaseConfiguration$outboundSchema,
} from "./phaseconfiguration.js";

export type CreatePhaseInput = {
  /**
   * An ordered list of the audiences for this release phase. Each audience corresponds to a LaunchDarkly environment.
   */
  audiences: Array<AudiencePost>;
  /**
   * The release phase name
   */
  name: string;
  configuration?: PhaseConfiguration | undefined;
};

/** @internal */
export const CreatePhaseInput$inboundSchema: z.ZodType<
  CreatePhaseInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  audiences: z.array(AudiencePost$inboundSchema),
  name: z.string(),
  configuration: PhaseConfiguration$inboundSchema.optional(),
});

/** @internal */
export type CreatePhaseInput$Outbound = {
  audiences: Array<AudiencePost$Outbound>;
  name: string;
  configuration?: PhaseConfiguration$Outbound | undefined;
};

/** @internal */
export const CreatePhaseInput$outboundSchema: z.ZodType<
  CreatePhaseInput$Outbound,
  z.ZodTypeDef,
  CreatePhaseInput
> = z.object({
  audiences: z.array(AudiencePost$outboundSchema),
  name: z.string(),
  configuration: PhaseConfiguration$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePhaseInput$ {
  /** @deprecated use `CreatePhaseInput$inboundSchema` instead. */
  export const inboundSchema = CreatePhaseInput$inboundSchema;
  /** @deprecated use `CreatePhaseInput$outboundSchema` instead. */
  export const outboundSchema = CreatePhaseInput$outboundSchema;
  /** @deprecated use `CreatePhaseInput$Outbound` instead. */
  export type Outbound = CreatePhaseInput$Outbound;
}

export function createPhaseInputToJSON(
  createPhaseInput: CreatePhaseInput,
): string {
  return JSON.stringify(
    CreatePhaseInput$outboundSchema.parse(createPhaseInput),
  );
}

export function createPhaseInputFromJSON(
  jsonString: string,
): SafeParseResult<CreatePhaseInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePhaseInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePhaseInput' from JSON`,
  );
}
