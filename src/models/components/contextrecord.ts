/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ContextRecord = {
  /**
   * Timestamp of the last time an evaluation occurred for this context
   */
  lastSeen?: Date | undefined;
  /**
   * An identifier representing the application where the LaunchDarkly SDK is running
   */
  applicationId?: string | undefined;
  /**
   * The context, including its kind and attributes
   */
  context?: any | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  access?: Access | undefined;
  /**
   * The total number of associated contexts. Associated contexts are contexts that have appeared in the same context instance, that is, they were part of the same flag evaluation.
   */
  associatedContexts?: number | undefined;
};

/** @internal */
export const ContextRecord$inboundSchema: z.ZodType<
  ContextRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastSeen: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  applicationId: z.string().optional(),
  context: z.any().optional(),
  _links: z.record(Link$inboundSchema).optional(),
  _access: Access$inboundSchema.optional(),
  associatedContexts: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_access": "access",
  });
});

/** @internal */
export type ContextRecord$Outbound = {
  lastSeen?: string | undefined;
  applicationId?: string | undefined;
  context?: any | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _access?: Access$Outbound | undefined;
  associatedContexts?: number | undefined;
};

/** @internal */
export const ContextRecord$outboundSchema: z.ZodType<
  ContextRecord$Outbound,
  z.ZodTypeDef,
  ContextRecord
> = z.object({
  lastSeen: z.date().transform(v => v.toISOString()).optional(),
  applicationId: z.string().optional(),
  context: z.any().optional(),
  links: z.record(Link$outboundSchema).optional(),
  access: Access$outboundSchema.optional(),
  associatedContexts: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextRecord$ {
  /** @deprecated use `ContextRecord$inboundSchema` instead. */
  export const inboundSchema = ContextRecord$inboundSchema;
  /** @deprecated use `ContextRecord$outboundSchema` instead. */
  export const outboundSchema = ContextRecord$outboundSchema;
  /** @deprecated use `ContextRecord$Outbound` instead. */
  export type Outbound = ContextRecord$Outbound;
}

export function contextRecordToJSON(contextRecord: ContextRecord): string {
  return JSON.stringify(ContextRecord$outboundSchema.parse(contextRecord));
}

export function contextRecordFromJSON(
  jsonString: string,
): SafeParseResult<ContextRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextRecord' from JSON`,
  );
}
