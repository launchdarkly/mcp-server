/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContextInstanceRecord,
  ContextInstanceRecord$inboundSchema,
  ContextInstanceRecord$Outbound,
  ContextInstanceRecord$outboundSchema,
} from "./contextinstancerecord.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ContextInstances = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The number of unique context instances
   */
  totalCount?: number | undefined;
  /**
   * The environment ID
   */
  environmentId: string;
  /**
   * An obfuscated string that references the last context instance on the previous page of results. You can use this for pagination, however, we recommend using the <code>next</code> link instead.
   */
  continuationToken?: string | undefined;
  /**
   * A collection of context instances. Can include multiple versions of context instances that have the same <code>id</code>, but different <code>applicationId</code>s.
   */
  items: Array<ContextInstanceRecord>;
};

/** @internal */
export const ContextInstances$inboundSchema: z.ZodType<
  ContextInstances,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  totalCount: z.number().int().optional(),
  _environmentId: z.string(),
  continuationToken: z.string().optional(),
  items: z.array(ContextInstanceRecord$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_environmentId": "environmentId",
  });
});

/** @internal */
export type ContextInstances$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalCount?: number | undefined;
  _environmentId: string;
  continuationToken?: string | undefined;
  items: Array<ContextInstanceRecord$Outbound>;
};

/** @internal */
export const ContextInstances$outboundSchema: z.ZodType<
  ContextInstances$Outbound,
  z.ZodTypeDef,
  ContextInstances
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  totalCount: z.number().int().optional(),
  environmentId: z.string(),
  continuationToken: z.string().optional(),
  items: z.array(ContextInstanceRecord$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    environmentId: "_environmentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextInstances$ {
  /** @deprecated use `ContextInstances$inboundSchema` instead. */
  export const inboundSchema = ContextInstances$inboundSchema;
  /** @deprecated use `ContextInstances$outboundSchema` instead. */
  export const outboundSchema = ContextInstances$outboundSchema;
  /** @deprecated use `ContextInstances$Outbound` instead. */
  export type Outbound = ContextInstances$Outbound;
}

export function contextInstancesToJSON(
  contextInstances: ContextInstances,
): string {
  return JSON.stringify(
    ContextInstances$outboundSchema.parse(contextInstances),
  );
}

export function contextInstancesFromJSON(
  jsonString: string,
): SafeParseResult<ContextInstances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextInstances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextInstances' from JSON`,
  );
}
