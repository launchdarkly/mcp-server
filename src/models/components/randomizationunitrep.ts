/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RandomizationUnitRep = {
  /**
   * The unit of randomization. Defaults to user.
   */
  randomizationUnit?: string | undefined;
  /**
   * One of LaunchDarkly's fixed set of standard randomization units.
   */
  standardRandomizationUnit?: string | undefined;
  /**
   * Whether this randomization unit is the default for experiments
   */
  default?: boolean | undefined;
  hidden?: boolean | undefined;
  /**
   * The display name for the randomization unit, displayed in the LaunchDarkly user interface.
   */
  displayName?: string | undefined;
};

/** @internal */
export const RandomizationUnitRep$inboundSchema: z.ZodType<
  RandomizationUnitRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  randomizationUnit: z.string().optional(),
  standardRandomizationUnit: z.string().optional(),
  default: z.boolean().optional(),
  _hidden: z.boolean().optional(),
  _displayName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_hidden": "hidden",
    "_displayName": "displayName",
  });
});

/** @internal */
export type RandomizationUnitRep$Outbound = {
  randomizationUnit?: string | undefined;
  standardRandomizationUnit?: string | undefined;
  default?: boolean | undefined;
  _hidden?: boolean | undefined;
  _displayName?: string | undefined;
};

/** @internal */
export const RandomizationUnitRep$outboundSchema: z.ZodType<
  RandomizationUnitRep$Outbound,
  z.ZodTypeDef,
  RandomizationUnitRep
> = z.object({
  randomizationUnit: z.string().optional(),
  standardRandomizationUnit: z.string().optional(),
  default: z.boolean().optional(),
  hidden: z.boolean().optional(),
  displayName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    hidden: "_hidden",
    displayName: "_displayName",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RandomizationUnitRep$ {
  /** @deprecated use `RandomizationUnitRep$inboundSchema` instead. */
  export const inboundSchema = RandomizationUnitRep$inboundSchema;
  /** @deprecated use `RandomizationUnitRep$outboundSchema` instead. */
  export const outboundSchema = RandomizationUnitRep$outboundSchema;
  /** @deprecated use `RandomizationUnitRep$Outbound` instead. */
  export type Outbound = RandomizationUnitRep$Outbound;
}

export function randomizationUnitRepToJSON(
  randomizationUnitRep: RandomizationUnitRep,
): string {
  return JSON.stringify(
    RandomizationUnitRep$outboundSchema.parse(randomizationUnitRep),
  );
}

export function randomizationUnitRepFromJSON(
  jsonString: string,
): SafeParseResult<RandomizationUnitRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RandomizationUnitRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RandomizationUnitRep' from JSON`,
  );
}
