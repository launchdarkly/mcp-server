/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SegmentMetadata = {
  envId?: string | undefined;
  segmentId?: string | undefined;
  version?: number | undefined;
  includedCount?: number | undefined;
  excludedCount?: number | undefined;
  lastModified?: number | undefined;
  deleted?: boolean | undefined;
};

/** @internal */
export const SegmentMetadata$inboundSchema: z.ZodType<
  SegmentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  envId: z.string().optional(),
  segmentId: z.string().optional(),
  version: z.number().int().optional(),
  includedCount: z.number().int().optional(),
  excludedCount: z.number().int().optional(),
  lastModified: z.number().int().optional(),
  deleted: z.boolean().optional(),
});

/** @internal */
export type SegmentMetadata$Outbound = {
  envId?: string | undefined;
  segmentId?: string | undefined;
  version?: number | undefined;
  includedCount?: number | undefined;
  excludedCount?: number | undefined;
  lastModified?: number | undefined;
  deleted?: boolean | undefined;
};

/** @internal */
export const SegmentMetadata$outboundSchema: z.ZodType<
  SegmentMetadata$Outbound,
  z.ZodTypeDef,
  SegmentMetadata
> = z.object({
  envId: z.string().optional(),
  segmentId: z.string().optional(),
  version: z.number().int().optional(),
  includedCount: z.number().int().optional(),
  excludedCount: z.number().int().optional(),
  lastModified: z.number().int().optional(),
  deleted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SegmentMetadata$ {
  /** @deprecated use `SegmentMetadata$inboundSchema` instead. */
  export const inboundSchema = SegmentMetadata$inboundSchema;
  /** @deprecated use `SegmentMetadata$outboundSchema` instead. */
  export const outboundSchema = SegmentMetadata$outboundSchema;
  /** @deprecated use `SegmentMetadata$Outbound` instead. */
  export type Outbound = SegmentMetadata$Outbound;
}

export function segmentMetadataToJSON(
  segmentMetadata: SegmentMetadata,
): string {
  return JSON.stringify(SegmentMetadata$outboundSchema.parse(segmentMetadata));
}

export function segmentMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SegmentMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SegmentMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SegmentMetadata' from JSON`,
  );
}
