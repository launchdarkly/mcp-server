/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The kind of event the metric tracks
 */
export const MetricInGroupRepKind = {
  Pageview: "pageview",
  Click: "click",
  Custom: "custom",
} as const;
/**
 * The kind of event the metric tracks
 */
export type MetricInGroupRepKind = ClosedEnum<typeof MetricInGroupRepKind>;

/**
 * The type of unit aggregation to use for the metric
 */
export const MetricInGroupRepUnitAggregationType = {
  Sum: "sum",
  Average: "average",
} as const;
/**
 * The type of unit aggregation to use for the metric
 */
export type MetricInGroupRepUnitAggregationType = ClosedEnum<
  typeof MetricInGroupRepUnitAggregationType
>;

export type MetricInGroupRep = {
  /**
   * The metric key
   */
  key: string;
  /**
   * The version ID of the metric
   */
  versionId?: string | undefined;
  /**
   * The metric name
   */
  name: string;
  /**
   * The kind of event the metric tracks
   */
  kind: MetricInGroupRepKind;
  /**
   * For custom metrics, whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>).
   */
  isNumeric?: boolean | undefined;
  /**
   * The type of unit aggregation to use for the metric
   */
  unitAggregationType?: MetricInGroupRepUnitAggregationType | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * Name of the metric when used within the associated metric group. Can be different from the original name of the metric. Required if and only if the metric group is a <code>funnel</code>.
   */
  nameInGroup?: string | undefined;
  /**
   * The randomization units for the metric
   */
  randomizationUnits?: Array<string> | undefined;
};

/** @internal */
export const MetricInGroupRepKind$inboundSchema: z.ZodNativeEnum<
  typeof MetricInGroupRepKind
> = z.nativeEnum(MetricInGroupRepKind);

/** @internal */
export const MetricInGroupRepKind$outboundSchema: z.ZodNativeEnum<
  typeof MetricInGroupRepKind
> = MetricInGroupRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInGroupRepKind$ {
  /** @deprecated use `MetricInGroupRepKind$inboundSchema` instead. */
  export const inboundSchema = MetricInGroupRepKind$inboundSchema;
  /** @deprecated use `MetricInGroupRepKind$outboundSchema` instead. */
  export const outboundSchema = MetricInGroupRepKind$outboundSchema;
}

/** @internal */
export const MetricInGroupRepUnitAggregationType$inboundSchema: z.ZodNativeEnum<
  typeof MetricInGroupRepUnitAggregationType
> = z.nativeEnum(MetricInGroupRepUnitAggregationType);

/** @internal */
export const MetricInGroupRepUnitAggregationType$outboundSchema:
  z.ZodNativeEnum<typeof MetricInGroupRepUnitAggregationType> =
    MetricInGroupRepUnitAggregationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInGroupRepUnitAggregationType$ {
  /** @deprecated use `MetricInGroupRepUnitAggregationType$inboundSchema` instead. */
  export const inboundSchema =
    MetricInGroupRepUnitAggregationType$inboundSchema;
  /** @deprecated use `MetricInGroupRepUnitAggregationType$outboundSchema` instead. */
  export const outboundSchema =
    MetricInGroupRepUnitAggregationType$outboundSchema;
}

/** @internal */
export const MetricInGroupRep$inboundSchema: z.ZodType<
  MetricInGroupRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  _versionId: z.string().optional(),
  name: z.string(),
  kind: MetricInGroupRepKind$inboundSchema,
  isNumeric: z.boolean().optional(),
  unitAggregationType: MetricInGroupRepUnitAggregationType$inboundSchema
    .optional(),
  _links: z.record(Link$inboundSchema),
  nameInGroup: z.string().optional(),
  randomizationUnits: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_versionId": "versionId",
    "_links": "links",
  });
});

/** @internal */
export type MetricInGroupRep$Outbound = {
  key: string;
  _versionId?: string | undefined;
  name: string;
  kind: string;
  isNumeric?: boolean | undefined;
  unitAggregationType?: string | undefined;
  _links: { [k: string]: Link$Outbound };
  nameInGroup?: string | undefined;
  randomizationUnits?: Array<string> | undefined;
};

/** @internal */
export const MetricInGroupRep$outboundSchema: z.ZodType<
  MetricInGroupRep$Outbound,
  z.ZodTypeDef,
  MetricInGroupRep
> = z.object({
  key: z.string(),
  versionId: z.string().optional(),
  name: z.string(),
  kind: MetricInGroupRepKind$outboundSchema,
  isNumeric: z.boolean().optional(),
  unitAggregationType: MetricInGroupRepUnitAggregationType$outboundSchema
    .optional(),
  links: z.record(Link$outboundSchema),
  nameInGroup: z.string().optional(),
  randomizationUnits: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    versionId: "_versionId",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInGroupRep$ {
  /** @deprecated use `MetricInGroupRep$inboundSchema` instead. */
  export const inboundSchema = MetricInGroupRep$inboundSchema;
  /** @deprecated use `MetricInGroupRep$outboundSchema` instead. */
  export const outboundSchema = MetricInGroupRep$outboundSchema;
  /** @deprecated use `MetricInGroupRep$Outbound` instead. */
  export type Outbound = MetricInGroupRep$Outbound;
}

export function metricInGroupRepToJSON(
  metricInGroupRep: MetricInGroupRep,
): string {
  return JSON.stringify(
    MetricInGroupRep$outboundSchema.parse(metricInGroupRep),
  );
}

export function metricInGroupRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricInGroupRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricInGroupRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricInGroupRep' from JSON`,
  );
}
