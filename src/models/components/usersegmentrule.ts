/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Clause,
  Clause$inboundSchema,
  Clause$Outbound,
  Clause$outboundSchema,
} from "./clause.js";

export type UserSegmentRule = {
  id?: string | undefined;
  clauses: Array<Clause>;
  weight?: number | undefined;
  rolloutContextKind?: string | undefined;
  bucketBy?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const UserSegmentRule$inboundSchema: z.ZodType<
  UserSegmentRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  clauses: z.array(Clause$inboundSchema),
  weight: z.number().int().optional(),
  rolloutContextKind: z.string().optional(),
  bucketBy: z.string().optional(),
  description: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type UserSegmentRule$Outbound = {
  _id?: string | undefined;
  clauses: Array<Clause$Outbound>;
  weight?: number | undefined;
  rolloutContextKind?: string | undefined;
  bucketBy?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const UserSegmentRule$outboundSchema: z.ZodType<
  UserSegmentRule$Outbound,
  z.ZodTypeDef,
  UserSegmentRule
> = z.object({
  id: z.string().optional(),
  clauses: z.array(Clause$outboundSchema),
  weight: z.number().int().optional(),
  rolloutContextKind: z.string().optional(),
  bucketBy: z.string().optional(),
  description: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserSegmentRule$ {
  /** @deprecated use `UserSegmentRule$inboundSchema` instead. */
  export const inboundSchema = UserSegmentRule$inboundSchema;
  /** @deprecated use `UserSegmentRule$outboundSchema` instead. */
  export const outboundSchema = UserSegmentRule$outboundSchema;
  /** @deprecated use `UserSegmentRule$Outbound` instead. */
  export type Outbound = UserSegmentRule$Outbound;
}

export function userSegmentRuleToJSON(
  userSegmentRule: UserSegmentRule,
): string {
  return JSON.stringify(UserSegmentRule$outboundSchema.parse(userSegmentRule));
}

export function userSegmentRuleFromJSON(
  jsonString: string,
): SafeParseResult<UserSegmentRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserSegmentRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserSegmentRule' from JSON`,
  );
}
