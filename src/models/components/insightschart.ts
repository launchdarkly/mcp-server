/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsChartMetadata,
  InsightsChartMetadata$inboundSchema,
  InsightsChartMetadata$Outbound,
  InsightsChartMetadata$outboundSchema,
} from "./insightschartmetadata.js";
import {
  InsightsChartSeries,
  InsightsChartSeries$inboundSchema,
  InsightsChartSeries$Outbound,
  InsightsChartSeries$outboundSchema,
} from "./insightschartseries.js";

export type InsightsChart = {
  metadata: InsightsChartMetadata;
  /**
   * Series data for the chart
   */
  series: Array<InsightsChartSeries>;
};

/** @internal */
export const InsightsChart$inboundSchema: z.ZodType<
  InsightsChart,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: InsightsChartMetadata$inboundSchema,
  series: z.array(InsightsChartSeries$inboundSchema),
});

/** @internal */
export type InsightsChart$Outbound = {
  metadata: InsightsChartMetadata$Outbound;
  series: Array<InsightsChartSeries$Outbound>;
};

/** @internal */
export const InsightsChart$outboundSchema: z.ZodType<
  InsightsChart$Outbound,
  z.ZodTypeDef,
  InsightsChart
> = z.object({
  metadata: InsightsChartMetadata$outboundSchema,
  series: z.array(InsightsChartSeries$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsChart$ {
  /** @deprecated use `InsightsChart$inboundSchema` instead. */
  export const inboundSchema = InsightsChart$inboundSchema;
  /** @deprecated use `InsightsChart$outboundSchema` instead. */
  export const outboundSchema = InsightsChart$outboundSchema;
  /** @deprecated use `InsightsChart$Outbound` instead. */
  export type Outbound = InsightsChart$Outbound;
}

export function insightsChartToJSON(insightsChart: InsightsChart): string {
  return JSON.stringify(InsightsChart$outboundSchema.parse(insightsChart));
}

export function insightsChartFromJSON(
  jsonString: string,
): SafeParseResult<InsightsChart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsChart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsChart' from JSON`,
  );
}
