/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WeightedVariation = {
  variation: number;
  weight: number;
  untracked?: boolean | undefined;
};

/** @internal */
export const WeightedVariation$inboundSchema: z.ZodType<
  WeightedVariation,
  z.ZodTypeDef,
  unknown
> = z.object({
  variation: z.number().int(),
  weight: z.number().int(),
  _untracked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_untracked": "untracked",
  });
});

/** @internal */
export type WeightedVariation$Outbound = {
  variation: number;
  weight: number;
  _untracked?: boolean | undefined;
};

/** @internal */
export const WeightedVariation$outboundSchema: z.ZodType<
  WeightedVariation$Outbound,
  z.ZodTypeDef,
  WeightedVariation
> = z.object({
  variation: z.number().int(),
  weight: z.number().int(),
  untracked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    untracked: "_untracked",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeightedVariation$ {
  /** @deprecated use `WeightedVariation$inboundSchema` instead. */
  export const inboundSchema = WeightedVariation$inboundSchema;
  /** @deprecated use `WeightedVariation$outboundSchema` instead. */
  export const outboundSchema = WeightedVariation$outboundSchema;
  /** @deprecated use `WeightedVariation$Outbound` instead. */
  export type Outbound = WeightedVariation$Outbound;
}

export function weightedVariationToJSON(
  weightedVariation: WeightedVariation,
): string {
  return JSON.stringify(
    WeightedVariation$outboundSchema.parse(weightedVariation),
  );
}

export function weightedVariationFromJSON(
  jsonString: string,
): SafeParseResult<WeightedVariation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeightedVariation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeightedVariation' from JSON`,
  );
}
