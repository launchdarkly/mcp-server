/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SourceFlag = {
  /**
   * The environment key for the source environment
   */
  key: string;
  /**
   * The version of the source flag from which to copy
   */
  version?: number | undefined;
};

/** @internal */
export const SourceFlag$inboundSchema: z.ZodType<
  SourceFlag,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  version: z.number().int().optional(),
});

/** @internal */
export type SourceFlag$Outbound = {
  key: string;
  version?: number | undefined;
};

/** @internal */
export const SourceFlag$outboundSchema: z.ZodType<
  SourceFlag$Outbound,
  z.ZodTypeDef,
  SourceFlag
> = z.object({
  key: z.string(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceFlag$ {
  /** @deprecated use `SourceFlag$inboundSchema` instead. */
  export const inboundSchema = SourceFlag$inboundSchema;
  /** @deprecated use `SourceFlag$outboundSchema` instead. */
  export const outboundSchema = SourceFlag$outboundSchema;
  /** @deprecated use `SourceFlag$Outbound` instead. */
  export type Outbound = SourceFlag$Outbound;
}

export function sourceFlagToJSON(sourceFlag: SourceFlag): string {
  return JSON.stringify(SourceFlag$outboundSchema.parse(sourceFlag));
}

export function sourceFlagFromJSON(
  jsonString: string,
): SafeParseResult<SourceFlag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceFlag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceFlag' from JSON`,
  );
}
