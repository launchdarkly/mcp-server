/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  RecentTriggerBody,
  RecentTriggerBody$inboundSchema,
  RecentTriggerBody$Outbound,
  RecentTriggerBody$outboundSchema,
} from "./recenttriggerbody.js";

export type TriggerWorkflowRep = {
  id?: string | undefined;
  /**
   * The flag trigger version
   */
  version?: number | undefined;
  creationDate?: number | undefined;
  /**
   * The ID of the flag trigger maintainer
   */
  maintainerId?: string | undefined;
  maintainer?: MemberSummary | undefined;
  /**
   * Whether the flag trigger is currently enabled
   */
  enabled?: boolean | undefined;
  /**
   * The unique identifier of the integration for your trigger
   */
  integrationKey?: string | undefined;
  instructions?: Array<{ [k: string]: any }> | undefined;
  lastTriggeredAt?: number | undefined;
  /**
   * Details on recent flag trigger requests.
   */
  recentTriggerBodies?: Array<RecentTriggerBody> | undefined;
  /**
   * Number of times the trigger has been executed
   */
  triggerCount?: number | undefined;
  /**
   * The unguessable URL for this flag trigger
   */
  triggerURL?: string | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const TriggerWorkflowRep$inboundSchema: z.ZodType<
  TriggerWorkflowRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _version: z.number().int().optional(),
  _creationDate: z.number().int().optional(),
  _maintainerId: z.string().optional(),
  _maintainer: MemberSummary$inboundSchema.optional(),
  enabled: z.boolean().optional(),
  _integrationKey: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
  _lastTriggeredAt: z.number().int().optional(),
  _recentTriggerBodies: z.array(RecentTriggerBody$inboundSchema).optional(),
  _triggerCount: z.number().int().optional(),
  triggerURL: z.string().optional(),
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_version": "version",
    "_creationDate": "creationDate",
    "_maintainerId": "maintainerId",
    "_maintainer": "maintainer",
    "_integrationKey": "integrationKey",
    "_lastTriggeredAt": "lastTriggeredAt",
    "_recentTriggerBodies": "recentTriggerBodies",
    "_triggerCount": "triggerCount",
    "_links": "links",
  });
});

/** @internal */
export type TriggerWorkflowRep$Outbound = {
  _id?: string | undefined;
  _version?: number | undefined;
  _creationDate?: number | undefined;
  _maintainerId?: string | undefined;
  _maintainer?: MemberSummary$Outbound | undefined;
  enabled?: boolean | undefined;
  _integrationKey?: string | undefined;
  instructions?: Array<{ [k: string]: any }> | undefined;
  _lastTriggeredAt?: number | undefined;
  _recentTriggerBodies?: Array<RecentTriggerBody$Outbound> | undefined;
  _triggerCount?: number | undefined;
  triggerURL?: string | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const TriggerWorkflowRep$outboundSchema: z.ZodType<
  TriggerWorkflowRep$Outbound,
  z.ZodTypeDef,
  TriggerWorkflowRep
> = z.object({
  id: z.string().optional(),
  version: z.number().int().optional(),
  creationDate: z.number().int().optional(),
  maintainerId: z.string().optional(),
  maintainer: MemberSummary$outboundSchema.optional(),
  enabled: z.boolean().optional(),
  integrationKey: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
  lastTriggeredAt: z.number().int().optional(),
  recentTriggerBodies: z.array(RecentTriggerBody$outboundSchema).optional(),
  triggerCount: z.number().int().optional(),
  triggerURL: z.string().optional(),
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    version: "_version",
    creationDate: "_creationDate",
    maintainerId: "_maintainerId",
    maintainer: "_maintainer",
    integrationKey: "_integrationKey",
    lastTriggeredAt: "_lastTriggeredAt",
    recentTriggerBodies: "_recentTriggerBodies",
    triggerCount: "_triggerCount",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerWorkflowRep$ {
  /** @deprecated use `TriggerWorkflowRep$inboundSchema` instead. */
  export const inboundSchema = TriggerWorkflowRep$inboundSchema;
  /** @deprecated use `TriggerWorkflowRep$outboundSchema` instead. */
  export const outboundSchema = TriggerWorkflowRep$outboundSchema;
  /** @deprecated use `TriggerWorkflowRep$Outbound` instead. */
  export type Outbound = TriggerWorkflowRep$Outbound;
}

export function triggerWorkflowRepToJSON(
  triggerWorkflowRep: TriggerWorkflowRep,
): string {
  return JSON.stringify(
    TriggerWorkflowRep$outboundSchema.parse(triggerWorkflowRep),
  );
}

export function triggerWorkflowRepFromJSON(
  jsonString: string,
): SafeParseResult<TriggerWorkflowRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerWorkflowRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerWorkflowRep' from JSON`,
  );
}
