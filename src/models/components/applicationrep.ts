/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  ApplicationFlagCollectionRep,
  ApplicationFlagCollectionRep$inboundSchema,
  ApplicationFlagCollectionRep$Outbound,
  ApplicationFlagCollectionRep$outboundSchema,
} from "./applicationflagcollectionrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MaintainerRep,
  MaintainerRep$inboundSchema,
  MaintainerRep$Outbound,
  MaintainerRep$outboundSchema,
} from "./maintainerrep.js";

/**
 * To distinguish the kind of application
 */
export const ApplicationRepKind = {
  Browser: "browser",
  Mobile: "mobile",
  Server: "server",
} as const;
/**
 * To distinguish the kind of application
 */
export type ApplicationRepKind = ClosedEnum<typeof ApplicationRepKind>;

export type ApplicationRep = {
  flags?: ApplicationFlagCollectionRep | undefined;
  access?: Access | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * Version of the application
   */
  version?: number | undefined;
  /**
   * Whether the application was automatically created because it was included in a context when a LaunchDarkly SDK evaluated a feature flag, or was created through the LaunchDarkly UI or REST API.
   */
  autoAdded: boolean;
  creationDate?: number | undefined;
  /**
   * The application description
   */
  description?: string | undefined;
  /**
   * The unique identifier of this application
   */
  key: string;
  /**
   * To distinguish the kind of application
   */
  kind: ApplicationRepKind;
  maintainer?: MaintainerRep | undefined;
  /**
   * The name of the application
   */
  name: string;
};

/** @internal */
export const ApplicationRepKind$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationRepKind
> = z.nativeEnum(ApplicationRepKind);

/** @internal */
export const ApplicationRepKind$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationRepKind
> = ApplicationRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationRepKind$ {
  /** @deprecated use `ApplicationRepKind$inboundSchema` instead. */
  export const inboundSchema = ApplicationRepKind$inboundSchema;
  /** @deprecated use `ApplicationRepKind$outboundSchema` instead. */
  export const outboundSchema = ApplicationRepKind$outboundSchema;
}

/** @internal */
export const ApplicationRep$inboundSchema: z.ZodType<
  ApplicationRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  flags: ApplicationFlagCollectionRep$inboundSchema.optional(),
  _access: Access$inboundSchema.optional(),
  _links: z.record(Link$inboundSchema).optional(),
  _version: z.number().int().optional(),
  autoAdded: z.boolean(),
  creationDate: z.number().int().optional(),
  description: z.string().optional(),
  key: z.string(),
  kind: ApplicationRepKind$inboundSchema,
  _maintainer: MaintainerRep$inboundSchema.optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_access": "access",
    "_links": "links",
    "_version": "version",
    "_maintainer": "maintainer",
  });
});

/** @internal */
export type ApplicationRep$Outbound = {
  flags?: ApplicationFlagCollectionRep$Outbound | undefined;
  _access?: Access$Outbound | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _version?: number | undefined;
  autoAdded: boolean;
  creationDate?: number | undefined;
  description?: string | undefined;
  key: string;
  kind: string;
  _maintainer?: MaintainerRep$Outbound | undefined;
  name: string;
};

/** @internal */
export const ApplicationRep$outboundSchema: z.ZodType<
  ApplicationRep$Outbound,
  z.ZodTypeDef,
  ApplicationRep
> = z.object({
  flags: ApplicationFlagCollectionRep$outboundSchema.optional(),
  access: Access$outboundSchema.optional(),
  links: z.record(Link$outboundSchema).optional(),
  version: z.number().int().optional(),
  autoAdded: z.boolean(),
  creationDate: z.number().int().optional(),
  description: z.string().optional(),
  key: z.string(),
  kind: ApplicationRepKind$outboundSchema,
  maintainer: MaintainerRep$outboundSchema.optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    access: "_access",
    links: "_links",
    version: "_version",
    maintainer: "_maintainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationRep$ {
  /** @deprecated use `ApplicationRep$inboundSchema` instead. */
  export const inboundSchema = ApplicationRep$inboundSchema;
  /** @deprecated use `ApplicationRep$outboundSchema` instead. */
  export const outboundSchema = ApplicationRep$outboundSchema;
  /** @deprecated use `ApplicationRep$Outbound` instead. */
  export type Outbound = ApplicationRep$Outbound;
}

export function applicationRepToJSON(applicationRep: ApplicationRep): string {
  return JSON.stringify(ApplicationRep$outboundSchema.parse(applicationRep));
}

export function applicationRepFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationRep' from JSON`,
  );
}
