/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * Status of the flag
 */
export const FlagStatusRepName = {
  New: "new",
  Inactive: "inactive",
  Active: "active",
  Launched: "launched",
} as const;
/**
 * Status of the flag
 */
export type FlagStatusRepName = ClosedEnum<typeof FlagStatusRepName>;

export type FlagStatusRep = {
  /**
   * Status of the flag
   */
  name: FlagStatusRepName;
  /**
   * Timestamp of last time flag was requested
   */
  lastRequested?: Date | undefined;
  /**
   * Default value seen from code
   */
  default?: any | undefined;
  links: { [k: string]: Link };
};

/** @internal */
export const FlagStatusRepName$inboundSchema: z.ZodNativeEnum<
  typeof FlagStatusRepName
> = z.nativeEnum(FlagStatusRepName);

/** @internal */
export const FlagStatusRepName$outboundSchema: z.ZodNativeEnum<
  typeof FlagStatusRepName
> = FlagStatusRepName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagStatusRepName$ {
  /** @deprecated use `FlagStatusRepName$inboundSchema` instead. */
  export const inboundSchema = FlagStatusRepName$inboundSchema;
  /** @deprecated use `FlagStatusRepName$outboundSchema` instead. */
  export const outboundSchema = FlagStatusRepName$outboundSchema;
}

/** @internal */
export const FlagStatusRep$inboundSchema: z.ZodType<
  FlagStatusRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: FlagStatusRepName$inboundSchema,
  lastRequested: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  default: z.any().optional(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FlagStatusRep$Outbound = {
  name: string;
  lastRequested?: string | undefined;
  default?: any | undefined;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const FlagStatusRep$outboundSchema: z.ZodType<
  FlagStatusRep$Outbound,
  z.ZodTypeDef,
  FlagStatusRep
> = z.object({
  name: FlagStatusRepName$outboundSchema,
  lastRequested: z.date().transform(v => v.toISOString()).optional(),
  default: z.any().optional(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagStatusRep$ {
  /** @deprecated use `FlagStatusRep$inboundSchema` instead. */
  export const inboundSchema = FlagStatusRep$inboundSchema;
  /** @deprecated use `FlagStatusRep$outboundSchema` instead. */
  export const outboundSchema = FlagStatusRep$outboundSchema;
  /** @deprecated use `FlagStatusRep$Outbound` instead. */
  export type Outbound = FlagStatusRep$Outbound;
}

export function flagStatusRepToJSON(flagStatusRep: FlagStatusRep): string {
  return JSON.stringify(FlagStatusRep$outboundSchema.parse(flagStatusRep));
}

export function flagStatusRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagStatusRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagStatusRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagStatusRep' from JSON`,
  );
}
