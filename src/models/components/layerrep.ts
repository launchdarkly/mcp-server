/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LayerConfigurationRep,
  LayerConfigurationRep$inboundSchema,
  LayerConfigurationRep$Outbound,
  LayerConfigurationRep$outboundSchema,
} from "./layerconfigurationrep.js";

export type LayerRep = {
  /**
   * The key of the layer
   */
  key: string;
  /**
   * The name of the layer
   */
  name: string;
  /**
   * The description of the layer
   */
  description: string;
  createdAt: number;
  /**
   * The unit of randomization for the layer
   */
  randomizationUnit?: string | undefined;
  /**
   * The layer configurations for each requested environment
   */
  environments?: { [k: string]: LayerConfigurationRep } | undefined;
};

/** @internal */
export const LayerRep$inboundSchema: z.ZodType<
  LayerRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
  createdAt: z.number().int(),
  randomizationUnit: z.string().optional(),
  environments: z.record(LayerConfigurationRep$inboundSchema).optional(),
});

/** @internal */
export type LayerRep$Outbound = {
  key: string;
  name: string;
  description: string;
  createdAt: number;
  randomizationUnit?: string | undefined;
  environments?: { [k: string]: LayerConfigurationRep$Outbound } | undefined;
};

/** @internal */
export const LayerRep$outboundSchema: z.ZodType<
  LayerRep$Outbound,
  z.ZodTypeDef,
  LayerRep
> = z.object({
  key: z.string(),
  name: z.string(),
  description: z.string(),
  createdAt: z.number().int(),
  randomizationUnit: z.string().optional(),
  environments: z.record(LayerConfigurationRep$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayerRep$ {
  /** @deprecated use `LayerRep$inboundSchema` instead. */
  export const inboundSchema = LayerRep$inboundSchema;
  /** @deprecated use `LayerRep$outboundSchema` instead. */
  export const outboundSchema = LayerRep$outboundSchema;
  /** @deprecated use `LayerRep$Outbound` instead. */
  export type Outbound = LayerRep$Outbound;
}

export function layerRepToJSON(layerRep: LayerRep): string {
  return JSON.stringify(LayerRep$outboundSchema.parse(layerRep));
}

export function layerRepFromJSON(
  jsonString: string,
): SafeParseResult<LayerRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayerRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayerRep' from JSON`,
  );
}
