/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Whether this statement should allow or deny actions on the resources.
 */
export const AccessDeniedReasonEffect = {
  Allow: "allow",
  Deny: "deny",
} as const;
/**
 * Whether this statement should allow or deny actions on the resources.
 */
export type AccessDeniedReasonEffect = ClosedEnum<
  typeof AccessDeniedReasonEffect
>;

export type AccessDeniedReason = {
  /**
   * Resource specifier strings
   */
  resources?: Array<string> | undefined;
  /**
   * Targeted resources are the resources NOT in this list. The <code>resources</code> and <code>notActions</code> fields must be empty to use this field.
   */
  notResources?: Array<string> | undefined;
  /**
   * Actions to perform on a resource
   */
  actions?: Array<string> | undefined;
  /**
   * Targeted actions are the actions NOT in this list. The <code>actions</code> and <code>notResources</code> fields must be empty to use this field.
   */
  notActions?: Array<string> | undefined;
  /**
   * Whether this statement should allow or deny actions on the resources.
   */
  effect: AccessDeniedReasonEffect;
  roleName?: string | undefined;
};

/** @internal */
export const AccessDeniedReasonEffect$inboundSchema: z.ZodNativeEnum<
  typeof AccessDeniedReasonEffect
> = z.nativeEnum(AccessDeniedReasonEffect);

/** @internal */
export const AccessDeniedReasonEffect$outboundSchema: z.ZodNativeEnum<
  typeof AccessDeniedReasonEffect
> = AccessDeniedReasonEffect$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessDeniedReasonEffect$ {
  /** @deprecated use `AccessDeniedReasonEffect$inboundSchema` instead. */
  export const inboundSchema = AccessDeniedReasonEffect$inboundSchema;
  /** @deprecated use `AccessDeniedReasonEffect$outboundSchema` instead. */
  export const outboundSchema = AccessDeniedReasonEffect$outboundSchema;
}

/** @internal */
export const AccessDeniedReason$inboundSchema: z.ZodType<
  AccessDeniedReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: AccessDeniedReasonEffect$inboundSchema,
  role_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "role_name": "roleName",
  });
});

/** @internal */
export type AccessDeniedReason$Outbound = {
  resources?: Array<string> | undefined;
  notResources?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  notActions?: Array<string> | undefined;
  effect: string;
  role_name?: string | undefined;
};

/** @internal */
export const AccessDeniedReason$outboundSchema: z.ZodType<
  AccessDeniedReason$Outbound,
  z.ZodTypeDef,
  AccessDeniedReason
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: AccessDeniedReasonEffect$outboundSchema,
  roleName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    roleName: "role_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessDeniedReason$ {
  /** @deprecated use `AccessDeniedReason$inboundSchema` instead. */
  export const inboundSchema = AccessDeniedReason$inboundSchema;
  /** @deprecated use `AccessDeniedReason$outboundSchema` instead. */
  export const outboundSchema = AccessDeniedReason$outboundSchema;
  /** @deprecated use `AccessDeniedReason$Outbound` instead. */
  export type Outbound = AccessDeniedReason$Outbound;
}

export function accessDeniedReasonToJSON(
  accessDeniedReason: AccessDeniedReason,
): string {
  return JSON.stringify(
    AccessDeniedReason$outboundSchema.parse(accessDeniedReason),
  );
}

export function accessDeniedReasonFromJSON(
  jsonString: string,
): SafeParseResult<AccessDeniedReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessDeniedReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessDeniedReason' from JSON`,
  );
}
