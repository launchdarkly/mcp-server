/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  DependentExperimentRep,
  DependentExperimentRep$inboundSchema,
  DependentExperimentRep$Outbound,
  DependentExperimentRep$outboundSchema,
} from "./dependentexperimentrep.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MaintainerRep,
  MaintainerRep$inboundSchema,
  MaintainerRep$Outbound,
  MaintainerRep$outboundSchema,
} from "./maintainerrep.js";
import {
  MetricInGroupRep,
  MetricInGroupRep$inboundSchema,
  MetricInGroupRep$Outbound,
  MetricInGroupRep$outboundSchema,
} from "./metricingrouprep.js";

/**
 * The type of the metric group
 */
export const MetricGroupRepKind = {
  Funnel: "funnel",
  Standard: "standard",
} as const;
/**
 * The type of the metric group
 */
export type MetricGroupRepKind = ClosedEnum<typeof MetricGroupRepKind>;

export type MetricGroupRep = {
  /**
   * The ID of this metric group
   */
  id: string;
  /**
   * A unique key to reference the metric group
   */
  key: string;
  /**
   * A human-friendly name for the metric group
   */
  name: string;
  /**
   * The type of the metric group
   */
  kind: MetricGroupRepKind;
  /**
   * Description of the metric group
   */
  description?: string | undefined;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  access?: Access | undefined;
  /**
   * Tags for the metric group
   */
  tags: Array<string>;
  creationDate: number;
  lastModified: number;
  maintainer: MaintainerRep;
  /**
   * An ordered list of the metrics in this metric group
   */
  metrics: Array<MetricInGroupRep>;
  /**
   * The version of this metric group
   */
  version: number;
  experiments?: Array<DependentExperimentRep> | undefined;
  /**
   * The number of experiments using this metric group
   */
  experimentCount?: number | undefined;
};

/** @internal */
export const MetricGroupRepKind$inboundSchema: z.ZodNativeEnum<
  typeof MetricGroupRepKind
> = z.nativeEnum(MetricGroupRepKind);

/** @internal */
export const MetricGroupRepKind$outboundSchema: z.ZodNativeEnum<
  typeof MetricGroupRepKind
> = MetricGroupRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricGroupRepKind$ {
  /** @deprecated use `MetricGroupRepKind$inboundSchema` instead. */
  export const inboundSchema = MetricGroupRepKind$inboundSchema;
  /** @deprecated use `MetricGroupRepKind$outboundSchema` instead. */
  export const outboundSchema = MetricGroupRepKind$outboundSchema;
}

/** @internal */
export const MetricGroupRep$inboundSchema: z.ZodType<
  MetricGroupRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  name: z.string(),
  kind: MetricGroupRepKind$inboundSchema,
  description: z.string().optional(),
  _links: z.record(Link$inboundSchema),
  _access: Access$inboundSchema.optional(),
  tags: z.array(z.string()),
  _creationDate: z.number().int(),
  _lastModified: z.number().int(),
  maintainer: MaintainerRep$inboundSchema,
  metrics: z.array(MetricInGroupRep$inboundSchema),
  _version: z.number().int(),
  experiments: z.array(DependentExperimentRep$inboundSchema).optional(),
  experimentCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_links": "links",
    "_access": "access",
    "_creationDate": "creationDate",
    "_lastModified": "lastModified",
    "_version": "version",
  });
});

/** @internal */
export type MetricGroupRep$Outbound = {
  _id: string;
  key: string;
  name: string;
  kind: string;
  description?: string | undefined;
  _links: { [k: string]: Link$Outbound };
  _access?: Access$Outbound | undefined;
  tags: Array<string>;
  _creationDate: number;
  _lastModified: number;
  maintainer: MaintainerRep$Outbound;
  metrics: Array<MetricInGroupRep$Outbound>;
  _version: number;
  experiments?: Array<DependentExperimentRep$Outbound> | undefined;
  experimentCount?: number | undefined;
};

/** @internal */
export const MetricGroupRep$outboundSchema: z.ZodType<
  MetricGroupRep$Outbound,
  z.ZodTypeDef,
  MetricGroupRep
> = z.object({
  id: z.string(),
  key: z.string(),
  name: z.string(),
  kind: MetricGroupRepKind$outboundSchema,
  description: z.string().optional(),
  links: z.record(Link$outboundSchema),
  access: Access$outboundSchema.optional(),
  tags: z.array(z.string()),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
  maintainer: MaintainerRep$outboundSchema,
  metrics: z.array(MetricInGroupRep$outboundSchema),
  version: z.number().int(),
  experiments: z.array(DependentExperimentRep$outboundSchema).optional(),
  experimentCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    links: "_links",
    access: "_access",
    creationDate: "_creationDate",
    lastModified: "_lastModified",
    version: "_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricGroupRep$ {
  /** @deprecated use `MetricGroupRep$inboundSchema` instead. */
  export const inboundSchema = MetricGroupRep$inboundSchema;
  /** @deprecated use `MetricGroupRep$outboundSchema` instead. */
  export const outboundSchema = MetricGroupRep$outboundSchema;
  /** @deprecated use `MetricGroupRep$Outbound` instead. */
  export type Outbound = MetricGroupRep$Outbound;
}

export function metricGroupRepToJSON(metricGroupRep: MetricGroupRep): string {
  return JSON.stringify(MetricGroupRep$outboundSchema.parse(metricGroupRep));
}

export function metricGroupRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricGroupRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricGroupRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricGroupRep' from JSON`,
  );
}
