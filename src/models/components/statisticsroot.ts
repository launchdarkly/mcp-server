/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type StatisticsRoot = {
  /**
   * The location and content type of all projects that have code references
   */
  projects?: Array<Link> | undefined;
  self?: Link | undefined;
};

/** @internal */
export const StatisticsRoot$inboundSchema: z.ZodType<
  StatisticsRoot,
  z.ZodTypeDef,
  unknown
> = z.object({
  projects: z.array(Link$inboundSchema).optional(),
  self: Link$inboundSchema.optional(),
});

/** @internal */
export type StatisticsRoot$Outbound = {
  projects?: Array<Link$Outbound> | undefined;
  self?: Link$Outbound | undefined;
};

/** @internal */
export const StatisticsRoot$outboundSchema: z.ZodType<
  StatisticsRoot$Outbound,
  z.ZodTypeDef,
  StatisticsRoot
> = z.object({
  projects: z.array(Link$outboundSchema).optional(),
  self: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatisticsRoot$ {
  /** @deprecated use `StatisticsRoot$inboundSchema` instead. */
  export const inboundSchema = StatisticsRoot$inboundSchema;
  /** @deprecated use `StatisticsRoot$outboundSchema` instead. */
  export const outboundSchema = StatisticsRoot$outboundSchema;
  /** @deprecated use `StatisticsRoot$Outbound` instead. */
  export type Outbound = StatisticsRoot$Outbound;
}

export function statisticsRootToJSON(statisticsRoot: StatisticsRoot): string {
  return JSON.stringify(StatisticsRoot$outboundSchema.parse(statisticsRoot));
}

export function statisticsRootFromJSON(
  jsonString: string,
): SafeParseResult<StatisticsRoot, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatisticsRoot$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatisticsRoot' from JSON`,
  );
}
