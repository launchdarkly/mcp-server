/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PhaseInfo = {
  /**
   * The phase ID
   */
  id: string;
  /**
   * The release phase name
   */
  name: string;
  /**
   * The number of active releases in this phase
   */
  releaseCount: number;
};

/** @internal */
export const PhaseInfo$inboundSchema: z.ZodType<
  PhaseInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  name: z.string(),
  releaseCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type PhaseInfo$Outbound = {
  _id: string;
  name: string;
  releaseCount: number;
};

/** @internal */
export const PhaseInfo$outboundSchema: z.ZodType<
  PhaseInfo$Outbound,
  z.ZodTypeDef,
  PhaseInfo
> = z.object({
  id: z.string(),
  name: z.string(),
  releaseCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhaseInfo$ {
  /** @deprecated use `PhaseInfo$inboundSchema` instead. */
  export const inboundSchema = PhaseInfo$inboundSchema;
  /** @deprecated use `PhaseInfo$outboundSchema` instead. */
  export const outboundSchema = PhaseInfo$outboundSchema;
  /** @deprecated use `PhaseInfo$Outbound` instead. */
  export type Outbound = PhaseInfo$Outbound;
}

export function phaseInfoToJSON(phaseInfo: PhaseInfo): string {
  return JSON.stringify(PhaseInfo$outboundSchema.parse(phaseInfo));
}

export function phaseInfoFromJSON(
  jsonString: string,
): SafeParseResult<PhaseInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhaseInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhaseInfo' from JSON`,
  );
}
