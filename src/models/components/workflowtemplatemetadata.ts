/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkflowTemplateParameter,
  WorkflowTemplateParameter$inboundSchema,
  WorkflowTemplateParameter$Outbound,
  WorkflowTemplateParameter$outboundSchema,
} from "./workflowtemplateparameter.js";

export type WorkflowTemplateMetadata = {
  parameters?: Array<WorkflowTemplateParameter> | undefined;
};

/** @internal */
export const WorkflowTemplateMetadata$inboundSchema: z.ZodType<
  WorkflowTemplateMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.array(WorkflowTemplateParameter$inboundSchema).optional(),
});

/** @internal */
export type WorkflowTemplateMetadata$Outbound = {
  parameters?: Array<WorkflowTemplateParameter$Outbound> | undefined;
};

/** @internal */
export const WorkflowTemplateMetadata$outboundSchema: z.ZodType<
  WorkflowTemplateMetadata$Outbound,
  z.ZodTypeDef,
  WorkflowTemplateMetadata
> = z.object({
  parameters: z.array(WorkflowTemplateParameter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowTemplateMetadata$ {
  /** @deprecated use `WorkflowTemplateMetadata$inboundSchema` instead. */
  export const inboundSchema = WorkflowTemplateMetadata$inboundSchema;
  /** @deprecated use `WorkflowTemplateMetadata$outboundSchema` instead. */
  export const outboundSchema = WorkflowTemplateMetadata$outboundSchema;
  /** @deprecated use `WorkflowTemplateMetadata$Outbound` instead. */
  export type Outbound = WorkflowTemplateMetadata$Outbound;
}

export function workflowTemplateMetadataToJSON(
  workflowTemplateMetadata: WorkflowTemplateMetadata,
): string {
  return JSON.stringify(
    WorkflowTemplateMetadata$outboundSchema.parse(workflowTemplateMetadata),
  );
}

export function workflowTemplateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowTemplateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowTemplateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowTemplateMetadata' from JSON`,
  );
}
