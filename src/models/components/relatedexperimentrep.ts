/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RelatedExperimentRep = {
  key?: string | undefined;
  name?: string | undefined;
  environment?: string | undefined;
};

/** @internal */
export const RelatedExperimentRep$inboundSchema: z.ZodType<
  RelatedExperimentRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  environment: z.string().optional(),
});

/** @internal */
export type RelatedExperimentRep$Outbound = {
  key?: string | undefined;
  name?: string | undefined;
  environment?: string | undefined;
};

/** @internal */
export const RelatedExperimentRep$outboundSchema: z.ZodType<
  RelatedExperimentRep$Outbound,
  z.ZodTypeDef,
  RelatedExperimentRep
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  environment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedExperimentRep$ {
  /** @deprecated use `RelatedExperimentRep$inboundSchema` instead. */
  export const inboundSchema = RelatedExperimentRep$inboundSchema;
  /** @deprecated use `RelatedExperimentRep$outboundSchema` instead. */
  export const outboundSchema = RelatedExperimentRep$outboundSchema;
  /** @deprecated use `RelatedExperimentRep$Outbound` instead. */
  export type Outbound = RelatedExperimentRep$Outbound;
}

export function relatedExperimentRepToJSON(
  relatedExperimentRep: RelatedExperimentRep,
): string {
  return JSON.stringify(
    RelatedExperimentRep$outboundSchema.parse(relatedExperimentRep),
  );
}

export function relatedExperimentRepFromJSON(
  jsonString: string,
): SafeParseResult<RelatedExperimentRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedExperimentRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedExperimentRep' from JSON`,
  );
}
