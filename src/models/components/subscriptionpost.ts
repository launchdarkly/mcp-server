/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StatementPost,
  StatementPost$inboundSchema,
  StatementPost$Outbound,
  StatementPost$outboundSchema,
} from "./statementpost.js";

export type SubscriptionPost = {
  /**
   * A human-friendly name for your audit log subscription.
   */
  name: string;
  statements?: Array<StatementPost> | undefined;
  /**
   * Whether or not you want your subscription to actively send events.
   */
  on?: boolean | undefined;
  /**
   * An array of tags for this subscription.
   */
  tags?: Array<string> | undefined;
  /**
   * The unique set of fields required to configure an audit log subscription integration of this type. Refer to the <code>formVariables</code> field in the corresponding <code>manifest.json</code> at https://github.com/launchdarkly/integration-framework/tree/main/integrations for a full list of fields for the integration you wish to configure.
   */
  config: { [k: string]: any };
  /**
   * Slack webhook receiver URL. Only necessary for legacy Slack webhook integrations.
   */
  url?: string | undefined;
  /**
   * Datadog API key. Only necessary for legacy Datadog webhook integrations.
   */
  apiKey?: string | undefined;
};

/** @internal */
export const SubscriptionPost$inboundSchema: z.ZodType<
  SubscriptionPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  statements: z.array(StatementPost$inboundSchema).optional(),
  on: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  config: z.record(z.any()),
  url: z.string().optional(),
  apiKey: z.string().optional(),
});

/** @internal */
export type SubscriptionPost$Outbound = {
  name: string;
  statements?: Array<StatementPost$Outbound> | undefined;
  on?: boolean | undefined;
  tags?: Array<string> | undefined;
  config: { [k: string]: any };
  url?: string | undefined;
  apiKey?: string | undefined;
};

/** @internal */
export const SubscriptionPost$outboundSchema: z.ZodType<
  SubscriptionPost$Outbound,
  z.ZodTypeDef,
  SubscriptionPost
> = z.object({
  name: z.string(),
  statements: z.array(StatementPost$outboundSchema).optional(),
  on: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  config: z.record(z.any()),
  url: z.string().optional(),
  apiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPost$ {
  /** @deprecated use `SubscriptionPost$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPost$inboundSchema;
  /** @deprecated use `SubscriptionPost$outboundSchema` instead. */
  export const outboundSchema = SubscriptionPost$outboundSchema;
  /** @deprecated use `SubscriptionPost$Outbound` instead. */
  export type Outbound = SubscriptionPost$Outbound;
}

export function subscriptionPostToJSON(
  subscriptionPost: SubscriptionPost,
): string {
  return JSON.stringify(
    SubscriptionPost$outboundSchema.parse(subscriptionPost),
  );
}

export function subscriptionPostFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPost' from JSON`,
  );
}
