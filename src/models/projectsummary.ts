/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ProjectSummary = {
  /**
   * The ID of this project
   */
  id: string;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The project key
   */
  key: string;
  /**
   * The project name
   */
  name: string;
};

/** @internal */
export const ProjectSummary$inboundSchema: z.ZodType<
  ProjectSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _links: z.record(Link$inboundSchema),
  key: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_links": "links",
  });
});

/** @internal */
export type ProjectSummary$Outbound = {
  _id: string;
  _links: { [k: string]: Link$Outbound };
  key: string;
  name: string;
};

/** @internal */
export const ProjectSummary$outboundSchema: z.ZodType<
  ProjectSummary$Outbound,
  z.ZodTypeDef,
  ProjectSummary
> = z.object({
  id: z.string(),
  links: z.record(Link$outboundSchema),
  key: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSummary$ {
  /** @deprecated use `ProjectSummary$inboundSchema` instead. */
  export const inboundSchema = ProjectSummary$inboundSchema;
  /** @deprecated use `ProjectSummary$outboundSchema` instead. */
  export const outboundSchema = ProjectSummary$outboundSchema;
  /** @deprecated use `ProjectSummary$Outbound` instead. */
  export type Outbound = ProjectSummary$Outbound;
}

export function projectSummaryToJSON(projectSummary: ProjectSummary): string {
  return JSON.stringify(ProjectSummary$outboundSchema.parse(projectSummary));
}

export function projectSummaryFromJSON(
  jsonString: string,
): SafeParseResult<ProjectSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectSummary' from JSON`,
  );
}
