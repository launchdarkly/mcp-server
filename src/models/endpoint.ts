/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HeaderItems,
  HeaderItems$inboundSchema,
  HeaderItems$Outbound,
  HeaderItems$outboundSchema,
} from "./headeritems.js";
import {
  HMACSignature,
  HMACSignature$inboundSchema,
  HMACSignature$Outbound,
  HMACSignature$outboundSchema,
} from "./hmacsignature.js";

export type Endpoint = {
  headers?: Array<HeaderItems> | undefined;
  hmacSignature?: HMACSignature | undefined;
  method?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const Endpoint$inboundSchema: z.ZodType<
  Endpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.array(HeaderItems$inboundSchema).optional(),
  hmacSignature: HMACSignature$inboundSchema.optional(),
  method: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type Endpoint$Outbound = {
  headers?: Array<HeaderItems$Outbound> | undefined;
  hmacSignature?: HMACSignature$Outbound | undefined;
  method?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const Endpoint$outboundSchema: z.ZodType<
  Endpoint$Outbound,
  z.ZodTypeDef,
  Endpoint
> = z.object({
  headers: z.array(HeaderItems$outboundSchema).optional(),
  hmacSignature: HMACSignature$outboundSchema.optional(),
  method: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint$ {
  /** @deprecated use `Endpoint$inboundSchema` instead. */
  export const inboundSchema = Endpoint$inboundSchema;
  /** @deprecated use `Endpoint$outboundSchema` instead. */
  export const outboundSchema = Endpoint$outboundSchema;
  /** @deprecated use `Endpoint$Outbound` instead. */
  export type Outbound = Endpoint$Outbound;
}

export function endpointToJSON(endpoint: Endpoint): string {
  return JSON.stringify(Endpoint$outboundSchema.parse(endpoint));
}

export function endpointFromJSON(
  jsonString: string,
): SafeParseResult<Endpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Endpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Endpoint' from JSON`,
  );
}
