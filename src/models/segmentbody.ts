/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SegmentBody = {
  /**
   * A human-friendly name for the segment
   */
  name: string;
  /**
   * A unique key used to reference the segment
   */
  key: string;
  /**
   * A description of the segment's purpose
   */
  description?: string | undefined;
  /**
   * Tags for the segment
   */
  tags?: Array<string> | undefined;
  /**
   * Whether to create a standard segment (<code>false</code>) or a big segment (<code>true</code>). Standard segments include rule-based and smaller list-based segments. Big segments include larger list-based segments and synced segments. Only use a big segment if you need to add more than 15,000 individual targets.
   */
  unbounded?: boolean | undefined;
  /**
   * For big segments, the targeted context kind.
   */
  unboundedContextKind?: string | undefined;
};

/** @internal */
export const SegmentBody$inboundSchema: z.ZodType<
  SegmentBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  unbounded: z.boolean().optional(),
  unboundedContextKind: z.string().optional(),
});

/** @internal */
export type SegmentBody$Outbound = {
  name: string;
  key: string;
  description?: string | undefined;
  tags?: Array<string> | undefined;
  unbounded?: boolean | undefined;
  unboundedContextKind?: string | undefined;
};

/** @internal */
export const SegmentBody$outboundSchema: z.ZodType<
  SegmentBody$Outbound,
  z.ZodTypeDef,
  SegmentBody
> = z.object({
  name: z.string(),
  key: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  unbounded: z.boolean().optional(),
  unboundedContextKind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SegmentBody$ {
  /** @deprecated use `SegmentBody$inboundSchema` instead. */
  export const inboundSchema = SegmentBody$inboundSchema;
  /** @deprecated use `SegmentBody$outboundSchema` instead. */
  export const outboundSchema = SegmentBody$outboundSchema;
  /** @deprecated use `SegmentBody$Outbound` instead. */
  export type Outbound = SegmentBody$Outbound;
}

export function segmentBodyToJSON(segmentBody: SegmentBody): string {
  return JSON.stringify(SegmentBody$outboundSchema.parse(segmentBody));
}

export function segmentBodyFromJSON(
  jsonString: string,
): SafeParseResult<SegmentBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SegmentBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SegmentBody' from JSON`,
  );
}
