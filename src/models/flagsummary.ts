/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  VariationSummary,
  VariationSummary$inboundSchema,
  VariationSummary$Outbound,
  VariationSummary$outboundSchema,
} from "./variationsummary.js";

export type FlagSummary = {
  variations: { [k: string]: VariationSummary };
  /**
   * The number of prerequisites for this flag
   */
  prerequisites: number;
};

/** @internal */
export const FlagSummary$inboundSchema: z.ZodType<
  FlagSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  variations: z.record(VariationSummary$inboundSchema),
  prerequisites: z.number().int(),
});

/** @internal */
export type FlagSummary$Outbound = {
  variations: { [k: string]: VariationSummary$Outbound };
  prerequisites: number;
};

/** @internal */
export const FlagSummary$outboundSchema: z.ZodType<
  FlagSummary$Outbound,
  z.ZodTypeDef,
  FlagSummary
> = z.object({
  variations: z.record(VariationSummary$outboundSchema),
  prerequisites: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagSummary$ {
  /** @deprecated use `FlagSummary$inboundSchema` instead. */
  export const inboundSchema = FlagSummary$inboundSchema;
  /** @deprecated use `FlagSummary$outboundSchema` instead. */
  export const outboundSchema = FlagSummary$outboundSchema;
  /** @deprecated use `FlagSummary$Outbound` instead. */
  export type Outbound = FlagSummary$Outbound;
}

export function flagSummaryToJSON(flagSummary: FlagSummary): string {
  return JSON.stringify(FlagSummary$outboundSchema.parse(flagSummary));
}

export function flagSummaryFromJSON(
  jsonString: string,
): SafeParseResult<FlagSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagSummary' from JSON`,
  );
}
