/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of Data Export destination
 */
export const DestinationPostKind = {
  GooglePubsub: "google-pubsub",
  Kinesis: "kinesis",
  Mparticle: "mparticle",
  Segment: "segment",
  AzureEventHubs: "azure-event-hubs",
  SnowflakeV2: "snowflake-v2",
} as const;
/**
 * The type of Data Export destination
 */
export type DestinationPostKind = ClosedEnum<typeof DestinationPostKind>;

export type DestinationPost = {
  /**
   * A human-readable name for your Data Export destination
   */
  name?: string | undefined;
  /**
   * The type of Data Export destination
   */
  kind?: DestinationPostKind | undefined;
  /**
   * An object with the configuration parameters required for the destination type
   */
  config?: any | undefined;
  /**
   * Whether the export is on. Displayed as the integration status in the LaunchDarkly UI.
   */
  on?: boolean | undefined;
};

/** @internal */
export const DestinationPostKind$inboundSchema: z.ZodNativeEnum<
  typeof DestinationPostKind
> = z.nativeEnum(DestinationPostKind);

/** @internal */
export const DestinationPostKind$outboundSchema: z.ZodNativeEnum<
  typeof DestinationPostKind
> = DestinationPostKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationPostKind$ {
  /** @deprecated use `DestinationPostKind$inboundSchema` instead. */
  export const inboundSchema = DestinationPostKind$inboundSchema;
  /** @deprecated use `DestinationPostKind$outboundSchema` instead. */
  export const outboundSchema = DestinationPostKind$outboundSchema;
}

/** @internal */
export const DestinationPost$inboundSchema: z.ZodType<
  DestinationPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  kind: DestinationPostKind$inboundSchema.optional(),
  config: z.any().optional(),
  on: z.boolean().optional(),
});

/** @internal */
export type DestinationPost$Outbound = {
  name?: string | undefined;
  kind?: string | undefined;
  config?: any | undefined;
  on?: boolean | undefined;
};

/** @internal */
export const DestinationPost$outboundSchema: z.ZodType<
  DestinationPost$Outbound,
  z.ZodTypeDef,
  DestinationPost
> = z.object({
  name: z.string().optional(),
  kind: DestinationPostKind$outboundSchema.optional(),
  config: z.any().optional(),
  on: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationPost$ {
  /** @deprecated use `DestinationPost$inboundSchema` instead. */
  export const inboundSchema = DestinationPost$inboundSchema;
  /** @deprecated use `DestinationPost$outboundSchema` instead. */
  export const outboundSchema = DestinationPost$outboundSchema;
  /** @deprecated use `DestinationPost$Outbound` instead. */
  export type Outbound = DestinationPost$Outbound;
}

export function destinationPostToJSON(
  destinationPost: DestinationPost,
): string {
  return JSON.stringify(DestinationPost$outboundSchema.parse(destinationPost));
}

export function destinationPostFromJSON(
  jsonString: string,
): SafeParseResult<DestinationPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationPost' from JSON`,
  );
}
