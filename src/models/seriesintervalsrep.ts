/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Series,
  Series$inboundSchema,
  Series$Outbound,
  Series$outboundSchema,
} from "./series.js";

export type SeriesIntervalsRep = {
  /**
   * An array of timestamps and values for a given meter
   */
  series: Array<Series>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: any };
};

/** @internal */
export const SeriesIntervalsRep$inboundSchema: z.ZodType<
  SeriesIntervalsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  series: z.array(Series$inboundSchema),
  _links: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SeriesIntervalsRep$Outbound = {
  series: Array<Series$Outbound>;
  _links: { [k: string]: any };
};

/** @internal */
export const SeriesIntervalsRep$outboundSchema: z.ZodType<
  SeriesIntervalsRep$Outbound,
  z.ZodTypeDef,
  SeriesIntervalsRep
> = z.object({
  series: z.array(Series$outboundSchema),
  links: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeriesIntervalsRep$ {
  /** @deprecated use `SeriesIntervalsRep$inboundSchema` instead. */
  export const inboundSchema = SeriesIntervalsRep$inboundSchema;
  /** @deprecated use `SeriesIntervalsRep$outboundSchema` instead. */
  export const outboundSchema = SeriesIntervalsRep$outboundSchema;
  /** @deprecated use `SeriesIntervalsRep$Outbound` instead. */
  export type Outbound = SeriesIntervalsRep$Outbound;
}

export function seriesIntervalsRepToJSON(
  seriesIntervalsRep: SeriesIntervalsRep,
): string {
  return JSON.stringify(
    SeriesIntervalsRep$outboundSchema.parse(seriesIntervalsRep),
  );
}

export function seriesIntervalsRepFromJSON(
  jsonString: string,
): SafeParseResult<SeriesIntervalsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeriesIntervalsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeriesIntervalsRep' from JSON`,
  );
}
