/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Project,
  Project$inboundSchema,
  Project$Outbound,
  Project$outboundSchema,
} from "./project.js";

export type Projects = {
  /**
   * A link to this resource.
   */
  links: { [k: string]: Link };
  /**
   * List of projects.
   */
  items: Array<Project>;
  totalCount?: number | undefined;
};

/** @internal */
export const Projects$inboundSchema: z.ZodType<
  Projects,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  items: z.array(Project$inboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type Projects$Outbound = {
  _links: { [k: string]: Link$Outbound };
  items: Array<Project$Outbound>;
  totalCount?: number | undefined;
};

/** @internal */
export const Projects$outboundSchema: z.ZodType<
  Projects$Outbound,
  z.ZodTypeDef,
  Projects
> = z.object({
  links: z.record(Link$outboundSchema),
  items: z.array(Project$outboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Projects$ {
  /** @deprecated use `Projects$inboundSchema` instead. */
  export const inboundSchema = Projects$inboundSchema;
  /** @deprecated use `Projects$outboundSchema` instead. */
  export const outboundSchema = Projects$outboundSchema;
  /** @deprecated use `Projects$Outbound` instead. */
  export type Outbound = Projects$Outbound;
}

export function projectsToJSON(projects: Projects): string {
  return JSON.stringify(Projects$outboundSchema.parse(projects));
}

export function projectsFromJSON(
  jsonString: string,
): SafeParseResult<Projects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Projects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Projects' from JSON`,
  );
}
