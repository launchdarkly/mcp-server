/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateFlagConfigApprovalRequestRequest = {
  /**
   * Optional comment describing the approval request
   */
  comment?: string | undefined;
  /**
   * A brief description of the changes you're requesting
   */
  description: string;
  instructions: Array<{ [k: string]: any }>;
  /**
   * An array of member IDs. These members are notified to review the approval request.
   */
  notifyMemberIds?: Array<string> | undefined;
  /**
   * An array of team keys. The members of these teams are notified to review the approval request.
   */
  notifyTeamKeys?: Array<string> | undefined;
  executionDate?: number | undefined;
  /**
   * The ID of a scheduled change. Include this if your <code>instructions</code> include editing or deleting a scheduled change.
   */
  operatingOnId?: string | undefined;
  integrationConfig?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateFlagConfigApprovalRequestRequest$inboundSchema: z.ZodType<
  CreateFlagConfigApprovalRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  description: z.string(),
  instructions: z.array(z.record(z.any())),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  executionDate: z.number().int().optional(),
  operatingOnId: z.string().optional(),
  integrationConfig: z.record(z.any()).optional(),
});

/** @internal */
export type CreateFlagConfigApprovalRequestRequest$Outbound = {
  comment?: string | undefined;
  description: string;
  instructions: Array<{ [k: string]: any }>;
  notifyMemberIds?: Array<string> | undefined;
  notifyTeamKeys?: Array<string> | undefined;
  executionDate?: number | undefined;
  operatingOnId?: string | undefined;
  integrationConfig?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateFlagConfigApprovalRequestRequest$outboundSchema: z.ZodType<
  CreateFlagConfigApprovalRequestRequest$Outbound,
  z.ZodTypeDef,
  CreateFlagConfigApprovalRequestRequest
> = z.object({
  comment: z.string().optional(),
  description: z.string(),
  instructions: z.array(z.record(z.any())),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  executionDate: z.number().int().optional(),
  operatingOnId: z.string().optional(),
  integrationConfig: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFlagConfigApprovalRequestRequest$ {
  /** @deprecated use `CreateFlagConfigApprovalRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateFlagConfigApprovalRequestRequest$inboundSchema;
  /** @deprecated use `CreateFlagConfigApprovalRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateFlagConfigApprovalRequestRequest$outboundSchema;
  /** @deprecated use `CreateFlagConfigApprovalRequestRequest$Outbound` instead. */
  export type Outbound = CreateFlagConfigApprovalRequestRequest$Outbound;
}

export function createFlagConfigApprovalRequestRequestToJSON(
  createFlagConfigApprovalRequestRequest:
    CreateFlagConfigApprovalRequestRequest,
): string {
  return JSON.stringify(
    CreateFlagConfigApprovalRequestRequest$outboundSchema.parse(
      createFlagConfigApprovalRequestRequest,
    ),
  );
}

export function createFlagConfigApprovalRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFlagConfigApprovalRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFlagConfigApprovalRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFlagConfigApprovalRequestRequest' from JSON`,
  );
}
