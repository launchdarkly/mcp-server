/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReleaserAudienceConfigInput,
  ReleaserAudienceConfigInput$inboundSchema,
  ReleaserAudienceConfigInput$Outbound,
  ReleaserAudienceConfigInput$outboundSchema,
} from "./releaseraudienceconfiginput.js";

export type UpdatePhaseStatusInput = {
  status?: string | undefined;
  /**
   * Extra configuration for audiences required upon phase initialization.
   */
  audiences?: Array<ReleaserAudienceConfigInput> | undefined;
};

/** @internal */
export const UpdatePhaseStatusInput$inboundSchema: z.ZodType<
  UpdatePhaseStatusInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  audiences: z.array(ReleaserAudienceConfigInput$inboundSchema).optional(),
});

/** @internal */
export type UpdatePhaseStatusInput$Outbound = {
  status?: string | undefined;
  audiences?: Array<ReleaserAudienceConfigInput$Outbound> | undefined;
};

/** @internal */
export const UpdatePhaseStatusInput$outboundSchema: z.ZodType<
  UpdatePhaseStatusInput$Outbound,
  z.ZodTypeDef,
  UpdatePhaseStatusInput
> = z.object({
  status: z.string().optional(),
  audiences: z.array(ReleaserAudienceConfigInput$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePhaseStatusInput$ {
  /** @deprecated use `UpdatePhaseStatusInput$inboundSchema` instead. */
  export const inboundSchema = UpdatePhaseStatusInput$inboundSchema;
  /** @deprecated use `UpdatePhaseStatusInput$outboundSchema` instead. */
  export const outboundSchema = UpdatePhaseStatusInput$outboundSchema;
  /** @deprecated use `UpdatePhaseStatusInput$Outbound` instead. */
  export type Outbound = UpdatePhaseStatusInput$Outbound;
}

export function updatePhaseStatusInputToJSON(
  updatePhaseStatusInput: UpdatePhaseStatusInput,
): string {
  return JSON.stringify(
    UpdatePhaseStatusInput$outboundSchema.parse(updatePhaseStatusInput),
  );
}

export function updatePhaseStatusInputFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePhaseStatusInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePhaseStatusInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePhaseStatusInput' from JSON`,
  );
}
