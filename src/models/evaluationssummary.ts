/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  VariationEvalSummary,
  VariationEvalSummary$inboundSchema,
  VariationEvalSummary$Outbound,
  VariationEvalSummary$outboundSchema,
} from "./variationevalsummary.js";

export type EvaluationsSummary = {
  /**
   * A list of variation evaluations
   */
  variations?: Array<VariationEvalSummary> | undefined;
};

/** @internal */
export const EvaluationsSummary$inboundSchema: z.ZodType<
  EvaluationsSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  variations: z.array(VariationEvalSummary$inboundSchema).optional(),
});

/** @internal */
export type EvaluationsSummary$Outbound = {
  variations?: Array<VariationEvalSummary$Outbound> | undefined;
};

/** @internal */
export const EvaluationsSummary$outboundSchema: z.ZodType<
  EvaluationsSummary$Outbound,
  z.ZodTypeDef,
  EvaluationsSummary
> = z.object({
  variations: z.array(VariationEvalSummary$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluationsSummary$ {
  /** @deprecated use `EvaluationsSummary$inboundSchema` instead. */
  export const inboundSchema = EvaluationsSummary$inboundSchema;
  /** @deprecated use `EvaluationsSummary$outboundSchema` instead. */
  export const outboundSchema = EvaluationsSummary$outboundSchema;
  /** @deprecated use `EvaluationsSummary$Outbound` instead. */
  export type Outbound = EvaluationsSummary$Outbound;
}

export function evaluationsSummaryToJSON(
  evaluationsSummary: EvaluationsSummary,
): string {
  return JSON.stringify(
    EvaluationsSummary$outboundSchema.parse(evaluationsSummary),
  );
}

export function evaluationsSummaryFromJSON(
  jsonString: string,
): SafeParseResult<EvaluationsSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvaluationsSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvaluationsSummary' from JSON`,
  );
}
