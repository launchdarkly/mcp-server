/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BooleanFlagDefaults,
  BooleanFlagDefaults$inboundSchema,
  BooleanFlagDefaults$Outbound,
  BooleanFlagDefaults$outboundSchema,
} from "./booleanflagdefaults.js";
import {
  DefaultClientSideAvailability,
  DefaultClientSideAvailability$inboundSchema,
  DefaultClientSideAvailability$Outbound,
  DefaultClientSideAvailability$outboundSchema,
} from "./defaultclientsideavailability.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type UpsertPayloadRep = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * A list of default tags for each flag
   */
  tags: Array<string>;
  /**
   * Whether the flag should be temporary by default
   */
  temporary: boolean;
  booleanDefaults: BooleanFlagDefaults;
  defaultClientSideAvailability: DefaultClientSideAvailability;
};

/** @internal */
export const UpsertPayloadRep$inboundSchema: z.ZodType<
  UpsertPayloadRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  tags: z.array(z.string()),
  temporary: z.boolean(),
  booleanDefaults: BooleanFlagDefaults$inboundSchema,
  defaultClientSideAvailability: DefaultClientSideAvailability$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UpsertPayloadRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  tags: Array<string>;
  temporary: boolean;
  booleanDefaults: BooleanFlagDefaults$Outbound;
  defaultClientSideAvailability: DefaultClientSideAvailability$Outbound;
};

/** @internal */
export const UpsertPayloadRep$outboundSchema: z.ZodType<
  UpsertPayloadRep$Outbound,
  z.ZodTypeDef,
  UpsertPayloadRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  tags: z.array(z.string()),
  temporary: z.boolean(),
  booleanDefaults: BooleanFlagDefaults$outboundSchema,
  defaultClientSideAvailability: DefaultClientSideAvailability$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertPayloadRep$ {
  /** @deprecated use `UpsertPayloadRep$inboundSchema` instead. */
  export const inboundSchema = UpsertPayloadRep$inboundSchema;
  /** @deprecated use `UpsertPayloadRep$outboundSchema` instead. */
  export const outboundSchema = UpsertPayloadRep$outboundSchema;
  /** @deprecated use `UpsertPayloadRep$Outbound` instead. */
  export type Outbound = UpsertPayloadRep$Outbound;
}

export function upsertPayloadRepToJSON(
  upsertPayloadRep: UpsertPayloadRep,
): string {
  return JSON.stringify(
    UpsertPayloadRep$outboundSchema.parse(upsertPayloadRep),
  );
}

export function upsertPayloadRepFromJSON(
  jsonString: string,
): SafeParseResult<UpsertPayloadRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertPayloadRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertPayloadRep' from JSON`,
  );
}
