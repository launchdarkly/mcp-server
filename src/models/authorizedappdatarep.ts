/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type AuthorizedAppDataRep = {
  links?: { [k: string]: Link } | undefined;
  /**
   * The ID of the authorized application
   */
  id?: string | undefined;
  /**
   * Whether the application is authorized through SCIM
   */
  isScim?: boolean | undefined;
  /**
   * The authorized application name
   */
  name?: string | undefined;
  /**
   * The name of the maintainer for this authorized application
   */
  maintainerName?: string | undefined;
};

/** @internal */
export const AuthorizedAppDataRep$inboundSchema: z.ZodType<
  AuthorizedAppDataRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  _id: z.string().optional(),
  isScim: z.boolean().optional(),
  name: z.string().optional(),
  maintainerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
  });
});

/** @internal */
export type AuthorizedAppDataRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  _id?: string | undefined;
  isScim?: boolean | undefined;
  name?: string | undefined;
  maintainerName?: string | undefined;
};

/** @internal */
export const AuthorizedAppDataRep$outboundSchema: z.ZodType<
  AuthorizedAppDataRep$Outbound,
  z.ZodTypeDef,
  AuthorizedAppDataRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  id: z.string().optional(),
  isScim: z.boolean().optional(),
  name: z.string().optional(),
  maintainerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizedAppDataRep$ {
  /** @deprecated use `AuthorizedAppDataRep$inboundSchema` instead. */
  export const inboundSchema = AuthorizedAppDataRep$inboundSchema;
  /** @deprecated use `AuthorizedAppDataRep$outboundSchema` instead. */
  export const outboundSchema = AuthorizedAppDataRep$outboundSchema;
  /** @deprecated use `AuthorizedAppDataRep$Outbound` instead. */
  export type Outbound = AuthorizedAppDataRep$Outbound;
}

export function authorizedAppDataRepToJSON(
  authorizedAppDataRep: AuthorizedAppDataRep,
): string {
  return JSON.stringify(
    AuthorizedAppDataRep$outboundSchema.parse(authorizedAppDataRep),
  );
}

export function authorizedAppDataRepFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizedAppDataRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizedAppDataRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizedAppDataRep' from JSON`,
  );
}
