/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TriggerPost = {
  /**
   * Optional comment describing the trigger
   */
  comment?: string | undefined;
  /**
   * The action to perform when triggering. This should be an array with a single object that looks like <code>{"kind": "flag_action"}</code>. Supported flag actions are <code>turnFlagOn</code> and <code>turnFlagOff</code>.
   */
  instructions?: Array<{ [k: string]: any }> | undefined;
  /**
   * The unique identifier of the integration for your trigger. Use <code>generic-trigger</code> for integrations not explicitly supported.
   */
  integrationKey: string;
};

/** @internal */
export const TriggerPost$inboundSchema: z.ZodType<
  TriggerPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
  integrationKey: z.string(),
});

/** @internal */
export type TriggerPost$Outbound = {
  comment?: string | undefined;
  instructions?: Array<{ [k: string]: any }> | undefined;
  integrationKey: string;
};

/** @internal */
export const TriggerPost$outboundSchema: z.ZodType<
  TriggerPost$Outbound,
  z.ZodTypeDef,
  TriggerPost
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())).optional(),
  integrationKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPost$ {
  /** @deprecated use `TriggerPost$inboundSchema` instead. */
  export const inboundSchema = TriggerPost$inboundSchema;
  /** @deprecated use `TriggerPost$outboundSchema` instead. */
  export const outboundSchema = TriggerPost$outboundSchema;
  /** @deprecated use `TriggerPost$Outbound` instead. */
  export type Outbound = TriggerPost$Outbound;
}

export function triggerPostToJSON(triggerPost: TriggerPost): string {
  return JSON.stringify(TriggerPost$outboundSchema.parse(triggerPost));
}

export function triggerPostFromJSON(
  jsonString: string,
): SafeParseResult<TriggerPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerPost' from JSON`,
  );
}
