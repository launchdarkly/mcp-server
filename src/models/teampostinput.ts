/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PermissionGrantInput,
  PermissionGrantInput$inboundSchema,
  PermissionGrantInput$Outbound,
  PermissionGrantInput$outboundSchema,
} from "./permissiongrantinput.js";

export type TeamPostInput = {
  /**
   * List of custom role keys the team will access
   */
  customRoleKeys?: Array<string> | undefined;
  /**
   * A description of the team
   */
  description?: string | undefined;
  /**
   * The team key
   */
  key: string;
  /**
   * A list of member IDs who belong to the team
   */
  memberIDs?: Array<string> | undefined;
  /**
   * A human-friendly name for the team
   */
  name: string;
  /**
   * A list of permission grants. Permission grants allow access to a specific action, without having to create or update a custom role.
   */
  permissionGrants?: Array<PermissionGrantInput> | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const TeamPostInput$inboundSchema: z.ZodType<
  TeamPostInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  customRoleKeys: z.array(z.string()).optional(),
  description: z.string().optional(),
  key: z.string(),
  memberIDs: z.array(z.string()).optional(),
  name: z.string(),
  permissionGrants: z.array(PermissionGrantInput$inboundSchema).optional(),
  roleAttributes: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type TeamPostInput$Outbound = {
  customRoleKeys?: Array<string> | undefined;
  description?: string | undefined;
  key: string;
  memberIDs?: Array<string> | undefined;
  name: string;
  permissionGrants?: Array<PermissionGrantInput$Outbound> | undefined;
  roleAttributes?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const TeamPostInput$outboundSchema: z.ZodType<
  TeamPostInput$Outbound,
  z.ZodTypeDef,
  TeamPostInput
> = z.object({
  customRoleKeys: z.array(z.string()).optional(),
  description: z.string().optional(),
  key: z.string(),
  memberIDs: z.array(z.string()).optional(),
  name: z.string(),
  permissionGrants: z.array(PermissionGrantInput$outboundSchema).optional(),
  roleAttributes: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamPostInput$ {
  /** @deprecated use `TeamPostInput$inboundSchema` instead. */
  export const inboundSchema = TeamPostInput$inboundSchema;
  /** @deprecated use `TeamPostInput$outboundSchema` instead. */
  export const outboundSchema = TeamPostInput$outboundSchema;
  /** @deprecated use `TeamPostInput$Outbound` instead. */
  export type Outbound = TeamPostInput$Outbound;
}

export function teamPostInputToJSON(teamPostInput: TeamPostInput): string {
  return JSON.stringify(TeamPostInput$outboundSchema.parse(teamPostInput));
}

export function teamPostInputFromJSON(
  jsonString: string,
): SafeParseResult<TeamPostInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamPostInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamPostInput' from JSON`,
  );
}
