/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Audience,
  Audience$inboundSchema,
  Audience$Outbound,
  Audience$outboundSchema,
} from "./audience.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PhaseConfiguration,
  PhaseConfiguration$inboundSchema,
  PhaseConfiguration$Outbound,
  PhaseConfiguration$outboundSchema,
} from "./phaseconfiguration.js";

export type Phase = {
  /**
   * The phase ID
   */
  id: string;
  audiences: Array<Audience>;
  /**
   * The release phase name
   */
  name: string;
  configuration?: PhaseConfiguration | undefined;
};

/** @internal */
export const Phase$inboundSchema: z.ZodType<Phase, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    audiences: z.array(Audience$inboundSchema),
    name: z.string(),
    configuration: PhaseConfiguration$inboundSchema.optional(),
  });

/** @internal */
export type Phase$Outbound = {
  id: string;
  audiences: Array<Audience$Outbound>;
  name: string;
  configuration?: PhaseConfiguration$Outbound | undefined;
};

/** @internal */
export const Phase$outboundSchema: z.ZodType<
  Phase$Outbound,
  z.ZodTypeDef,
  Phase
> = z.object({
  id: z.string(),
  audiences: z.array(Audience$outboundSchema),
  name: z.string(),
  configuration: PhaseConfiguration$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Phase$ {
  /** @deprecated use `Phase$inboundSchema` instead. */
  export const inboundSchema = Phase$inboundSchema;
  /** @deprecated use `Phase$outboundSchema` instead. */
  export const outboundSchema = Phase$outboundSchema;
  /** @deprecated use `Phase$Outbound` instead. */
  export type Outbound = Phase$Outbound;
}

export function phaseToJSON(phase: Phase): string {
  return JSON.stringify(Phase$outboundSchema.parse(phase));
}

export function phaseFromJSON(
  jsonString: string,
): SafeParseResult<Phase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Phase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Phase' from JSON`,
  );
}
