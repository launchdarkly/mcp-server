/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InsightsMetricIndicatorRange,
  InsightsMetricIndicatorRange$inboundSchema,
  InsightsMetricIndicatorRange$Outbound,
  InsightsMetricIndicatorRange$outboundSchema,
} from "./insightsmetricindicatorrange.js";

export type InsightsMetricScore = {
  /**
   * The score for the metric
   */
  score: number;
  /**
   * The keys of the metrics that were aggregated to calculate this score
   */
  aggregateOf?: Array<string> | undefined;
  diffVsLastPeriod?: number | undefined;
  indicator: string;
  indicatorRange: InsightsMetricIndicatorRange;
  lastPeriod?: InsightsMetricScore | undefined;
};

/** @internal */
export const InsightsMetricScore$inboundSchema: z.ZodType<
  InsightsMetricScore,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number().int(),
  aggregateOf: z.array(z.string()).optional(),
  diffVsLastPeriod: z.number().int().optional(),
  indicator: z.string(),
  indicatorRange: InsightsMetricIndicatorRange$inboundSchema,
  lastPeriod: z.lazy(() => InsightsMetricScore$inboundSchema).optional(),
});

/** @internal */
export type InsightsMetricScore$Outbound = {
  score: number;
  aggregateOf?: Array<string> | undefined;
  diffVsLastPeriod?: number | undefined;
  indicator: string;
  indicatorRange: InsightsMetricIndicatorRange$Outbound;
  lastPeriod?: InsightsMetricScore$Outbound | undefined;
};

/** @internal */
export const InsightsMetricScore$outboundSchema: z.ZodType<
  InsightsMetricScore$Outbound,
  z.ZodTypeDef,
  InsightsMetricScore
> = z.object({
  score: z.number().int(),
  aggregateOf: z.array(z.string()).optional(),
  diffVsLastPeriod: z.number().int().optional(),
  indicator: z.string(),
  indicatorRange: InsightsMetricIndicatorRange$outboundSchema,
  lastPeriod: z.lazy(() => InsightsMetricScore$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsMetricScore$ {
  /** @deprecated use `InsightsMetricScore$inboundSchema` instead. */
  export const inboundSchema = InsightsMetricScore$inboundSchema;
  /** @deprecated use `InsightsMetricScore$outboundSchema` instead. */
  export const outboundSchema = InsightsMetricScore$outboundSchema;
  /** @deprecated use `InsightsMetricScore$Outbound` instead. */
  export type Outbound = InsightsMetricScore$Outbound;
}

export function insightsMetricScoreToJSON(
  insightsMetricScore: InsightsMetricScore,
): string {
  return JSON.stringify(
    InsightsMetricScore$outboundSchema.parse(insightsMetricScore),
  );
}

export function insightsMetricScoreFromJSON(
  jsonString: string,
): SafeParseResult<InsightsMetricScore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsMetricScore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsMetricScore' from JSON`,
  );
}
