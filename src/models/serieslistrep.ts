/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SeriesListRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: any };
  /**
   * Metadata about each series
   */
  metadata: Array<{ [k: string]: any }>;
  /**
   * An array of data points with timestamps. Each element of the array is an object with a 'time' field, whose value is the timestamp, and one or more key fields. If there are multiple key fields, they are labeled '0', '1', and so on, and are explained in the <code>metadata</code>.
   */
  series: Array<{ [k: string]: number }>;
};

/** @internal */
export const SeriesListRep$inboundSchema: z.ZodType<
  SeriesListRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(z.any()),
  metadata: z.array(z.record(z.any())),
  series: z.array(z.record(z.number().int())),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SeriesListRep$Outbound = {
  _links: { [k: string]: any };
  metadata: Array<{ [k: string]: any }>;
  series: Array<{ [k: string]: number }>;
};

/** @internal */
export const SeriesListRep$outboundSchema: z.ZodType<
  SeriesListRep$Outbound,
  z.ZodTypeDef,
  SeriesListRep
> = z.object({
  links: z.record(z.any()),
  metadata: z.array(z.record(z.any())),
  series: z.array(z.record(z.number().int())),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeriesListRep$ {
  /** @deprecated use `SeriesListRep$inboundSchema` instead. */
  export const inboundSchema = SeriesListRep$inboundSchema;
  /** @deprecated use `SeriesListRep$outboundSchema` instead. */
  export const outboundSchema = SeriesListRep$outboundSchema;
  /** @deprecated use `SeriesListRep$Outbound` instead. */
  export type Outbound = SeriesListRep$Outbound;
}

export function seriesListRepToJSON(seriesListRep: SeriesListRep): string {
  return JSON.stringify(SeriesListRep$outboundSchema.parse(seriesListRep));
}

export function seriesListRepFromJSON(
  jsonString: string,
): SafeParseResult<SeriesListRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeriesListRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeriesListRep' from JSON`,
  );
}
