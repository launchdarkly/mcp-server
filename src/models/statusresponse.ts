/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type StatusResponse = {
  integrationId?: string | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const StatusResponse$inboundSchema: z.ZodType<
  StatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationId: z.string().optional(),
  message: z.string().optional(),
  statusCode: z.number().int().optional(),
  timestamp: z.number().int().optional(),
});

/** @internal */
export type StatusResponse$Outbound = {
  integrationId?: string | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const StatusResponse$outboundSchema: z.ZodType<
  StatusResponse$Outbound,
  z.ZodTypeDef,
  StatusResponse
> = z.object({
  integrationId: z.string().optional(),
  message: z.string().optional(),
  statusCode: z.number().int().optional(),
  timestamp: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusResponse$ {
  /** @deprecated use `StatusResponse$inboundSchema` instead. */
  export const inboundSchema = StatusResponse$inboundSchema;
  /** @deprecated use `StatusResponse$outboundSchema` instead. */
  export const outboundSchema = StatusResponse$outboundSchema;
  /** @deprecated use `StatusResponse$Outbound` instead. */
  export type Outbound = StatusResponse$Outbound;
}

export function statusResponseToJSON(statusResponse: StatusResponse): string {
  return JSON.stringify(StatusResponse$outboundSchema.parse(statusResponse));
}

export function statusResponseFromJSON(
  jsonString: string,
): SafeParseResult<StatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusResponse' from JSON`,
  );
}
