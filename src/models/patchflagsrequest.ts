/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PatchFlagsRequest = {
  /**
   * Optional comment describing the change
   */
  comment?: string | undefined;
  /**
   * The instructions to perform when updating
   */
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const PatchFlagsRequest$inboundSchema: z.ZodType<
  PatchFlagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())),
});

/** @internal */
export type PatchFlagsRequest$Outbound = {
  comment?: string | undefined;
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const PatchFlagsRequest$outboundSchema: z.ZodType<
  PatchFlagsRequest$Outbound,
  z.ZodTypeDef,
  PatchFlagsRequest
> = z.object({
  comment: z.string().optional(),
  instructions: z.array(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchFlagsRequest$ {
  /** @deprecated use `PatchFlagsRequest$inboundSchema` instead. */
  export const inboundSchema = PatchFlagsRequest$inboundSchema;
  /** @deprecated use `PatchFlagsRequest$outboundSchema` instead. */
  export const outboundSchema = PatchFlagsRequest$outboundSchema;
  /** @deprecated use `PatchFlagsRequest$Outbound` instead. */
  export type Outbound = PatchFlagsRequest$Outbound;
}

export function patchFlagsRequestToJSON(
  patchFlagsRequest: PatchFlagsRequest,
): string {
  return JSON.stringify(
    PatchFlagsRequest$outboundSchema.parse(patchFlagsRequest),
  );
}

export function patchFlagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchFlagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchFlagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchFlagsRequest' from JSON`,
  );
}
