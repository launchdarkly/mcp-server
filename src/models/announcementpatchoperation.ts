/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Update announcement request body
 */
export type AnnouncementPatchOperation = {
  /**
   * The type of operation to perform
   */
  op: string;
  /**
   * A JSON Pointer string specifying the part of the document to operate on
   */
  path: string;
  /**
   * A JSON value used in "add", "replace", and "test" operations
   */
  value?: any | undefined;
};

/** @internal */
export const AnnouncementPatchOperation$inboundSchema: z.ZodType<
  AnnouncementPatchOperation,
  z.ZodTypeDef,
  unknown
> = z.object({
  op: z.string(),
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type AnnouncementPatchOperation$Outbound = {
  op: string;
  path: string;
  value?: any | undefined;
};

/** @internal */
export const AnnouncementPatchOperation$outboundSchema: z.ZodType<
  AnnouncementPatchOperation$Outbound,
  z.ZodTypeDef,
  AnnouncementPatchOperation
> = z.object({
  op: z.string(),
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementPatchOperation$ {
  /** @deprecated use `AnnouncementPatchOperation$inboundSchema` instead. */
  export const inboundSchema = AnnouncementPatchOperation$inboundSchema;
  /** @deprecated use `AnnouncementPatchOperation$outboundSchema` instead. */
  export const outboundSchema = AnnouncementPatchOperation$outboundSchema;
  /** @deprecated use `AnnouncementPatchOperation$Outbound` instead. */
  export type Outbound = AnnouncementPatchOperation$Outbound;
}

export function announcementPatchOperationToJSON(
  announcementPatchOperation: AnnouncementPatchOperation,
): string {
  return JSON.stringify(
    AnnouncementPatchOperation$outboundSchema.parse(announcementPatchOperation),
  );
}

export function announcementPatchOperationFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementPatchOperation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementPatchOperation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementPatchOperation' from JSON`,
  );
}
