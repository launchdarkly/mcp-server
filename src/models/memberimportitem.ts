/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MemberImportItem = {
  /**
   * An error message, including CSV line number, if the <code>status</code> is <code>error</code>
   */
  message?: string | undefined;
  /**
   * Whether this member can be successfully imported (<code>success</code>) or not (<code>error</code>). Even if the status is <code>success</code>, members are only added to a team on a <code>201</code> response.
   */
  status: string;
  /**
   * The email address for the member requested to be added to this team. May be blank or an error, such as 'invalid email format', if the email address cannot be found or parsed.
   */
  value: string;
};

/** @internal */
export const MemberImportItem$inboundSchema: z.ZodType<
  MemberImportItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  status: z.string(),
  value: z.string(),
});

/** @internal */
export type MemberImportItem$Outbound = {
  message?: string | undefined;
  status: string;
  value: string;
};

/** @internal */
export const MemberImportItem$outboundSchema: z.ZodType<
  MemberImportItem$Outbound,
  z.ZodTypeDef,
  MemberImportItem
> = z.object({
  message: z.string().optional(),
  status: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberImportItem$ {
  /** @deprecated use `MemberImportItem$inboundSchema` instead. */
  export const inboundSchema = MemberImportItem$inboundSchema;
  /** @deprecated use `MemberImportItem$outboundSchema` instead. */
  export const outboundSchema = MemberImportItem$outboundSchema;
  /** @deprecated use `MemberImportItem$Outbound` instead. */
  export type Outbound = MemberImportItem$Outbound;
}

export function memberImportItemToJSON(
  memberImportItem: MemberImportItem,
): string {
  return JSON.stringify(
    MemberImportItem$outboundSchema.parse(memberImportItem),
  );
}

export function memberImportItemFromJSON(
  jsonString: string,
): SafeParseResult<MemberImportItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemberImportItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemberImportItem' from JSON`,
  );
}
