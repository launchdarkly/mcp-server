/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AnnouncementLink = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AnnouncementLink$inboundSchema: z.ZodType<
  AnnouncementLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type AnnouncementLink$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AnnouncementLink$outboundSchema: z.ZodType<
  AnnouncementLink$Outbound,
  z.ZodTypeDef,
  AnnouncementLink
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementLink$ {
  /** @deprecated use `AnnouncementLink$inboundSchema` instead. */
  export const inboundSchema = AnnouncementLink$inboundSchema;
  /** @deprecated use `AnnouncementLink$outboundSchema` instead. */
  export const outboundSchema = AnnouncementLink$outboundSchema;
  /** @deprecated use `AnnouncementLink$Outbound` instead. */
  export type Outbound = AnnouncementLink$Outbound;
}

export function announcementLinkToJSON(
  announcementLink: AnnouncementLink,
): string {
  return JSON.stringify(
    AnnouncementLink$outboundSchema.parse(announcementLink),
  );
}

export function announcementLinkFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementLink' from JSON`,
  );
}
