/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Extinction = {
  /**
   * The identifier for the revision where flag became extinct. For example, a commit SHA.
   */
  revision: string;
  /**
   * Description of the extinction. For example, the commit message for the revision.
   */
  message: string;
  time: number;
  /**
   * The feature flag key
   */
  flagKey: string;
  /**
   * The project key
   */
  projKey: string;
};

/** @internal */
export const Extinction$inboundSchema: z.ZodType<
  Extinction,
  z.ZodTypeDef,
  unknown
> = z.object({
  revision: z.string(),
  message: z.string(),
  time: z.number().int(),
  flagKey: z.string(),
  projKey: z.string(),
});

/** @internal */
export type Extinction$Outbound = {
  revision: string;
  message: string;
  time: number;
  flagKey: string;
  projKey: string;
};

/** @internal */
export const Extinction$outboundSchema: z.ZodType<
  Extinction$Outbound,
  z.ZodTypeDef,
  Extinction
> = z.object({
  revision: z.string(),
  message: z.string(),
  time: z.number().int(),
  flagKey: z.string(),
  projKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Extinction$ {
  /** @deprecated use `Extinction$inboundSchema` instead. */
  export const inboundSchema = Extinction$inboundSchema;
  /** @deprecated use `Extinction$outboundSchema` instead. */
  export const outboundSchema = Extinction$outboundSchema;
  /** @deprecated use `Extinction$Outbound` instead. */
  export type Outbound = Extinction$Outbound;
}

export function extinctionToJSON(extinction: Extinction): string {
  return JSON.stringify(Extinction$outboundSchema.parse(extinction));
}

export function extinctionFromJSON(
  jsonString: string,
): SafeParseResult<Extinction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Extinction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Extinction' from JSON`,
  );
}
