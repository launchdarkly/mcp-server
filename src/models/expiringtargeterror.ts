/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExpiringTargetError = {
  /**
   * The index of the PATCH instruction where the error occurred
   */
  instructionIndex: number;
  /**
   * The error message related to a failed PATCH instruction
   */
  message: string;
};

/** @internal */
export const ExpiringTargetError$inboundSchema: z.ZodType<
  ExpiringTargetError,
  z.ZodTypeDef,
  unknown
> = z.object({
  instructionIndex: z.number().int(),
  message: z.string(),
});

/** @internal */
export type ExpiringTargetError$Outbound = {
  instructionIndex: number;
  message: string;
};

/** @internal */
export const ExpiringTargetError$outboundSchema: z.ZodType<
  ExpiringTargetError$Outbound,
  z.ZodTypeDef,
  ExpiringTargetError
> = z.object({
  instructionIndex: z.number().int(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringTargetError$ {
  /** @deprecated use `ExpiringTargetError$inboundSchema` instead. */
  export const inboundSchema = ExpiringTargetError$inboundSchema;
  /** @deprecated use `ExpiringTargetError$outboundSchema` instead. */
  export const outboundSchema = ExpiringTargetError$outboundSchema;
  /** @deprecated use `ExpiringTargetError$Outbound` instead. */
  export type Outbound = ExpiringTargetError$Outbound;
}

export function expiringTargetErrorToJSON(
  expiringTargetError: ExpiringTargetError,
): string {
  return JSON.stringify(
    ExpiringTargetError$outboundSchema.parse(expiringTargetError),
  );
}

export function expiringTargetErrorFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringTargetError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringTargetError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringTargetError' from JSON`,
  );
}
