/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BayesianBetaBinomialStatsRep,
  BayesianBetaBinomialStatsRep$inboundSchema,
  BayesianBetaBinomialStatsRep$Outbound,
  BayesianBetaBinomialStatsRep$outboundSchema,
} from "./bayesianbetabinomialstatsrep.js";
import {
  BayesianNormalStatsRep,
  BayesianNormalStatsRep$inboundSchema,
  BayesianNormalStatsRep$Outbound,
  BayesianNormalStatsRep$outboundSchema,
} from "./bayesiannormalstatsrep.js";
import {
  CredibleIntervalRep,
  CredibleIntervalRep$inboundSchema,
  CredibleIntervalRep$Outbound,
  CredibleIntervalRep$outboundSchema,
} from "./credibleintervalrep.js";
import {
  Distribution,
  Distribution$inboundSchema,
  Distribution$Outbound,
  Distribution$outboundSchema,
} from "./distribution.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RelativeDifferenceRep,
  RelativeDifferenceRep$inboundSchema,
  RelativeDifferenceRep$Outbound,
  RelativeDifferenceRep$outboundSchema,
} from "./relativedifferencerep.js";

/**
 * The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name
 */
export const ModelEnum = {
  BayesianNormal: "bayesianNormal",
  BayesianBeta: "bayesianBeta",
} as const;
/**
 * The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name
 */
export type ModelEnum = ClosedEnum<typeof ModelEnum>;

export type TreatmentResultRep = {
  /**
   * The ID of the treatment
   */
  treatmentId?: string | undefined;
  /**
   * The name of the treatment
   */
  treatmentName?: string | undefined;
  /**
   * The average value of the variation in this sample. It doesnâ€™t capture the uncertainty in the measurement, so it should not be the only measurement you use to make decisions.
   */
  mean?: number | undefined;
  /**
   * The mean of the data, with no priors effecting the result.
   */
  dataMean?: number | undefined;
  /**
   * The standard deviation of the data, with no priors effecting the result.
   */
  dataStdDev?: number | undefined;
  credibleInterval?: CredibleIntervalRep | undefined;
  /**
   * The likelihood that this variation has the biggest effect on the primary metric. The variation with the highest probability is likely the best of the variations you're testing
   */
  pBest?: number | undefined;
  /**
   * Estimates of the relative difference between this treatment's mean and the mean of each other treatment
   */
  relativeDifferences?: Array<RelativeDifferenceRep> | undefined;
  /**
   * The number of units exposed to this treatment that have event values, including those that are configured to default to 0
   */
  units?: number | undefined;
  /**
   * The number of units exposed to this treatment.
   */
  traffic?: number | undefined;
  /**
   * The sum of the event values for the units exposed to this treatment.
   */
  eventValuesSum?: number | undefined;
  distribution?: Distribution | undefined;
  /**
   * The outcome-covariate correlation
   */
  correlation?: number | undefined;
  /**
   * The ratio of the outcome SD to covariate SD
   */
  standardDeviationRatio?: number | undefined;
  /**
   * The imbalance between the covariate mean for the arm and the covariate mean for the experiment
   */
  covariateImbalance?: number | undefined;
  /**
   * The reduction in variance resulting from CUPED
   */
  varianceReduction?: number | undefined;
  /**
   * The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name
   */
  model?: ModelEnum | undefined;
  bayesianNormal?: BayesianNormalStatsRep | undefined;
  bayesianBeta?: BayesianBetaBinomialStatsRep | undefined;
};

/** @internal */
export const ModelEnum$inboundSchema: z.ZodNativeEnum<typeof ModelEnum> = z
  .nativeEnum(ModelEnum);

/** @internal */
export const ModelEnum$outboundSchema: z.ZodNativeEnum<typeof ModelEnum> =
  ModelEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelEnum$ {
  /** @deprecated use `ModelEnum$inboundSchema` instead. */
  export const inboundSchema = ModelEnum$inboundSchema;
  /** @deprecated use `ModelEnum$outboundSchema` instead. */
  export const outboundSchema = ModelEnum$outboundSchema;
}

/** @internal */
export const TreatmentResultRep$inboundSchema: z.ZodType<
  TreatmentResultRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  treatmentId: z.string().optional(),
  treatmentName: z.string().optional(),
  mean: z.number().optional(),
  dataMean: z.number().optional(),
  dataStdDev: z.number().optional(),
  credibleInterval: CredibleIntervalRep$inboundSchema.optional(),
  pBest: z.number().optional(),
  relativeDifferences: z.array(RelativeDifferenceRep$inboundSchema).optional(),
  units: z.number().int().optional(),
  traffic: z.number().int().optional(),
  eventValuesSum: z.number().optional(),
  distribution: Distribution$inboundSchema.optional(),
  correlation: z.number().optional(),
  standardDeviationRatio: z.number().optional(),
  covariateImbalance: z.number().optional(),
  varianceReduction: z.number().optional(),
  model: ModelEnum$inboundSchema.optional(),
  bayesianNormal: BayesianNormalStatsRep$inboundSchema.optional(),
  bayesianBeta: BayesianBetaBinomialStatsRep$inboundSchema.optional(),
});

/** @internal */
export type TreatmentResultRep$Outbound = {
  treatmentId?: string | undefined;
  treatmentName?: string | undefined;
  mean?: number | undefined;
  dataMean?: number | undefined;
  dataStdDev?: number | undefined;
  credibleInterval?: CredibleIntervalRep$Outbound | undefined;
  pBest?: number | undefined;
  relativeDifferences?: Array<RelativeDifferenceRep$Outbound> | undefined;
  units?: number | undefined;
  traffic?: number | undefined;
  eventValuesSum?: number | undefined;
  distribution?: Distribution$Outbound | undefined;
  correlation?: number | undefined;
  standardDeviationRatio?: number | undefined;
  covariateImbalance?: number | undefined;
  varianceReduction?: number | undefined;
  model?: string | undefined;
  bayesianNormal?: BayesianNormalStatsRep$Outbound | undefined;
  bayesianBeta?: BayesianBetaBinomialStatsRep$Outbound | undefined;
};

/** @internal */
export const TreatmentResultRep$outboundSchema: z.ZodType<
  TreatmentResultRep$Outbound,
  z.ZodTypeDef,
  TreatmentResultRep
> = z.object({
  treatmentId: z.string().optional(),
  treatmentName: z.string().optional(),
  mean: z.number().optional(),
  dataMean: z.number().optional(),
  dataStdDev: z.number().optional(),
  credibleInterval: CredibleIntervalRep$outboundSchema.optional(),
  pBest: z.number().optional(),
  relativeDifferences: z.array(RelativeDifferenceRep$outboundSchema).optional(),
  units: z.number().int().optional(),
  traffic: z.number().int().optional(),
  eventValuesSum: z.number().optional(),
  distribution: Distribution$outboundSchema.optional(),
  correlation: z.number().optional(),
  standardDeviationRatio: z.number().optional(),
  covariateImbalance: z.number().optional(),
  varianceReduction: z.number().optional(),
  model: ModelEnum$outboundSchema.optional(),
  bayesianNormal: BayesianNormalStatsRep$outboundSchema.optional(),
  bayesianBeta: BayesianBetaBinomialStatsRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TreatmentResultRep$ {
  /** @deprecated use `TreatmentResultRep$inboundSchema` instead. */
  export const inboundSchema = TreatmentResultRep$inboundSchema;
  /** @deprecated use `TreatmentResultRep$outboundSchema` instead. */
  export const outboundSchema = TreatmentResultRep$outboundSchema;
  /** @deprecated use `TreatmentResultRep$Outbound` instead. */
  export type Outbound = TreatmentResultRep$Outbound;
}

export function treatmentResultRepToJSON(
  treatmentResultRep: TreatmentResultRep,
): string {
  return JSON.stringify(
    TreatmentResultRep$outboundSchema.parse(treatmentResultRep),
  );
}

export function treatmentResultRepFromJSON(
  jsonString: string,
): SafeParseResult<TreatmentResultRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TreatmentResultRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TreatmentResultRep' from JSON`,
  );
}
