/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AudienceConfiguration,
  AudienceConfiguration$inboundSchema,
  AudienceConfiguration$Outbound,
  AudienceConfiguration$outboundSchema,
} from "./audienceconfiguration.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AudiencePost = {
  /**
   * A project-unique key for the environment.
   */
  environmentKey: string;
  /**
   * The audience name
   */
  name: string;
  /**
   * Segments targeted by this audience.
   */
  segmentKeys?: Array<string> | undefined;
  configuration?: AudienceConfiguration | undefined;
};

/** @internal */
export const AudiencePost$inboundSchema: z.ZodType<
  AudiencePost,
  z.ZodTypeDef,
  unknown
> = z.object({
  environmentKey: z.string(),
  name: z.string(),
  segmentKeys: z.array(z.string()).optional(),
  configuration: AudienceConfiguration$inboundSchema.optional(),
});

/** @internal */
export type AudiencePost$Outbound = {
  environmentKey: string;
  name: string;
  segmentKeys?: Array<string> | undefined;
  configuration?: AudienceConfiguration$Outbound | undefined;
};

/** @internal */
export const AudiencePost$outboundSchema: z.ZodType<
  AudiencePost$Outbound,
  z.ZodTypeDef,
  AudiencePost
> = z.object({
  environmentKey: z.string(),
  name: z.string(),
  segmentKeys: z.array(z.string()).optional(),
  configuration: AudienceConfiguration$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AudiencePost$ {
  /** @deprecated use `AudiencePost$inboundSchema` instead. */
  export const inboundSchema = AudiencePost$inboundSchema;
  /** @deprecated use `AudiencePost$outboundSchema` instead. */
  export const outboundSchema = AudiencePost$outboundSchema;
  /** @deprecated use `AudiencePost$Outbound` instead. */
  export type Outbound = AudiencePost$Outbound;
}

export function audiencePostToJSON(audiencePost: AudiencePost): string {
  return JSON.stringify(AudiencePost$outboundSchema.parse(audiencePost));
}

export function audiencePostFromJSON(
  jsonString: string,
): SafeParseResult<AudiencePost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AudiencePost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AudiencePost' from JSON`,
  );
}
