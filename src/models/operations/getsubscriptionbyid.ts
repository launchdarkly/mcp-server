/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSubscriptionByIDRequest = {
  /**
   * The integration key
   */
  integrationKey: string;
  /**
   * The subscription ID
   */
  id: string;
};

/** @internal */
export const GetSubscriptionByIDRequest$inboundSchema: z.ZodType<
  GetSubscriptionByIDRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
  id: z.string(),
});

/** @internal */
export type GetSubscriptionByIDRequest$Outbound = {
  integrationKey: string;
  id: string;
};

/** @internal */
export const GetSubscriptionByIDRequest$outboundSchema: z.ZodType<
  GetSubscriptionByIDRequest$Outbound,
  z.ZodTypeDef,
  GetSubscriptionByIDRequest
> = z.object({
  integrationKey: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionByIDRequest$ {
  /** @deprecated use `GetSubscriptionByIDRequest$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionByIDRequest$inboundSchema;
  /** @deprecated use `GetSubscriptionByIDRequest$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionByIDRequest$outboundSchema;
  /** @deprecated use `GetSubscriptionByIDRequest$Outbound` instead. */
  export type Outbound = GetSubscriptionByIDRequest$Outbound;
}

export function getSubscriptionByIDRequestToJSON(
  getSubscriptionByIDRequest: GetSubscriptionByIDRequest,
): string {
  return JSON.stringify(
    GetSubscriptionByIDRequest$outboundSchema.parse(getSubscriptionByIDRequest),
  );
}

export function getSubscriptionByIDRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionByIDRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionByIDRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionByIDRequest' from JSON`,
  );
}
