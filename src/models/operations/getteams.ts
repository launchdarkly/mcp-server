/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTeamsRequest = {
  /**
   * The number of teams to return in the response. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and returns the next `limit` items.
   */
  offset?: number | undefined;
  /**
   * A comma-separated list of filters. Each filter is constructed as `field:value`.
   */
  filter?: string | undefined;
  /**
   * A comma-separated list of properties that can reveal additional information in the response.
   */
  expand?: string | undefined;
};

/** @internal */
export const GetTeamsRequest$inboundSchema: z.ZodType<
  GetTeamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetTeamsRequest$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetTeamsRequest$outboundSchema: z.ZodType<
  GetTeamsRequest$Outbound,
  z.ZodTypeDef,
  GetTeamsRequest
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeamsRequest$ {
  /** @deprecated use `GetTeamsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTeamsRequest$inboundSchema;
  /** @deprecated use `GetTeamsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTeamsRequest$outboundSchema;
  /** @deprecated use `GetTeamsRequest$Outbound` instead. */
  export type Outbound = GetTeamsRequest$Outbound;
}

export function getTeamsRequestToJSON(
  getTeamsRequest: GetTeamsRequest,
): string {
  return JSON.stringify(GetTeamsRequest$outboundSchema.parse(getTeamsRequest));
}

export function getTeamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTeamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeamsRequest' from JSON`,
  );
}
