/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetExperimentationUnitsUsageRequest = {
  /**
   * The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month.
   */
  from?: string | undefined;
  /**
   * The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time.
   */
  to?: string | undefined;
  /**
   * A project key. If specified, `environmentKey` is required and results apply to the corresponding environment in this project.
   */
  projectKey?: string | undefined;
  /**
   * An environment key. If specified, `projectKey` is required and results apply to the corresponding environment in this project.
   */
  environmentKey?: string | undefined;
};

/** @internal */
export const GetExperimentationUnitsUsageRequest$inboundSchema: z.ZodType<
  GetExperimentationUnitsUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  to: z.string().optional(),
  projectKey: z.string().optional(),
  environmentKey: z.string().optional(),
});

/** @internal */
export type GetExperimentationUnitsUsageRequest$Outbound = {
  from?: string | undefined;
  to?: string | undefined;
  projectKey?: string | undefined;
  environmentKey?: string | undefined;
};

/** @internal */
export const GetExperimentationUnitsUsageRequest$outboundSchema: z.ZodType<
  GetExperimentationUnitsUsageRequest$Outbound,
  z.ZodTypeDef,
  GetExperimentationUnitsUsageRequest
> = z.object({
  from: z.string().optional(),
  to: z.string().optional(),
  projectKey: z.string().optional(),
  environmentKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExperimentationUnitsUsageRequest$ {
  /** @deprecated use `GetExperimentationUnitsUsageRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetExperimentationUnitsUsageRequest$inboundSchema;
  /** @deprecated use `GetExperimentationUnitsUsageRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetExperimentationUnitsUsageRequest$outboundSchema;
  /** @deprecated use `GetExperimentationUnitsUsageRequest$Outbound` instead. */
  export type Outbound = GetExperimentationUnitsUsageRequest$Outbound;
}

export function getExperimentationUnitsUsageRequestToJSON(
  getExperimentationUnitsUsageRequest: GetExperimentationUnitsUsageRequest,
): string {
  return JSON.stringify(
    GetExperimentationUnitsUsageRequest$outboundSchema.parse(
      getExperimentationUnitsUsageRequest,
    ),
  );
}

export function getExperimentationUnitsUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetExperimentationUnitsUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetExperimentationUnitsUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetExperimentationUnitsUsageRequest' from JSON`,
  );
}
