/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostMetricRequest = {
  /**
   * The project key
   */
  projectKey: string;
  metricPost: components.MetricPost;
};

/** @internal */
export const PostMetricRequest$inboundSchema: z.ZodType<
  PostMetricRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  MetricPost: components.MetricPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "MetricPost": "metricPost",
  });
});

/** @internal */
export type PostMetricRequest$Outbound = {
  projectKey: string;
  MetricPost: components.MetricPost$Outbound;
};

/** @internal */
export const PostMetricRequest$outboundSchema: z.ZodType<
  PostMetricRequest$Outbound,
  z.ZodTypeDef,
  PostMetricRequest
> = z.object({
  projectKey: z.string(),
  metricPost: components.MetricPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    metricPost: "MetricPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostMetricRequest$ {
  /** @deprecated use `PostMetricRequest$inboundSchema` instead. */
  export const inboundSchema = PostMetricRequest$inboundSchema;
  /** @deprecated use `PostMetricRequest$outboundSchema` instead. */
  export const outboundSchema = PostMetricRequest$outboundSchema;
  /** @deprecated use `PostMetricRequest$Outbound` instead. */
  export type Outbound = PostMetricRequest$Outbound;
}

export function postMetricRequestToJSON(
  postMetricRequest: PostMetricRequest,
): string {
  return JSON.stringify(
    PostMetricRequest$outboundSchema.parse(postMetricRequest),
  );
}

export function postMetricRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostMetricRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostMetricRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostMetricRequest' from JSON`,
  );
}
