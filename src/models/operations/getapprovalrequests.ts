/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApprovalRequestsRequest = {
  /**
   * A comma-separated list of filters. Each filter is of the form `field operator value`. Supported fields are explained above.
   */
  filter?: string | undefined;
  /**
   * A comma-separated list of fields to expand in the response. Supported fields are explained above.
   */
  expand?: string | undefined;
  /**
   * The number of approvals to return. Defaults to 20. Maximum limit is 200.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetApprovalRequestsRequest$inboundSchema: z.ZodType<
  GetApprovalRequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  expand: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetApprovalRequestsRequest$Outbound = {
  filter?: string | undefined;
  expand?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetApprovalRequestsRequest$outboundSchema: z.ZodType<
  GetApprovalRequestsRequest$Outbound,
  z.ZodTypeDef,
  GetApprovalRequestsRequest
> = z.object({
  filter: z.string().optional(),
  expand: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApprovalRequestsRequest$ {
  /** @deprecated use `GetApprovalRequestsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApprovalRequestsRequest$inboundSchema;
  /** @deprecated use `GetApprovalRequestsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApprovalRequestsRequest$outboundSchema;
  /** @deprecated use `GetApprovalRequestsRequest$Outbound` instead. */
  export type Outbound = GetApprovalRequestsRequest$Outbound;
}

export function getApprovalRequestsRequestToJSON(
  getApprovalRequestsRequest: GetApprovalRequestsRequest,
): string {
  return JSON.stringify(
    GetApprovalRequestsRequest$outboundSchema.parse(getApprovalRequestsRequest),
  );
}

export function getApprovalRequestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApprovalRequestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApprovalRequestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApprovalRequestsRequest' from JSON`,
  );
}
