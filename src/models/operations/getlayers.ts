/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetLayersRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * A comma-separated list of filters. This endpoint only accepts filtering by `experimentKey`. The filter returns layers which include that experiment for the selected environment(s). For example: `filter=reservations.experimentKey contains expKey`.
   */
  filter?: string | undefined;
};

/** @internal */
export const GetLayersRequest$inboundSchema: z.ZodType<
  GetLayersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  filter: z.string().optional(),
});

/** @internal */
export type GetLayersRequest$Outbound = {
  projectKey: string;
  filter?: string | undefined;
};

/** @internal */
export const GetLayersRequest$outboundSchema: z.ZodType<
  GetLayersRequest$Outbound,
  z.ZodTypeDef,
  GetLayersRequest
> = z.object({
  projectKey: z.string(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLayersRequest$ {
  /** @deprecated use `GetLayersRequest$inboundSchema` instead. */
  export const inboundSchema = GetLayersRequest$inboundSchema;
  /** @deprecated use `GetLayersRequest$outboundSchema` instead. */
  export const outboundSchema = GetLayersRequest$outboundSchema;
  /** @deprecated use `GetLayersRequest$Outbound` instead. */
  export type Outbound = GetLayersRequest$Outbound;
}

export function getLayersRequestToJSON(
  getLayersRequest: GetLayersRequest,
): string {
  return JSON.stringify(
    GetLayersRequest$outboundSchema.parse(getLayersRequest),
  );
}

export function getLayersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLayersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLayersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLayersRequest' from JSON`,
  );
}
