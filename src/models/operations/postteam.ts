/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostTeamRequest = {
  /**
   * A comma-separated list of properties that can reveal additional information in the response. Supported fields are explained above.
   */
  expand?: string | undefined;
  teamPostInput: components.TeamPostInput;
};

/** @internal */
export const PostTeamRequest$inboundSchema: z.ZodType<
  PostTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.string().optional(),
  teamPostInput: components.TeamPostInput$inboundSchema,
});

/** @internal */
export type PostTeamRequest$Outbound = {
  expand?: string | undefined;
  teamPostInput: components.TeamPostInput$Outbound;
};

/** @internal */
export const PostTeamRequest$outboundSchema: z.ZodType<
  PostTeamRequest$Outbound,
  z.ZodTypeDef,
  PostTeamRequest
> = z.object({
  expand: z.string().optional(),
  teamPostInput: components.TeamPostInput$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTeamRequest$ {
  /** @deprecated use `PostTeamRequest$inboundSchema` instead. */
  export const inboundSchema = PostTeamRequest$inboundSchema;
  /** @deprecated use `PostTeamRequest$outboundSchema` instead. */
  export const outboundSchema = PostTeamRequest$outboundSchema;
  /** @deprecated use `PostTeamRequest$Outbound` instead. */
  export type Outbound = PostTeamRequest$Outbound;
}

export function postTeamRequestToJSON(
  postTeamRequest: PostTeamRequest,
): string {
  return JSON.stringify(PostTeamRequest$outboundSchema.parse(postTeamRequest));
}

export function postTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTeamRequest' from JSON`,
  );
}
