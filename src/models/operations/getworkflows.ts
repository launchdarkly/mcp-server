/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkflowsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Filter results by workflow status. Valid status filters are `active`, `completed`, and `failed`.
   */
  status?: string | undefined;
  /**
   * A field to sort the items by. Prefix field by a dash ( - ) to sort in descending order. This endpoint supports sorting by `creationDate` or `stopDate`.
   */
  sort?: string | undefined;
  /**
   * The maximum number of workflows to return. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Defaults to 0. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetWorkflowsRequest$inboundSchema: z.ZodType<
  GetWorkflowsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  status: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetWorkflowsRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  environmentKey: string;
  status?: string | undefined;
  sort?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetWorkflowsRequest$outboundSchema: z.ZodType<
  GetWorkflowsRequest$Outbound,
  z.ZodTypeDef,
  GetWorkflowsRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  status: z.string().optional(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowsRequest$ {
  /** @deprecated use `GetWorkflowsRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowsRequest$inboundSchema;
  /** @deprecated use `GetWorkflowsRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowsRequest$outboundSchema;
  /** @deprecated use `GetWorkflowsRequest$Outbound` instead. */
  export type Outbound = GetWorkflowsRequest$Outbound;
}

export function getWorkflowsRequestToJSON(
  getWorkflowsRequest: GetWorkflowsRequest,
): string {
  return JSON.stringify(
    GetWorkflowsRequest$outboundSchema.parse(getWorkflowsRequest),
  );
}

export function getWorkflowsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowsRequest' from JSON`,
  );
}
