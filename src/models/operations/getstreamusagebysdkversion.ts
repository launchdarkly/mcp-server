/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStreamUsageBySDKVersionRequest = {
  /**
   * The source of streaming connections to describe. Must be either `client` or `server`.
   */
  source: string;
  /**
   * The series of data returned starts from this timestamp. Defaults to 24 hours ago.
   */
  from?: string | undefined;
  /**
   * The series of data returned ends at this timestamp. Defaults to the current time.
   */
  to?: string | undefined;
  /**
   * The timezone to use for breaks between days when returning daily data.
   */
  tz?: string | undefined;
  /**
   * If included, this filters the returned series to only those that match this SDK name.
   */
  sdk?: string | undefined;
  /**
   * If included, this filters the returned series to only those that match this SDK version.
   */
  version?: string | undefined;
};

/** @internal */
export const GetStreamUsageBySDKVersionRequest$inboundSchema: z.ZodType<
  GetStreamUsageBySDKVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  from: z.string().optional(),
  to: z.string().optional(),
  tz: z.string().optional(),
  sdk: z.string().optional(),
  version: z.string().optional(),
});

/** @internal */
export type GetStreamUsageBySDKVersionRequest$Outbound = {
  source: string;
  from?: string | undefined;
  to?: string | undefined;
  tz?: string | undefined;
  sdk?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetStreamUsageBySDKVersionRequest$outboundSchema: z.ZodType<
  GetStreamUsageBySDKVersionRequest$Outbound,
  z.ZodTypeDef,
  GetStreamUsageBySDKVersionRequest
> = z.object({
  source: z.string(),
  from: z.string().optional(),
  to: z.string().optional(),
  tz: z.string().optional(),
  sdk: z.string().optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamUsageBySDKVersionRequest$ {
  /** @deprecated use `GetStreamUsageBySDKVersionRequest$inboundSchema` instead. */
  export const inboundSchema = GetStreamUsageBySDKVersionRequest$inboundSchema;
  /** @deprecated use `GetStreamUsageBySDKVersionRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetStreamUsageBySDKVersionRequest$outboundSchema;
  /** @deprecated use `GetStreamUsageBySDKVersionRequest$Outbound` instead. */
  export type Outbound = GetStreamUsageBySDKVersionRequest$Outbound;
}

export function getStreamUsageBySDKVersionRequestToJSON(
  getStreamUsageBySDKVersionRequest: GetStreamUsageBySDKVersionRequest,
): string {
  return JSON.stringify(
    GetStreamUsageBySDKVersionRequest$outboundSchema.parse(
      getStreamUsageBySDKVersionRequest,
    ),
  );
}

export function getStreamUsageBySDKVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamUsageBySDKVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamUsageBySDKVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamUsageBySDKVersionRequest' from JSON`,
  );
}
