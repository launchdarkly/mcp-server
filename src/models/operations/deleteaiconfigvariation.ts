/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const DeleteAIConfigVariationLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type DeleteAIConfigVariationLDAPIVersion = ClosedEnum<
  typeof DeleteAIConfigVariationLDAPIVersion
>;

export type DeleteAIConfigVariationRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: DeleteAIConfigVariationLDAPIVersion;
  projectKey: string;
  configKey: string;
  variationKey: string;
};

/** @internal */
export const DeleteAIConfigVariationLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeleteAIConfigVariationLDAPIVersion
> = z.nativeEnum(DeleteAIConfigVariationLDAPIVersion);

/** @internal */
export const DeleteAIConfigVariationLDAPIVersion$outboundSchema:
  z.ZodNativeEnum<typeof DeleteAIConfigVariationLDAPIVersion> =
    DeleteAIConfigVariationLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAIConfigVariationLDAPIVersion$ {
  /** @deprecated use `DeleteAIConfigVariationLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAIConfigVariationLDAPIVersion$inboundSchema;
  /** @deprecated use `DeleteAIConfigVariationLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAIConfigVariationLDAPIVersion$outboundSchema;
}

/** @internal */
export const DeleteAIConfigVariationRequest$inboundSchema: z.ZodType<
  DeleteAIConfigVariationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": DeleteAIConfigVariationLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  configKey: z.string(),
  variationKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type DeleteAIConfigVariationRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  configKey: string;
  variationKey: string;
};

/** @internal */
export const DeleteAIConfigVariationRequest$outboundSchema: z.ZodType<
  DeleteAIConfigVariationRequest$Outbound,
  z.ZodTypeDef,
  DeleteAIConfigVariationRequest
> = z.object({
  ldAPIVersion: DeleteAIConfigVariationLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  configKey: z.string(),
  variationKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAIConfigVariationRequest$ {
  /** @deprecated use `DeleteAIConfigVariationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAIConfigVariationRequest$inboundSchema;
  /** @deprecated use `DeleteAIConfigVariationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAIConfigVariationRequest$outboundSchema;
  /** @deprecated use `DeleteAIConfigVariationRequest$Outbound` instead. */
  export type Outbound = DeleteAIConfigVariationRequest$Outbound;
}

export function deleteAIConfigVariationRequestToJSON(
  deleteAIConfigVariationRequest: DeleteAIConfigVariationRequest,
): string {
  return JSON.stringify(
    DeleteAIConfigVariationRequest$outboundSchema.parse(
      deleteAIConfigVariationRequest,
    ),
  );
}

export function deleteAIConfigVariationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAIConfigVariationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAIConfigVariationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAIConfigVariationRequest' from JSON`,
  );
}
