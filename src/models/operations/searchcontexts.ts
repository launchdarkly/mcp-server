/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SearchContextsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Specifies the maximum number of items in the collection to return (max: 50, default: 20)
   */
  limit?: number | undefined;
  /**
   * Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the `next` link we provide instead.
   */
  continuationToken?: string | undefined;
  /**
   * Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying `ts` for this value, or descending order by specifying `-ts`.
   */
  sort?: string | undefined;
  /**
   * A comma-separated list of context filters. To learn more about the filter syntax, read [Filtering contexts and context instances](https://launchdarkly.com/docs/ld-docs/api/contexts#filtering-contexts-and-context-instances).
   */
  filter?: string | undefined;
  /**
   * Specifies whether to include or omit the total count of matching contexts. Defaults to true.
   */
  includeTotalCount?: boolean | undefined;
  contextSearch: models.ContextSearch;
};

/** @internal */
export const SearchContextsRequest$inboundSchema: z.ZodType<
  SearchContextsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  includeTotalCount: z.boolean().optional(),
  ContextSearch: models.ContextSearch$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ContextSearch": "contextSearch",
  });
});

/** @internal */
export type SearchContextsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  continuationToken?: string | undefined;
  sort?: string | undefined;
  filter?: string | undefined;
  includeTotalCount?: boolean | undefined;
  ContextSearch: models.ContextSearch$Outbound;
};

/** @internal */
export const SearchContextsRequest$outboundSchema: z.ZodType<
  SearchContextsRequest$Outbound,
  z.ZodTypeDef,
  SearchContextsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  includeTotalCount: z.boolean().optional(),
  contextSearch: models.ContextSearch$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    contextSearch: "ContextSearch",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextsRequest$ {
  /** @deprecated use `SearchContextsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchContextsRequest$inboundSchema;
  /** @deprecated use `SearchContextsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchContextsRequest$outboundSchema;
  /** @deprecated use `SearchContextsRequest$Outbound` instead. */
  export type Outbound = SearchContextsRequest$Outbound;
}

export function searchContextsRequestToJSON(
  searchContextsRequest: SearchContextsRequest,
): string {
  return JSON.stringify(
    SearchContextsRequest$outboundSchema.parse(searchContextsRequest),
  );
}

export function searchContextsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchContextsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchContextsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchContextsRequest' from JSON`,
  );
}
