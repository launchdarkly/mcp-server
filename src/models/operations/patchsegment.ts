/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchSegmentRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
  patchWithComment: components.PatchWithComment;
};

/** @internal */
export const PatchSegmentRequest$inboundSchema: z.ZodType<
  PatchSegmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  PatchWithComment: components.PatchWithComment$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PatchWithComment": "patchWithComment",
  });
});

/** @internal */
export type PatchSegmentRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
  PatchWithComment: components.PatchWithComment$Outbound;
};

/** @internal */
export const PatchSegmentRequest$outboundSchema: z.ZodType<
  PatchSegmentRequest$Outbound,
  z.ZodTypeDef,
  PatchSegmentRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  patchWithComment: components.PatchWithComment$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    patchWithComment: "PatchWithComment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentRequest$ {
  /** @deprecated use `PatchSegmentRequest$inboundSchema` instead. */
  export const inboundSchema = PatchSegmentRequest$inboundSchema;
  /** @deprecated use `PatchSegmentRequest$outboundSchema` instead. */
  export const outboundSchema = PatchSegmentRequest$outboundSchema;
  /** @deprecated use `PatchSegmentRequest$Outbound` instead. */
  export type Outbound = PatchSegmentRequest$Outbound;
}

export function patchSegmentRequestToJSON(
  patchSegmentRequest: PatchSegmentRequest,
): string {
  return JSON.stringify(
    PatchSegmentRequest$outboundSchema.parse(patchSegmentRequest),
  );
}

export function patchSegmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchSegmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchSegmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSegmentRequest' from JSON`,
  );
}
