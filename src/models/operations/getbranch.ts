/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBranchRequest = {
  /**
   * The repository name
   */
  repo: string;
  /**
   * The url-encoded branch name
   */
  branch: string;
  /**
   * Filter results to a specific project
   */
  projKey?: string | undefined;
  /**
   * Filter results to a specific flag key
   */
  flagKey?: string | undefined;
};

/** @internal */
export const GetBranchRequest$inboundSchema: z.ZodType<
  GetBranchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  branch: z.string(),
  projKey: z.string().optional(),
  flagKey: z.string().optional(),
});

/** @internal */
export type GetBranchRequest$Outbound = {
  repo: string;
  branch: string;
  projKey?: string | undefined;
  flagKey?: string | undefined;
};

/** @internal */
export const GetBranchRequest$outboundSchema: z.ZodType<
  GetBranchRequest$Outbound,
  z.ZodTypeDef,
  GetBranchRequest
> = z.object({
  repo: z.string(),
  branch: z.string(),
  projKey: z.string().optional(),
  flagKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBranchRequest$ {
  /** @deprecated use `GetBranchRequest$inboundSchema` instead. */
  export const inboundSchema = GetBranchRequest$inboundSchema;
  /** @deprecated use `GetBranchRequest$outboundSchema` instead. */
  export const outboundSchema = GetBranchRequest$outboundSchema;
  /** @deprecated use `GetBranchRequest$Outbound` instead. */
  export type Outbound = GetBranchRequest$Outbound;
}

export function getBranchRequestToJSON(
  getBranchRequest: GetBranchRequest,
): string {
  return JSON.stringify(
    GetBranchRequest$outboundSchema.parse(getBranchRequest),
  );
}

export function getBranchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBranchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBranchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBranchRequest' from JSON`,
  );
}
