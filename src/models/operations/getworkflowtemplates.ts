/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkflowTemplatesRequest = {
  /**
   * Whether the entire template object or just a summary should be returned
   */
  summary?: boolean | undefined;
  /**
   * The substring in either the name or description of a template
   */
  search?: string | undefined;
};

/** @internal */
export const GetWorkflowTemplatesRequest$inboundSchema: z.ZodType<
  GetWorkflowTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  summary: z.boolean().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetWorkflowTemplatesRequest$Outbound = {
  summary?: boolean | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetWorkflowTemplatesRequest$outboundSchema: z.ZodType<
  GetWorkflowTemplatesRequest$Outbound,
  z.ZodTypeDef,
  GetWorkflowTemplatesRequest
> = z.object({
  summary: z.boolean().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowTemplatesRequest$ {
  /** @deprecated use `GetWorkflowTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowTemplatesRequest$inboundSchema;
  /** @deprecated use `GetWorkflowTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowTemplatesRequest$outboundSchema;
  /** @deprecated use `GetWorkflowTemplatesRequest$Outbound` instead. */
  export type Outbound = GetWorkflowTemplatesRequest$Outbound;
}

export function getWorkflowTemplatesRequestToJSON(
  getWorkflowTemplatesRequest: GetWorkflowTemplatesRequest,
): string {
  return JSON.stringify(
    GetWorkflowTemplatesRequest$outboundSchema.parse(
      getWorkflowTemplatesRequest,
    ),
  );
}

export function getWorkflowTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowTemplatesRequest' from JSON`,
  );
}
