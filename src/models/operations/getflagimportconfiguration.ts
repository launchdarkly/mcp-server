/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFlagImportConfigurationRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The integration key, for example, `split`
   */
  integrationKey: string;
  /**
   * The integration ID
   */
  integrationId: string;
};

/** @internal */
export const GetFlagImportConfigurationRequest$inboundSchema: z.ZodType<
  GetFlagImportConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  integrationKey: z.string(),
  integrationId: z.string(),
});

/** @internal */
export type GetFlagImportConfigurationRequest$Outbound = {
  projectKey: string;
  integrationKey: string;
  integrationId: string;
};

/** @internal */
export const GetFlagImportConfigurationRequest$outboundSchema: z.ZodType<
  GetFlagImportConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetFlagImportConfigurationRequest
> = z.object({
  projectKey: z.string(),
  integrationKey: z.string(),
  integrationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlagImportConfigurationRequest$ {
  /** @deprecated use `GetFlagImportConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema = GetFlagImportConfigurationRequest$inboundSchema;
  /** @deprecated use `GetFlagImportConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFlagImportConfigurationRequest$outboundSchema;
  /** @deprecated use `GetFlagImportConfigurationRequest$Outbound` instead. */
  export type Outbound = GetFlagImportConfigurationRequest$Outbound;
}

export function getFlagImportConfigurationRequestToJSON(
  getFlagImportConfigurationRequest: GetFlagImportConfigurationRequest,
): string {
  return JSON.stringify(
    GetFlagImportConfigurationRequest$outboundSchema.parse(
      getFlagImportConfigurationRequest,
    ),
  );
}

export function getFlagImportConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFlagImportConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFlagImportConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFlagImportConfigurationRequest' from JSON`,
  );
}
