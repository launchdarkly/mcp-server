/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBigSegmentImportRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
  /**
   * The import ID
   */
  importID: string;
};

/** @internal */
export const GetBigSegmentImportRequest$inboundSchema: z.ZodType<
  GetBigSegmentImportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  importID: z.string(),
});

/** @internal */
export type GetBigSegmentImportRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
  importID: string;
};

/** @internal */
export const GetBigSegmentImportRequest$outboundSchema: z.ZodType<
  GetBigSegmentImportRequest$Outbound,
  z.ZodTypeDef,
  GetBigSegmentImportRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  importID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBigSegmentImportRequest$ {
  /** @deprecated use `GetBigSegmentImportRequest$inboundSchema` instead. */
  export const inboundSchema = GetBigSegmentImportRequest$inboundSchema;
  /** @deprecated use `GetBigSegmentImportRequest$outboundSchema` instead. */
  export const outboundSchema = GetBigSegmentImportRequest$outboundSchema;
  /** @deprecated use `GetBigSegmentImportRequest$Outbound` instead. */
  export type Outbound = GetBigSegmentImportRequest$Outbound;
}

export function getBigSegmentImportRequestToJSON(
  getBigSegmentImportRequest: GetBigSegmentImportRequest,
): string {
  return JSON.stringify(
    GetBigSegmentImportRequest$outboundSchema.parse(getBigSegmentImportRequest),
  );
}

export function getBigSegmentImportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBigSegmentImportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBigSegmentImportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBigSegmentImportRequest' from JSON`,
  );
}
