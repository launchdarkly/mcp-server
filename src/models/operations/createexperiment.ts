/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateExperimentRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  experimentPost: components.ExperimentPost;
};

/** @internal */
export const CreateExperimentRequest$inboundSchema: z.ZodType<
  CreateExperimentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  ExperimentPost: components.ExperimentPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ExperimentPost": "experimentPost",
  });
});

/** @internal */
export type CreateExperimentRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  ExperimentPost: components.ExperimentPost$Outbound;
};

/** @internal */
export const CreateExperimentRequest$outboundSchema: z.ZodType<
  CreateExperimentRequest$Outbound,
  z.ZodTypeDef,
  CreateExperimentRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  experimentPost: components.ExperimentPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    experimentPost: "ExperimentPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExperimentRequest$ {
  /** @deprecated use `CreateExperimentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateExperimentRequest$inboundSchema;
  /** @deprecated use `CreateExperimentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateExperimentRequest$outboundSchema;
  /** @deprecated use `CreateExperimentRequest$Outbound` instead. */
  export type Outbound = CreateExperimentRequest$Outbound;
}

export function createExperimentRequestToJSON(
  createExperimentRequest: CreateExperimentRequest,
): string {
  return JSON.stringify(
    CreateExperimentRequest$outboundSchema.parse(createExperimentRequest),
  );
}

export function createExperimentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateExperimentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateExperimentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExperimentRequest' from JSON`,
  );
}
