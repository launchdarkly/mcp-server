/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRepositoryRequest = {
  /**
   * The repository name
   */
  repo: string;
};

/** @internal */
export const DeleteRepositoryRequest$inboundSchema: z.ZodType<
  DeleteRepositoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
});

/** @internal */
export type DeleteRepositoryRequest$Outbound = {
  repo: string;
};

/** @internal */
export const DeleteRepositoryRequest$outboundSchema: z.ZodType<
  DeleteRepositoryRequest$Outbound,
  z.ZodTypeDef,
  DeleteRepositoryRequest
> = z.object({
  repo: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRepositoryRequest$ {
  /** @deprecated use `DeleteRepositoryRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRepositoryRequest$inboundSchema;
  /** @deprecated use `DeleteRepositoryRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRepositoryRequest$outboundSchema;
  /** @deprecated use `DeleteRepositoryRequest$Outbound` instead. */
  export type Outbound = DeleteRepositoryRequest$Outbound;
}

export function deleteRepositoryRequestToJSON(
  deleteRepositoryRequest: DeleteRepositoryRequest,
): string {
  return JSON.stringify(
    DeleteRepositoryRequest$outboundSchema.parse(deleteRepositoryRequest),
  );
}

export function deleteRepositoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRepositoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRepositoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRepositoryRequest' from JSON`,
  );
}
