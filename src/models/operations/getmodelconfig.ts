/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const GetModelConfigLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type GetModelConfigLDAPIVersion = ClosedEnum<
  typeof GetModelConfigLDAPIVersion
>;

export type GetModelConfigRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: GetModelConfigLDAPIVersion;
  projectKey: string;
  modelConfigKey: string;
};

/** @internal */
export const GetModelConfigLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetModelConfigLDAPIVersion
> = z.nativeEnum(GetModelConfigLDAPIVersion);

/** @internal */
export const GetModelConfigLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetModelConfigLDAPIVersion
> = GetModelConfigLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelConfigLDAPIVersion$ {
  /** @deprecated use `GetModelConfigLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = GetModelConfigLDAPIVersion$inboundSchema;
  /** @deprecated use `GetModelConfigLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = GetModelConfigLDAPIVersion$outboundSchema;
}

/** @internal */
export const GetModelConfigRequest$inboundSchema: z.ZodType<
  GetModelConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": GetModelConfigLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  modelConfigKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type GetModelConfigRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  modelConfigKey: string;
};

/** @internal */
export const GetModelConfigRequest$outboundSchema: z.ZodType<
  GetModelConfigRequest$Outbound,
  z.ZodTypeDef,
  GetModelConfigRequest
> = z.object({
  ldAPIVersion: GetModelConfigLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  modelConfigKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelConfigRequest$ {
  /** @deprecated use `GetModelConfigRequest$inboundSchema` instead. */
  export const inboundSchema = GetModelConfigRequest$inboundSchema;
  /** @deprecated use `GetModelConfigRequest$outboundSchema` instead. */
  export const outboundSchema = GetModelConfigRequest$outboundSchema;
  /** @deprecated use `GetModelConfigRequest$Outbound` instead. */
  export type Outbound = GetModelConfigRequest$Outbound;
}

export function getModelConfigRequestToJSON(
  getModelConfigRequest: GetModelConfigRequest,
): string {
  return JSON.stringify(
    GetModelConfigRequest$outboundSchema.parse(getModelConfigRequest),
  );
}

export function getModelConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetModelConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelConfigRequest' from JSON`,
  );
}
