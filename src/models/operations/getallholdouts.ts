/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllHoldoutsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The number of holdouts to return in the response. Defaults to 20
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an `offset` of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetAllHoldoutsRequest$inboundSchema: z.ZodType<
  GetAllHoldoutsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetAllHoldoutsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetAllHoldoutsRequest$outboundSchema: z.ZodType<
  GetAllHoldoutsRequest$Outbound,
  z.ZodTypeDef,
  GetAllHoldoutsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllHoldoutsRequest$ {
  /** @deprecated use `GetAllHoldoutsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllHoldoutsRequest$inboundSchema;
  /** @deprecated use `GetAllHoldoutsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllHoldoutsRequest$outboundSchema;
  /** @deprecated use `GetAllHoldoutsRequest$Outbound` instead. */
  export type Outbound = GetAllHoldoutsRequest$Outbound;
}

export function getAllHoldoutsRequestToJSON(
  getAllHoldoutsRequest: GetAllHoldoutsRequest,
): string {
  return JSON.stringify(
    GetAllHoldoutsRequest$outboundSchema.parse(getAllHoldoutsRequest),
  );
}

export function getAllHoldoutsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllHoldoutsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllHoldoutsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllHoldoutsRequest' from JSON`,
  );
}
