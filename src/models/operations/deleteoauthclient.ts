/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteOAuthClientRequest = {
  /**
   * The client ID
   */
  clientId: string;
};

/** @internal */
export const DeleteOAuthClientRequest$inboundSchema: z.ZodType<
  DeleteOAuthClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
});

/** @internal */
export type DeleteOAuthClientRequest$Outbound = {
  clientId: string;
};

/** @internal */
export const DeleteOAuthClientRequest$outboundSchema: z.ZodType<
  DeleteOAuthClientRequest$Outbound,
  z.ZodTypeDef,
  DeleteOAuthClientRequest
> = z.object({
  clientId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOAuthClientRequest$ {
  /** @deprecated use `DeleteOAuthClientRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteOAuthClientRequest$inboundSchema;
  /** @deprecated use `DeleteOAuthClientRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteOAuthClientRequest$outboundSchema;
  /** @deprecated use `DeleteOAuthClientRequest$Outbound` instead. */
  export type Outbound = DeleteOAuthClientRequest$Outbound;
}

export function deleteOAuthClientRequestToJSON(
  deleteOAuthClientRequest: DeleteOAuthClientRequest,
): string {
  return JSON.stringify(
    DeleteOAuthClientRequest$outboundSchema.parse(deleteOAuthClientRequest),
  );
}

export function deleteOAuthClientRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOAuthClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteOAuthClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOAuthClientRequest' from JSON`,
  );
}
