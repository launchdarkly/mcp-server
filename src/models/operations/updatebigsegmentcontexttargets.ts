/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateBigSegmentContextTargetsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
  segmentUserState: components.SegmentUserState;
};

/** @internal */
export const UpdateBigSegmentContextTargetsRequest$inboundSchema: z.ZodType<
  UpdateBigSegmentContextTargetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  SegmentUserState: components.SegmentUserState$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SegmentUserState": "segmentUserState",
  });
});

/** @internal */
export type UpdateBigSegmentContextTargetsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
  SegmentUserState: components.SegmentUserState$Outbound;
};

/** @internal */
export const UpdateBigSegmentContextTargetsRequest$outboundSchema: z.ZodType<
  UpdateBigSegmentContextTargetsRequest$Outbound,
  z.ZodTypeDef,
  UpdateBigSegmentContextTargetsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  segmentUserState: components.SegmentUserState$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    segmentUserState: "SegmentUserState",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBigSegmentContextTargetsRequest$ {
  /** @deprecated use `UpdateBigSegmentContextTargetsRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateBigSegmentContextTargetsRequest$inboundSchema;
  /** @deprecated use `UpdateBigSegmentContextTargetsRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateBigSegmentContextTargetsRequest$outboundSchema;
  /** @deprecated use `UpdateBigSegmentContextTargetsRequest$Outbound` instead. */
  export type Outbound = UpdateBigSegmentContextTargetsRequest$Outbound;
}

export function updateBigSegmentContextTargetsRequestToJSON(
  updateBigSegmentContextTargetsRequest: UpdateBigSegmentContextTargetsRequest,
): string {
  return JSON.stringify(
    UpdateBigSegmentContextTargetsRequest$outboundSchema.parse(
      updateBigSegmentContextTargetsRequest,
    ),
  );
}

export function updateBigSegmentContextTargetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBigSegmentContextTargetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateBigSegmentContextTargetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBigSegmentContextTargetsRequest' from JSON`,
  );
}
