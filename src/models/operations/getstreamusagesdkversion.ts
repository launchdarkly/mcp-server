/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStreamUsageSdkversionRequest = {
  /**
   * The source of streaming connections to describe. Must be either `client` or `server`.
   */
  source: string;
};

/** @internal */
export const GetStreamUsageSdkversionRequest$inboundSchema: z.ZodType<
  GetStreamUsageSdkversionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
});

/** @internal */
export type GetStreamUsageSdkversionRequest$Outbound = {
  source: string;
};

/** @internal */
export const GetStreamUsageSdkversionRequest$outboundSchema: z.ZodType<
  GetStreamUsageSdkversionRequest$Outbound,
  z.ZodTypeDef,
  GetStreamUsageSdkversionRequest
> = z.object({
  source: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamUsageSdkversionRequest$ {
  /** @deprecated use `GetStreamUsageSdkversionRequest$inboundSchema` instead. */
  export const inboundSchema = GetStreamUsageSdkversionRequest$inboundSchema;
  /** @deprecated use `GetStreamUsageSdkversionRequest$outboundSchema` instead. */
  export const outboundSchema = GetStreamUsageSdkversionRequest$outboundSchema;
  /** @deprecated use `GetStreamUsageSdkversionRequest$Outbound` instead. */
  export type Outbound = GetStreamUsageSdkversionRequest$Outbound;
}

export function getStreamUsageSdkversionRequestToJSON(
  getStreamUsageSdkversionRequest: GetStreamUsageSdkversionRequest,
): string {
  return JSON.stringify(
    GetStreamUsageSdkversionRequest$outboundSchema.parse(
      getStreamUsageSdkversionRequest,
    ),
  );
}

export function getStreamUsageSdkversionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamUsageSdkversionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamUsageSdkversionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamUsageSdkversionRequest' from JSON`,
  );
}
