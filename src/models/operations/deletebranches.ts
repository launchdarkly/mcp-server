/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBranchesRequest = {
  /**
   * The repository name to delete branches for.
   */
  repo: string;
  requestBody: Array<string>;
};

/** @internal */
export const DeleteBranchesRequest$inboundSchema: z.ZodType<
  DeleteBranchesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  RequestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteBranchesRequest$Outbound = {
  repo: string;
  RequestBody: Array<string>;
};

/** @internal */
export const DeleteBranchesRequest$outboundSchema: z.ZodType<
  DeleteBranchesRequest$Outbound,
  z.ZodTypeDef,
  DeleteBranchesRequest
> = z.object({
  repo: z.string(),
  requestBody: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBranchesRequest$ {
  /** @deprecated use `DeleteBranchesRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBranchesRequest$inboundSchema;
  /** @deprecated use `DeleteBranchesRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBranchesRequest$outboundSchema;
  /** @deprecated use `DeleteBranchesRequest$Outbound` instead. */
  export type Outbound = DeleteBranchesRequest$Outbound;
}

export function deleteBranchesRequestToJSON(
  deleteBranchesRequest: DeleteBranchesRequest,
): string {
  return JSON.stringify(
    DeleteBranchesRequest$outboundSchema.parse(deleteBranchesRequest),
  );
}

export function deleteBranchesRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBranchesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBranchesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBranchesRequest' from JSON`,
  );
}
