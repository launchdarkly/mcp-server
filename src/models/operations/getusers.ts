/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUsersRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The number of elements to return per page
   */
  limit?: number | undefined;
  /**
   * Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the `next` link we provide instead.
   */
  searchAfter?: string | undefined;
};

/** @internal */
export const GetUsersRequest$inboundSchema: z.ZodType<
  GetUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  searchAfter: z.string().optional(),
});

/** @internal */
export type GetUsersRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  searchAfter?: string | undefined;
};

/** @internal */
export const GetUsersRequest$outboundSchema: z.ZodType<
  GetUsersRequest$Outbound,
  z.ZodTypeDef,
  GetUsersRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  searchAfter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUsersRequest$ {
  /** @deprecated use `GetUsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetUsersRequest$inboundSchema;
  /** @deprecated use `GetUsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetUsersRequest$outboundSchema;
  /** @deprecated use `GetUsersRequest$Outbound` instead. */
  export type Outbound = GetUsersRequest$Outbound;
}

export function getUsersRequestToJSON(
  getUsersRequest: GetUsersRequest,
): string {
  return JSON.stringify(GetUsersRequest$outboundSchema.parse(getUsersRequest));
}

export function getUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUsersRequest' from JSON`,
  );
}
