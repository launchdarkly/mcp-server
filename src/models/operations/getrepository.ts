/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRepositoryRequest = {
  /**
   * The repository name
   */
  repo: string;
};

/** @internal */
export const GetRepositoryRequest$inboundSchema: z.ZodType<
  GetRepositoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
});

/** @internal */
export type GetRepositoryRequest$Outbound = {
  repo: string;
};

/** @internal */
export const GetRepositoryRequest$outboundSchema: z.ZodType<
  GetRepositoryRequest$Outbound,
  z.ZodTypeDef,
  GetRepositoryRequest
> = z.object({
  repo: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRepositoryRequest$ {
  /** @deprecated use `GetRepositoryRequest$inboundSchema` instead. */
  export const inboundSchema = GetRepositoryRequest$inboundSchema;
  /** @deprecated use `GetRepositoryRequest$outboundSchema` instead. */
  export const outboundSchema = GetRepositoryRequest$outboundSchema;
  /** @deprecated use `GetRepositoryRequest$Outbound` instead. */
  export type Outbound = GetRepositoryRequest$Outbound;
}

export function getRepositoryRequestToJSON(
  getRepositoryRequest: GetRepositoryRequest,
): string {
  return JSON.stringify(
    GetRepositoryRequest$outboundSchema.parse(getRepositoryRequest),
  );
}

export function getRepositoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRepositoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRepositoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRepositoryRequest' from JSON`,
  );
}
