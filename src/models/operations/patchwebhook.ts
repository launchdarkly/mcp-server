/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchWebhookRequest = {
  /**
   * The ID of the webhook to update
   */
  id: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchWebhookRequest$inboundSchema: z.ZodType<
  PatchWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchWebhookRequest$Outbound = {
  id: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchWebhookRequest$outboundSchema: z.ZodType<
  PatchWebhookRequest$Outbound,
  z.ZodTypeDef,
  PatchWebhookRequest
> = z.object({
  id: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchWebhookRequest$ {
  /** @deprecated use `PatchWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = PatchWebhookRequest$inboundSchema;
  /** @deprecated use `PatchWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = PatchWebhookRequest$outboundSchema;
  /** @deprecated use `PatchWebhookRequest$Outbound` instead. */
  export type Outbound = PatchWebhookRequest$Outbound;
}

export function patchWebhookRequestToJSON(
  patchWebhookRequest: PatchWebhookRequest,
): string {
  return JSON.stringify(
    PatchWebhookRequest$outboundSchema.parse(patchWebhookRequest),
  );
}

export function patchWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchWebhookRequest' from JSON`,
  );
}
