/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchContextInstancesRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Specifies the maximum number of items in the collection to return (max: 50, default: 20)
   */
  limit?: number | undefined;
  /**
   * Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the `next` link we provide instead.
   */
  continuationToken?: string | undefined;
  /**
   * Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying `ts` for this value, or descending order by specifying `-ts`.
   */
  sort?: string | undefined;
  /**
   * A comma-separated list of context filters. This endpoint only accepts an `applicationId` filter. To learn more about the filter syntax, read [Filtering contexts and context instances](https://launchdarkly.com/docs/ld-docs/api/contexts#filtering-contexts-and-context-instances).
   */
  filter?: string | undefined;
  /**
   * Specifies whether to include or omit the total count of matching context instances. Defaults to true.
   */
  includeTotalCount?: boolean | undefined;
  contextInstanceSearch: components.ContextInstanceSearch;
};

/** @internal */
export const SearchContextInstancesRequest$inboundSchema: z.ZodType<
  SearchContextInstancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  includeTotalCount: z.boolean().optional(),
  ContextInstanceSearch: components.ContextInstanceSearch$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ContextInstanceSearch": "contextInstanceSearch",
  });
});

/** @internal */
export type SearchContextInstancesRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  continuationToken?: string | undefined;
  sort?: string | undefined;
  filter?: string | undefined;
  includeTotalCount?: boolean | undefined;
  ContextInstanceSearch: components.ContextInstanceSearch$Outbound;
};

/** @internal */
export const SearchContextInstancesRequest$outboundSchema: z.ZodType<
  SearchContextInstancesRequest$Outbound,
  z.ZodTypeDef,
  SearchContextInstancesRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  continuationToken: z.string().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  includeTotalCount: z.boolean().optional(),
  contextInstanceSearch: components.ContextInstanceSearch$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    contextInstanceSearch: "ContextInstanceSearch",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextInstancesRequest$ {
  /** @deprecated use `SearchContextInstancesRequest$inboundSchema` instead. */
  export const inboundSchema = SearchContextInstancesRequest$inboundSchema;
  /** @deprecated use `SearchContextInstancesRequest$outboundSchema` instead. */
  export const outboundSchema = SearchContextInstancesRequest$outboundSchema;
  /** @deprecated use `SearchContextInstancesRequest$Outbound` instead. */
  export type Outbound = SearchContextInstancesRequest$Outbound;
}

export function searchContextInstancesRequestToJSON(
  searchContextInstancesRequest: SearchContextInstancesRequest,
): string {
  return JSON.stringify(
    SearchContextInstancesRequest$outboundSchema.parse(
      searchContextInstancesRequest,
    ),
  );
}

export function searchContextInstancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchContextInstancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchContextInstancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchContextInstancesRequest' from JSON`,
  );
}
