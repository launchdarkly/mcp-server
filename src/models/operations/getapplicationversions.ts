/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApplicationVersionsRequest = {
  /**
   * Accepts filter by `key`, `name`, `supported`, and `autoAdded`. To learn more about the filter syntax, read [Filtering applications and application versions](https://launchdarkly.com/docs/api/applications-beta#filtering-applications-and-application-versions).
   */
  filter?: string | undefined;
  /**
   * The application key
   */
  applicationKey: string;
  /**
   * The number of versions to return. Defaults to 50.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * Accepts sorting order and fields. Fields can be comma separated. Possible fields are `creationDate`, `name`. Examples: `sort=name` sort by names ascending, `sort=-name,creationDate` sort by names descending and creationDate ascending.
   */
  sort?: string | undefined;
};

/** @internal */
export const GetApplicationVersionsRequest$inboundSchema: z.ZodType<
  GetApplicationVersionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  applicationKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
});

/** @internal */
export type GetApplicationVersionsRequest$Outbound = {
  filter?: string | undefined;
  applicationKey: string;
  limit?: number | undefined;
  offset?: number | undefined;
  sort?: string | undefined;
};

/** @internal */
export const GetApplicationVersionsRequest$outboundSchema: z.ZodType<
  GetApplicationVersionsRequest$Outbound,
  z.ZodTypeDef,
  GetApplicationVersionsRequest
> = z.object({
  filter: z.string().optional(),
  applicationKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApplicationVersionsRequest$ {
  /** @deprecated use `GetApplicationVersionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApplicationVersionsRequest$inboundSchema;
  /** @deprecated use `GetApplicationVersionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApplicationVersionsRequest$outboundSchema;
  /** @deprecated use `GetApplicationVersionsRequest$Outbound` instead. */
  export type Outbound = GetApplicationVersionsRequest$Outbound;
}

export function getApplicationVersionsRequestToJSON(
  getApplicationVersionsRequest: GetApplicationVersionsRequest,
): string {
  return JSON.stringify(
    GetApplicationVersionsRequest$outboundSchema.parse(
      getApplicationVersionsRequest,
    ),
  );
}

export function getApplicationVersionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApplicationVersionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApplicationVersionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApplicationVersionsRequest' from JSON`,
  );
}
