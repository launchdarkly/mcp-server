/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateFlagLinkRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The flag link ID
   */
  id: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const UpdateFlagLinkRequest$inboundSchema: z.ZodType<
  UpdateFlagLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  id: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateFlagLinkRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  id: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const UpdateFlagLinkRequest$outboundSchema: z.ZodType<
  UpdateFlagLinkRequest$Outbound,
  z.ZodTypeDef,
  UpdateFlagLinkRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  id: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFlagLinkRequest$ {
  /** @deprecated use `UpdateFlagLinkRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFlagLinkRequest$inboundSchema;
  /** @deprecated use `UpdateFlagLinkRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFlagLinkRequest$outboundSchema;
  /** @deprecated use `UpdateFlagLinkRequest$Outbound` instead. */
  export type Outbound = UpdateFlagLinkRequest$Outbound;
}

export function updateFlagLinkRequestToJSON(
  updateFlagLinkRequest: UpdateFlagLinkRequest,
): string {
  return JSON.stringify(
    UpdateFlagLinkRequest$outboundSchema.parse(updateFlagLinkRequest),
  );
}

export function updateFlagLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFlagLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFlagLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFlagLinkRequest' from JSON`,
  );
}
