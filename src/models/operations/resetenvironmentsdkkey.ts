/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResetEnvironmentSDKKeyRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The time at which you want the old SDK key to expire, in UNIX milliseconds. By default, the key expires immediately. During the period between this call and the time when the old SDK key expires, both the old SDK key and the new SDK key will work.
   */
  expiry?: number | undefined;
};

/** @internal */
export const ResetEnvironmentSDKKeyRequest$inboundSchema: z.ZodType<
  ResetEnvironmentSDKKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  expiry: z.number().int().optional(),
});

/** @internal */
export type ResetEnvironmentSDKKeyRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  expiry?: number | undefined;
};

/** @internal */
export const ResetEnvironmentSDKKeyRequest$outboundSchema: z.ZodType<
  ResetEnvironmentSDKKeyRequest$Outbound,
  z.ZodTypeDef,
  ResetEnvironmentSDKKeyRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  expiry: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetEnvironmentSDKKeyRequest$ {
  /** @deprecated use `ResetEnvironmentSDKKeyRequest$inboundSchema` instead. */
  export const inboundSchema = ResetEnvironmentSDKKeyRequest$inboundSchema;
  /** @deprecated use `ResetEnvironmentSDKKeyRequest$outboundSchema` instead. */
  export const outboundSchema = ResetEnvironmentSDKKeyRequest$outboundSchema;
  /** @deprecated use `ResetEnvironmentSDKKeyRequest$Outbound` instead. */
  export type Outbound = ResetEnvironmentSDKKeyRequest$Outbound;
}

export function resetEnvironmentSDKKeyRequestToJSON(
  resetEnvironmentSDKKeyRequest: ResetEnvironmentSDKKeyRequest,
): string {
  return JSON.stringify(
    ResetEnvironmentSDKKeyRequest$outboundSchema.parse(
      resetEnvironmentSDKKeyRequest,
    ),
  );
}

export function resetEnvironmentSDKKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResetEnvironmentSDKKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetEnvironmentSDKKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetEnvironmentSDKKeyRequest' from JSON`,
  );
}
