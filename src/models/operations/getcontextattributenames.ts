/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetContextAttributeNamesRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * A comma-separated list of context filters. This endpoint only accepts `kind` filters, with the `equals` operator, and `name` filters, with the `startsWith` operator. To learn more about the filter syntax, read [Filtering contexts and context instances](https://launchdarkly.com/docs/ld-docs/api/contexts#filtering-contexts-and-context-instances).
   */
  filter?: string | undefined;
  /**
   * Specifies the maximum number of items in the collection to return (max: 100, default: 100)
   */
  limit?: number | undefined;
};

/** @internal */
export const GetContextAttributeNamesRequest$inboundSchema: z.ZodType<
  GetContextAttributeNamesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  filter: z.string().optional(),
  limit: z.number().int().optional(),
});

/** @internal */
export type GetContextAttributeNamesRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  filter?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const GetContextAttributeNamesRequest$outboundSchema: z.ZodType<
  GetContextAttributeNamesRequest$Outbound,
  z.ZodTypeDef,
  GetContextAttributeNamesRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  filter: z.string().optional(),
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContextAttributeNamesRequest$ {
  /** @deprecated use `GetContextAttributeNamesRequest$inboundSchema` instead. */
  export const inboundSchema = GetContextAttributeNamesRequest$inboundSchema;
  /** @deprecated use `GetContextAttributeNamesRequest$outboundSchema` instead. */
  export const outboundSchema = GetContextAttributeNamesRequest$outboundSchema;
  /** @deprecated use `GetContextAttributeNamesRequest$Outbound` instead. */
  export type Outbound = GetContextAttributeNamesRequest$Outbound;
}

export function getContextAttributeNamesRequestToJSON(
  getContextAttributeNamesRequest: GetContextAttributeNamesRequest,
): string {
  return JSON.stringify(
    GetContextAttributeNamesRequest$outboundSchema.parse(
      getContextAttributeNamesRequest,
    ),
  );
}

export function getContextAttributeNamesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetContextAttributeNamesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContextAttributeNamesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContextAttributeNamesRequest' from JSON`,
  );
}
