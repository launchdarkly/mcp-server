/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateIntegrationConfigurationRequest = {
  /**
   * The integration key
   */
  integrationKey: string;
  integrationConfigurationPost: models.IntegrationConfigurationPost;
};

/** @internal */
export const CreateIntegrationConfigurationRequest$inboundSchema: z.ZodType<
  CreateIntegrationConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
  IntegrationConfigurationPost:
    models.IntegrationConfigurationPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "IntegrationConfigurationPost": "integrationConfigurationPost",
  });
});

/** @internal */
export type CreateIntegrationConfigurationRequest$Outbound = {
  integrationKey: string;
  IntegrationConfigurationPost: models.IntegrationConfigurationPost$Outbound;
};

/** @internal */
export const CreateIntegrationConfigurationRequest$outboundSchema: z.ZodType<
  CreateIntegrationConfigurationRequest$Outbound,
  z.ZodTypeDef,
  CreateIntegrationConfigurationRequest
> = z.object({
  integrationKey: z.string(),
  integrationConfigurationPost:
    models.IntegrationConfigurationPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    integrationConfigurationPost: "IntegrationConfigurationPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIntegrationConfigurationRequest$ {
  /** @deprecated use `CreateIntegrationConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateIntegrationConfigurationRequest$inboundSchema;
  /** @deprecated use `CreateIntegrationConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateIntegrationConfigurationRequest$outboundSchema;
  /** @deprecated use `CreateIntegrationConfigurationRequest$Outbound` instead. */
  export type Outbound = CreateIntegrationConfigurationRequest$Outbound;
}

export function createIntegrationConfigurationRequestToJSON(
  createIntegrationConfigurationRequest: CreateIntegrationConfigurationRequest,
): string {
  return JSON.stringify(
    CreateIntegrationConfigurationRequest$outboundSchema.parse(
      createIntegrationConfigurationRequest,
    ),
  );
}

export function createIntegrationConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateIntegrationConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateIntegrationConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateIntegrationConfigurationRequest' from JSON`,
  );
}
