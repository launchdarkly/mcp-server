/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostWorkflowRequest = {
  /**
   * The template key to apply as a starting point for the new workflow
   */
  templateKey?: string | undefined;
  /**
   * Whether to call the endpoint in dry-run mode
   */
  dryRun?: boolean | undefined;
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  customWorkflowInput: components.CustomWorkflowInput;
};

/** @internal */
export const PostWorkflowRequest$inboundSchema: z.ZodType<
  PostWorkflowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateKey: z.string().optional(),
  dryRun: z.boolean().optional(),
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  CustomWorkflowInput: components.CustomWorkflowInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CustomWorkflowInput": "customWorkflowInput",
  });
});

/** @internal */
export type PostWorkflowRequest$Outbound = {
  templateKey?: string | undefined;
  dryRun?: boolean | undefined;
  projectKey: string;
  featureFlagKey: string;
  environmentKey: string;
  CustomWorkflowInput: components.CustomWorkflowInput$Outbound;
};

/** @internal */
export const PostWorkflowRequest$outboundSchema: z.ZodType<
  PostWorkflowRequest$Outbound,
  z.ZodTypeDef,
  PostWorkflowRequest
> = z.object({
  templateKey: z.string().optional(),
  dryRun: z.boolean().optional(),
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  customWorkflowInput: components.CustomWorkflowInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    customWorkflowInput: "CustomWorkflowInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWorkflowRequest$ {
  /** @deprecated use `PostWorkflowRequest$inboundSchema` instead. */
  export const inboundSchema = PostWorkflowRequest$inboundSchema;
  /** @deprecated use `PostWorkflowRequest$outboundSchema` instead. */
  export const outboundSchema = PostWorkflowRequest$outboundSchema;
  /** @deprecated use `PostWorkflowRequest$Outbound` instead. */
  export type Outbound = PostWorkflowRequest$Outbound;
}

export function postWorkflowRequestToJSON(
  postWorkflowRequest: PostWorkflowRequest,
): string {
  return JSON.stringify(
    PostWorkflowRequest$outboundSchema.parse(postWorkflowRequest),
  );
}

export function postWorkflowRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostWorkflowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostWorkflowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostWorkflowRequest' from JSON`,
  );
}
