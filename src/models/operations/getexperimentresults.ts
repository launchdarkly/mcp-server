/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetExperimentResultsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The experiment key
   */
  experimentKey: string;
  /**
   * The metric key
   */
  metricKey: string;
  /**
   * The iteration ID
   */
  iterationId?: string | undefined;
  /**
   * A comma-separated list of fields to expand in the response. Supported fields are explained above.
   */
  expand?: string | undefined;
};

/** @internal */
export const GetExperimentResultsRequest$inboundSchema: z.ZodType<
  GetExperimentResultsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  experimentKey: z.string(),
  metricKey: z.string(),
  iterationId: z.string().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetExperimentResultsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  experimentKey: string;
  metricKey: string;
  iterationId?: string | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetExperimentResultsRequest$outboundSchema: z.ZodType<
  GetExperimentResultsRequest$Outbound,
  z.ZodTypeDef,
  GetExperimentResultsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  experimentKey: z.string(),
  metricKey: z.string(),
  iterationId: z.string().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExperimentResultsRequest$ {
  /** @deprecated use `GetExperimentResultsRequest$inboundSchema` instead. */
  export const inboundSchema = GetExperimentResultsRequest$inboundSchema;
  /** @deprecated use `GetExperimentResultsRequest$outboundSchema` instead. */
  export const outboundSchema = GetExperimentResultsRequest$outboundSchema;
  /** @deprecated use `GetExperimentResultsRequest$Outbound` instead. */
  export type Outbound = GetExperimentResultsRequest$Outbound;
}

export function getExperimentResultsRequestToJSON(
  getExperimentResultsRequest: GetExperimentResultsRequest,
): string {
  return JSON.stringify(
    GetExperimentResultsRequest$outboundSchema.parse(
      getExperimentResultsRequest,
    ),
  );
}

export function getExperimentResultsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetExperimentResultsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetExperimentResultsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetExperimentResultsRequest' from JSON`,
  );
}
