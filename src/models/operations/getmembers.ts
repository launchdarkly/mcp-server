/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMembersRequest = {
  /**
   * The number of members to return in the response. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. This is for use with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * A comma-separated list of filters. Each filter is of the form `field:value`. Supported fields are explained above.
   */
  filter?: string | undefined;
  /**
   * A comma-separated list of properties that can reveal additional information in the response.
   */
  expand?: string | undefined;
  /**
   * A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order.
   */
  sort?: string | undefined;
};

/** @internal */
export const GetMembersRequest$inboundSchema: z.ZodType<
  GetMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
  sort: z.string().optional(),
});

/** @internal */
export type GetMembersRequest$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
  expand?: string | undefined;
  sort?: string | undefined;
};

/** @internal */
export const GetMembersRequest$outboundSchema: z.ZodType<
  GetMembersRequest$Outbound,
  z.ZodTypeDef,
  GetMembersRequest
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
  sort: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMembersRequest$ {
  /** @deprecated use `GetMembersRequest$inboundSchema` instead. */
  export const inboundSchema = GetMembersRequest$inboundSchema;
  /** @deprecated use `GetMembersRequest$outboundSchema` instead. */
  export const outboundSchema = GetMembersRequest$outboundSchema;
  /** @deprecated use `GetMembersRequest$Outbound` instead. */
  export type Outbound = GetMembersRequest$Outbound;
}

export function getMembersRequestToJSON(
  getMembersRequest: GetMembersRequest,
): string {
  return JSON.stringify(
    GetMembersRequest$outboundSchema.parse(getMembersRequest),
  );
}

export function getMembersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMembersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMembersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMembersRequest' from JSON`,
  );
}
