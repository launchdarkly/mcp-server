/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFeatureFlagStatusAcrossEnvironmentsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * Optional environment filter
   */
  env?: string | undefined;
};

/** @internal */
export const GetFeatureFlagStatusAcrossEnvironmentsRequest$inboundSchema:
  z.ZodType<
    GetFeatureFlagStatusAcrossEnvironmentsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    projectKey: z.string(),
    featureFlagKey: z.string(),
    env: z.string().optional(),
  });

/** @internal */
export type GetFeatureFlagStatusAcrossEnvironmentsRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  env?: string | undefined;
};

/** @internal */
export const GetFeatureFlagStatusAcrossEnvironmentsRequest$outboundSchema:
  z.ZodType<
    GetFeatureFlagStatusAcrossEnvironmentsRequest$Outbound,
    z.ZodTypeDef,
    GetFeatureFlagStatusAcrossEnvironmentsRequest
  > = z.object({
    projectKey: z.string(),
    featureFlagKey: z.string(),
    env: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeatureFlagStatusAcrossEnvironmentsRequest$ {
  /** @deprecated use `GetFeatureFlagStatusAcrossEnvironmentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetFeatureFlagStatusAcrossEnvironmentsRequest$inboundSchema;
  /** @deprecated use `GetFeatureFlagStatusAcrossEnvironmentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetFeatureFlagStatusAcrossEnvironmentsRequest$outboundSchema;
  /** @deprecated use `GetFeatureFlagStatusAcrossEnvironmentsRequest$Outbound` instead. */
  export type Outbound = GetFeatureFlagStatusAcrossEnvironmentsRequest$Outbound;
}

export function getFeatureFlagStatusAcrossEnvironmentsRequestToJSON(
  getFeatureFlagStatusAcrossEnvironmentsRequest:
    GetFeatureFlagStatusAcrossEnvironmentsRequest,
): string {
  return JSON.stringify(
    GetFeatureFlagStatusAcrossEnvironmentsRequest$outboundSchema.parse(
      getFeatureFlagStatusAcrossEnvironmentsRequest,
    ),
  );
}

export function getFeatureFlagStatusAcrossEnvironmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetFeatureFlagStatusAcrossEnvironmentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetFeatureFlagStatusAcrossEnvironmentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetFeatureFlagStatusAcrossEnvironmentsRequest' from JSON`,
  );
}
