/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApplicationVersionRequest = {
  /**
   * The application key
   */
  applicationKey: string;
  /**
   * The application version key
   */
  versionKey: string;
};

/** @internal */
export const DeleteApplicationVersionRequest$inboundSchema: z.ZodType<
  DeleteApplicationVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationKey: z.string(),
  versionKey: z.string(),
});

/** @internal */
export type DeleteApplicationVersionRequest$Outbound = {
  applicationKey: string;
  versionKey: string;
};

/** @internal */
export const DeleteApplicationVersionRequest$outboundSchema: z.ZodType<
  DeleteApplicationVersionRequest$Outbound,
  z.ZodTypeDef,
  DeleteApplicationVersionRequest
> = z.object({
  applicationKey: z.string(),
  versionKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApplicationVersionRequest$ {
  /** @deprecated use `DeleteApplicationVersionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApplicationVersionRequest$inboundSchema;
  /** @deprecated use `DeleteApplicationVersionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApplicationVersionRequest$outboundSchema;
  /** @deprecated use `DeleteApplicationVersionRequest$Outbound` instead. */
  export type Outbound = DeleteApplicationVersionRequest$Outbound;
}

export function deleteApplicationVersionRequestToJSON(
  deleteApplicationVersionRequest: DeleteApplicationVersionRequest,
): string {
  return JSON.stringify(
    DeleteApplicationVersionRequest$outboundSchema.parse(
      deleteApplicationVersionRequest,
    ),
  );
}

export function deleteApplicationVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApplicationVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApplicationVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApplicationVersionRequest' from JSON`,
  );
}
