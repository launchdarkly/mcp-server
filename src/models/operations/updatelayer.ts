/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateLayerRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The layer key
   */
  layerKey: string;
  layerPatchInput: components.LayerPatchInput;
};

/** @internal */
export const UpdateLayerRequest$inboundSchema: z.ZodType<
  UpdateLayerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  layerKey: z.string(),
  LayerPatchInput: components.LayerPatchInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LayerPatchInput": "layerPatchInput",
  });
});

/** @internal */
export type UpdateLayerRequest$Outbound = {
  projectKey: string;
  layerKey: string;
  LayerPatchInput: components.LayerPatchInput$Outbound;
};

/** @internal */
export const UpdateLayerRequest$outboundSchema: z.ZodType<
  UpdateLayerRequest$Outbound,
  z.ZodTypeDef,
  UpdateLayerRequest
> = z.object({
  projectKey: z.string(),
  layerKey: z.string(),
  layerPatchInput: components.LayerPatchInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    layerPatchInput: "LayerPatchInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLayerRequest$ {
  /** @deprecated use `UpdateLayerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateLayerRequest$inboundSchema;
  /** @deprecated use `UpdateLayerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateLayerRequest$outboundSchema;
  /** @deprecated use `UpdateLayerRequest$Outbound` instead. */
  export type Outbound = UpdateLayerRequest$Outbound;
}

export function updateLayerRequestToJSON(
  updateLayerRequest: UpdateLayerRequest,
): string {
  return JSON.stringify(
    UpdateLayerRequest$outboundSchema.parse(updateLayerRequest),
  );
}

export function updateLayerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLayerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLayerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLayerRequest' from JSON`,
  );
}
