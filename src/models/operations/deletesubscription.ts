/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSubscriptionRequest = {
  /**
   * The integration key
   */
  integrationKey: string;
  /**
   * The subscription ID
   */
  id: string;
};

/** @internal */
export const DeleteSubscriptionRequest$inboundSchema: z.ZodType<
  DeleteSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
  id: z.string(),
});

/** @internal */
export type DeleteSubscriptionRequest$Outbound = {
  integrationKey: string;
  id: string;
};

/** @internal */
export const DeleteSubscriptionRequest$outboundSchema: z.ZodType<
  DeleteSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  DeleteSubscriptionRequest
> = z.object({
  integrationKey: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSubscriptionRequest$ {
  /** @deprecated use `DeleteSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSubscriptionRequest$inboundSchema;
  /** @deprecated use `DeleteSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSubscriptionRequest$outboundSchema;
  /** @deprecated use `DeleteSubscriptionRequest$Outbound` instead. */
  export type Outbound = DeleteSubscriptionRequest$Outbound;
}

export function deleteSubscriptionRequestToJSON(
  deleteSubscriptionRequest: DeleteSubscriptionRequest,
): string {
  return JSON.stringify(
    DeleteSubscriptionRequest$outboundSchema.parse(deleteSubscriptionRequest),
  );
}

export function deleteSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSubscriptionRequest' from JSON`,
  );
}
