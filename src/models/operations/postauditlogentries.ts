/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostAuditLogEntriesRequest = {
  /**
   * A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries returned occurred before the timestamp.
   */
  before?: number | undefined;
  /**
   * A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned occurred after the timestamp.
   */
  after?: number | undefined;
  /**
   * Text to search for. You can search for the full or partial name of the resource.
   */
  q?: string | undefined;
  /**
   * A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10.
   */
  limit?: number | undefined;
  requestBody?: Array<models.StatementPost> | undefined;
};

/** @internal */
export const PostAuditLogEntriesRequest$inboundSchema: z.ZodType<
  PostAuditLogEntriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  before: z.number().int().optional(),
  after: z.number().int().optional(),
  q: z.string().optional(),
  limit: z.number().int().optional(),
  RequestBody: z.array(models.StatementPost$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostAuditLogEntriesRequest$Outbound = {
  before?: number | undefined;
  after?: number | undefined;
  q?: string | undefined;
  limit?: number | undefined;
  RequestBody?: Array<models.StatementPost$Outbound> | undefined;
};

/** @internal */
export const PostAuditLogEntriesRequest$outboundSchema: z.ZodType<
  PostAuditLogEntriesRequest$Outbound,
  z.ZodTypeDef,
  PostAuditLogEntriesRequest
> = z.object({
  before: z.number().int().optional(),
  after: z.number().int().optional(),
  q: z.string().optional(),
  limit: z.number().int().optional(),
  requestBody: z.array(models.StatementPost$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuditLogEntriesRequest$ {
  /** @deprecated use `PostAuditLogEntriesRequest$inboundSchema` instead. */
  export const inboundSchema = PostAuditLogEntriesRequest$inboundSchema;
  /** @deprecated use `PostAuditLogEntriesRequest$outboundSchema` instead. */
  export const outboundSchema = PostAuditLogEntriesRequest$outboundSchema;
  /** @deprecated use `PostAuditLogEntriesRequest$Outbound` instead. */
  export type Outbound = PostAuditLogEntriesRequest$Outbound;
}

export function postAuditLogEntriesRequestToJSON(
  postAuditLogEntriesRequest: PostAuditLogEntriesRequest,
): string {
  return JSON.stringify(
    PostAuditLogEntriesRequest$outboundSchema.parse(postAuditLogEntriesRequest),
  );
}

export function postAuditLogEntriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAuditLogEntriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuditLogEntriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuditLogEntriesRequest' from JSON`,
  );
}
