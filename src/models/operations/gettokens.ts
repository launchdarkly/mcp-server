/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTokensRequest = {
  /**
   * If set to true, and the authentication access token has the 'Admin' role, personal access tokens for all members will be retrieved.
   */
  showAll?: boolean | undefined;
  /**
   * The number of access tokens to return in the response. Defaults to 25.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. This is for use with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetTokensRequest$inboundSchema: z.ZodType<
  GetTokensRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  showAll: z.boolean().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetTokensRequest$Outbound = {
  showAll?: boolean | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetTokensRequest$outboundSchema: z.ZodType<
  GetTokensRequest$Outbound,
  z.ZodTypeDef,
  GetTokensRequest
> = z.object({
  showAll: z.boolean().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTokensRequest$ {
  /** @deprecated use `GetTokensRequest$inboundSchema` instead. */
  export const inboundSchema = GetTokensRequest$inboundSchema;
  /** @deprecated use `GetTokensRequest$outboundSchema` instead. */
  export const outboundSchema = GetTokensRequest$outboundSchema;
  /** @deprecated use `GetTokensRequest$Outbound` instead. */
  export type Outbound = GetTokensRequest$Outbound;
}

export function getTokensRequestToJSON(
  getTokensRequest: GetTokensRequest,
): string {
  return JSON.stringify(
    GetTokensRequest$outboundSchema.parse(getTokensRequest),
  );
}

export function getTokensRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTokensRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTokensRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTokensRequest' from JSON`,
  );
}
