/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter announcements by status.
 */
export const Status = {
  Active: "active",
  Inactive: "inactive",
  Scheduled: "scheduled",
} as const;
/**
 * Filter announcements by status.
 */
export type Status = ClosedEnum<typeof Status>;

export type GetAnnouncementsPublicRequest = {
  /**
   * Filter announcements by status.
   */
  status?: Status | undefined;
  /**
   * The number of announcements to return.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetAnnouncementsPublicRequest$inboundSchema: z.ZodType<
  GetAnnouncementsPublicRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema.optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetAnnouncementsPublicRequest$Outbound = {
  status?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetAnnouncementsPublicRequest$outboundSchema: z.ZodType<
  GetAnnouncementsPublicRequest$Outbound,
  z.ZodTypeDef,
  GetAnnouncementsPublicRequest
> = z.object({
  status: Status$outboundSchema.optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAnnouncementsPublicRequest$ {
  /** @deprecated use `GetAnnouncementsPublicRequest$inboundSchema` instead. */
  export const inboundSchema = GetAnnouncementsPublicRequest$inboundSchema;
  /** @deprecated use `GetAnnouncementsPublicRequest$outboundSchema` instead. */
  export const outboundSchema = GetAnnouncementsPublicRequest$outboundSchema;
  /** @deprecated use `GetAnnouncementsPublicRequest$Outbound` instead. */
  export type Outbound = GetAnnouncementsPublicRequest$Outbound;
}

export function getAnnouncementsPublicRequestToJSON(
  getAnnouncementsPublicRequest: GetAnnouncementsPublicRequest,
): string {
  return JSON.stringify(
    GetAnnouncementsPublicRequest$outboundSchema.parse(
      getAnnouncementsPublicRequest,
    ),
  );
}

export function getAnnouncementsPublicRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAnnouncementsPublicRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAnnouncementsPublicRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAnnouncementsPublicRequest' from JSON`,
  );
}
