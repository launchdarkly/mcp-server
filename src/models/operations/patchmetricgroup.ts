/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchMetricGroupRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The metric group key
   */
  metricGroupKey: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchMetricGroupRequest$inboundSchema: z.ZodType<
  PatchMetricGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  metricGroupKey: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchMetricGroupRequest$Outbound = {
  projectKey: string;
  metricGroupKey: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchMetricGroupRequest$outboundSchema: z.ZodType<
  PatchMetricGroupRequest$Outbound,
  z.ZodTypeDef,
  PatchMetricGroupRequest
> = z.object({
  projectKey: z.string(),
  metricGroupKey: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchMetricGroupRequest$ {
  /** @deprecated use `PatchMetricGroupRequest$inboundSchema` instead. */
  export const inboundSchema = PatchMetricGroupRequest$inboundSchema;
  /** @deprecated use `PatchMetricGroupRequest$outboundSchema` instead. */
  export const outboundSchema = PatchMetricGroupRequest$outboundSchema;
  /** @deprecated use `PatchMetricGroupRequest$Outbound` instead. */
  export type Outbound = PatchMetricGroupRequest$Outbound;
}

export function patchMetricGroupRequestToJSON(
  patchMetricGroupRequest: PatchMetricGroupRequest,
): string {
  return JSON.stringify(
    PatchMetricGroupRequest$outboundSchema.parse(patchMetricGroupRequest),
  );
}

export function patchMetricGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchMetricGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchMetricGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchMetricGroupRequest' from JSON`,
  );
}
