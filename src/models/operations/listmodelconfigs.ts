/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const ListModelConfigsLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type ListModelConfigsLDAPIVersion = ClosedEnum<
  typeof ListModelConfigsLDAPIVersion
>;

export type ListModelConfigsRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: ListModelConfigsLDAPIVersion;
  projectKey: string;
  /**
   * Whether to return only restricted models
   */
  restricted?: boolean | undefined;
};

/** @internal */
export const ListModelConfigsLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof ListModelConfigsLDAPIVersion
> = z.nativeEnum(ListModelConfigsLDAPIVersion);

/** @internal */
export const ListModelConfigsLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof ListModelConfigsLDAPIVersion
> = ListModelConfigsLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelConfigsLDAPIVersion$ {
  /** @deprecated use `ListModelConfigsLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = ListModelConfigsLDAPIVersion$inboundSchema;
  /** @deprecated use `ListModelConfigsLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = ListModelConfigsLDAPIVersion$outboundSchema;
}

/** @internal */
export const ListModelConfigsRequest$inboundSchema: z.ZodType<
  ListModelConfigsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": ListModelConfigsLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  restricted: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type ListModelConfigsRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  restricted?: boolean | undefined;
};

/** @internal */
export const ListModelConfigsRequest$outboundSchema: z.ZodType<
  ListModelConfigsRequest$Outbound,
  z.ZodTypeDef,
  ListModelConfigsRequest
> = z.object({
  ldAPIVersion: ListModelConfigsLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  restricted: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelConfigsRequest$ {
  /** @deprecated use `ListModelConfigsRequest$inboundSchema` instead. */
  export const inboundSchema = ListModelConfigsRequest$inboundSchema;
  /** @deprecated use `ListModelConfigsRequest$outboundSchema` instead. */
  export const outboundSchema = ListModelConfigsRequest$outboundSchema;
  /** @deprecated use `ListModelConfigsRequest$Outbound` instead. */
  export type Outbound = ListModelConfigsRequest$Outbound;
}

export function listModelConfigsRequestToJSON(
  listModelConfigsRequest: ListModelConfigsRequest,
): string {
  return JSON.stringify(
    ListModelConfigsRequest$outboundSchema.parse(listModelConfigsRequest),
  );
}

export function listModelConfigsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListModelConfigsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelConfigsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelConfigsRequest' from JSON`,
  );
}
