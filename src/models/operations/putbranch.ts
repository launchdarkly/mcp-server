/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutBranchRequest = {
  /**
   * The repository name
   */
  repo: string;
  /**
   * The URL-encoded branch name
   */
  branch: string;
  putBranch: components.PutBranch;
};

/** @internal */
export const PutBranchRequest$inboundSchema: z.ZodType<
  PutBranchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  branch: z.string(),
  putBranch: z.lazy(() => components.PutBranch$inboundSchema),
});

/** @internal */
export type PutBranchRequest$Outbound = {
  repo: string;
  branch: string;
  putBranch: components.PutBranch$Outbound;
};

/** @internal */
export const PutBranchRequest$outboundSchema: z.ZodType<
  PutBranchRequest$Outbound,
  z.ZodTypeDef,
  PutBranchRequest
> = z.object({
  repo: z.string(),
  branch: z.string(),
  putBranch: z.lazy(() => components.PutBranch$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutBranchRequest$ {
  /** @deprecated use `PutBranchRequest$inboundSchema` instead. */
  export const inboundSchema = PutBranchRequest$inboundSchema;
  /** @deprecated use `PutBranchRequest$outboundSchema` instead. */
  export const outboundSchema = PutBranchRequest$outboundSchema;
  /** @deprecated use `PutBranchRequest$Outbound` instead. */
  export type Outbound = PutBranchRequest$Outbound;
}

export function putBranchRequestToJSON(
  putBranchRequest: PutBranchRequest,
): string {
  return JSON.stringify(
    PutBranchRequest$outboundSchema.parse(putBranchRequest),
  );
}

export function putBranchRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutBranchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutBranchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutBranchRequest' from JSON`,
  );
}
