/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CopyFeatureFlagRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key. The key identifies the flag in your code.
   */
  featureFlagKey: string;
  flagCopyConfigPost: models.FlagCopyConfigPost;
};

/** @internal */
export const CopyFeatureFlagRequest$inboundSchema: z.ZodType<
  CopyFeatureFlagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  FlagCopyConfigPost: models.FlagCopyConfigPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FlagCopyConfigPost": "flagCopyConfigPost",
  });
});

/** @internal */
export type CopyFeatureFlagRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  FlagCopyConfigPost: models.FlagCopyConfigPost$Outbound;
};

/** @internal */
export const CopyFeatureFlagRequest$outboundSchema: z.ZodType<
  CopyFeatureFlagRequest$Outbound,
  z.ZodTypeDef,
  CopyFeatureFlagRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  flagCopyConfigPost: models.FlagCopyConfigPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    flagCopyConfigPost: "FlagCopyConfigPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CopyFeatureFlagRequest$ {
  /** @deprecated use `CopyFeatureFlagRequest$inboundSchema` instead. */
  export const inboundSchema = CopyFeatureFlagRequest$inboundSchema;
  /** @deprecated use `CopyFeatureFlagRequest$outboundSchema` instead. */
  export const outboundSchema = CopyFeatureFlagRequest$outboundSchema;
  /** @deprecated use `CopyFeatureFlagRequest$Outbound` instead. */
  export type Outbound = CopyFeatureFlagRequest$Outbound;
}

export function copyFeatureFlagRequestToJSON(
  copyFeatureFlagRequest: CopyFeatureFlagRequest,
): string {
  return JSON.stringify(
    CopyFeatureFlagRequest$outboundSchema.parse(copyFeatureFlagRequest),
  );
}

export function copyFeatureFlagRequestFromJSON(
  jsonString: string,
): SafeParseResult<CopyFeatureFlagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CopyFeatureFlagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CopyFeatureFlagRequest' from JSON`,
  );
}
