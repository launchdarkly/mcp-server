/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInsightsRepositoriesRequest = {
  /**
   * Expand properties in response. Options: `projects`
   */
  expand?: string | undefined;
};

/** @internal */
export const GetInsightsRepositoriesRequest$inboundSchema: z.ZodType<
  GetInsightsRepositoriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.string().optional(),
});

/** @internal */
export type GetInsightsRepositoriesRequest$Outbound = {
  expand?: string | undefined;
};

/** @internal */
export const GetInsightsRepositoriesRequest$outboundSchema: z.ZodType<
  GetInsightsRepositoriesRequest$Outbound,
  z.ZodTypeDef,
  GetInsightsRepositoriesRequest
> = z.object({
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInsightsRepositoriesRequest$ {
  /** @deprecated use `GetInsightsRepositoriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetInsightsRepositoriesRequest$inboundSchema;
  /** @deprecated use `GetInsightsRepositoriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetInsightsRepositoriesRequest$outboundSchema;
  /** @deprecated use `GetInsightsRepositoriesRequest$Outbound` instead. */
  export type Outbound = GetInsightsRepositoriesRequest$Outbound;
}

export function getInsightsRepositoriesRequestToJSON(
  getInsightsRepositoriesRequest: GetInsightsRepositoriesRequest,
): string {
  return JSON.stringify(
    GetInsightsRepositoriesRequest$outboundSchema.parse(
      getInsightsRepositoriesRequest,
    ),
  );
}

export function getInsightsRepositoriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInsightsRepositoriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInsightsRepositoriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInsightsRepositoriesRequest' from JSON`,
  );
}
