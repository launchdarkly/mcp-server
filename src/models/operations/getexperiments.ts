/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetExperimentsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The maximum number of experiments to return. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * A comma-separated list of filters. Each filter is of the form `field:value`. Supported fields are explained above.
   */
  filter?: string | undefined;
  /**
   * A comma-separated list of properties that can reveal additional information in the response. Supported fields are explained above.
   */
  expand?: string | undefined;
  /**
   * A comma-separated list of experiment archived states. Supports `archived`, `active`, or both. Defaults to `active` experiments.
   */
  lifecycleState?: string | undefined;
};

/** @internal */
export const GetExperimentsRequest$inboundSchema: z.ZodType<
  GetExperimentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
  lifecycleState: z.string().optional(),
});

/** @internal */
export type GetExperimentsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
  expand?: string | undefined;
  lifecycleState?: string | undefined;
};

/** @internal */
export const GetExperimentsRequest$outboundSchema: z.ZodType<
  GetExperimentsRequest$Outbound,
  z.ZodTypeDef,
  GetExperimentsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  expand: z.string().optional(),
  lifecycleState: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExperimentsRequest$ {
  /** @deprecated use `GetExperimentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetExperimentsRequest$inboundSchema;
  /** @deprecated use `GetExperimentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetExperimentsRequest$outboundSchema;
  /** @deprecated use `GetExperimentsRequest$Outbound` instead. */
  export type Outbound = GetExperimentsRequest$Outbound;
}

export function getExperimentsRequestToJSON(
  getExperimentsRequest: GetExperimentsRequest,
): string {
  return JSON.stringify(
    GetExperimentsRequest$outboundSchema.parse(getExperimentsRequest),
  );
}

export function getExperimentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetExperimentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetExperimentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetExperimentsRequest' from JSON`,
  );
}
