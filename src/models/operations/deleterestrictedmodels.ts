/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const DeleteRestrictedModelsLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type DeleteRestrictedModelsLDAPIVersion = ClosedEnum<
  typeof DeleteRestrictedModelsLDAPIVersion
>;

export type DeleteRestrictedModelsRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: DeleteRestrictedModelsLDAPIVersion;
  projectKey: string;
  /**
   * List of AI model keys to remove from the restricted list
   */
  restrictedModelsRequest: components.RestrictedModelsRequest;
};

/** @internal */
export const DeleteRestrictedModelsLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeleteRestrictedModelsLDAPIVersion
> = z.nativeEnum(DeleteRestrictedModelsLDAPIVersion);

/** @internal */
export const DeleteRestrictedModelsLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeleteRestrictedModelsLDAPIVersion
> = DeleteRestrictedModelsLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRestrictedModelsLDAPIVersion$ {
  /** @deprecated use `DeleteRestrictedModelsLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = DeleteRestrictedModelsLDAPIVersion$inboundSchema;
  /** @deprecated use `DeleteRestrictedModelsLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    DeleteRestrictedModelsLDAPIVersion$outboundSchema;
}

/** @internal */
export const DeleteRestrictedModelsRequest$inboundSchema: z.ZodType<
  DeleteRestrictedModelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": DeleteRestrictedModelsLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  RestrictedModelsRequest: components.RestrictedModelsRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
    "RestrictedModelsRequest": "restrictedModelsRequest",
  });
});

/** @internal */
export type DeleteRestrictedModelsRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  RestrictedModelsRequest: components.RestrictedModelsRequest$Outbound;
};

/** @internal */
export const DeleteRestrictedModelsRequest$outboundSchema: z.ZodType<
  DeleteRestrictedModelsRequest$Outbound,
  z.ZodTypeDef,
  DeleteRestrictedModelsRequest
> = z.object({
  ldAPIVersion: DeleteRestrictedModelsLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  restrictedModelsRequest: components.RestrictedModelsRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
    restrictedModelsRequest: "RestrictedModelsRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRestrictedModelsRequest$ {
  /** @deprecated use `DeleteRestrictedModelsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRestrictedModelsRequest$inboundSchema;
  /** @deprecated use `DeleteRestrictedModelsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRestrictedModelsRequest$outboundSchema;
  /** @deprecated use `DeleteRestrictedModelsRequest$Outbound` instead. */
  export type Outbound = DeleteRestrictedModelsRequest$Outbound;
}

export function deleteRestrictedModelsRequestToJSON(
  deleteRestrictedModelsRequest: DeleteRestrictedModelsRequest,
): string {
  return JSON.stringify(
    DeleteRestrictedModelsRequest$outboundSchema.parse(
      deleteRestrictedModelsRequest,
    ),
  );
}

export function deleteRestrictedModelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRestrictedModelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRestrictedModelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRestrictedModelsRequest' from JSON`,
  );
}
