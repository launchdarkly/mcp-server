/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const DeleteModelConfigLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type DeleteModelConfigLDAPIVersion = ClosedEnum<
  typeof DeleteModelConfigLDAPIVersion
>;

export type DeleteModelConfigRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: DeleteModelConfigLDAPIVersion;
  projectKey: string;
  modelConfigKey: string;
};

/** @internal */
export const DeleteModelConfigLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeleteModelConfigLDAPIVersion
> = z.nativeEnum(DeleteModelConfigLDAPIVersion);

/** @internal */
export const DeleteModelConfigLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeleteModelConfigLDAPIVersion
> = DeleteModelConfigLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteModelConfigLDAPIVersion$ {
  /** @deprecated use `DeleteModelConfigLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = DeleteModelConfigLDAPIVersion$inboundSchema;
  /** @deprecated use `DeleteModelConfigLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = DeleteModelConfigLDAPIVersion$outboundSchema;
}

/** @internal */
export const DeleteModelConfigRequest$inboundSchema: z.ZodType<
  DeleteModelConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": DeleteModelConfigLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  modelConfigKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type DeleteModelConfigRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  modelConfigKey: string;
};

/** @internal */
export const DeleteModelConfigRequest$outboundSchema: z.ZodType<
  DeleteModelConfigRequest$Outbound,
  z.ZodTypeDef,
  DeleteModelConfigRequest
> = z.object({
  ldAPIVersion: DeleteModelConfigLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  modelConfigKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteModelConfigRequest$ {
  /** @deprecated use `DeleteModelConfigRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteModelConfigRequest$inboundSchema;
  /** @deprecated use `DeleteModelConfigRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteModelConfigRequest$outboundSchema;
  /** @deprecated use `DeleteModelConfigRequest$Outbound` instead. */
  export type Outbound = DeleteModelConfigRequest$Outbound;
}

export function deleteModelConfigRequestToJSON(
  deleteModelConfigRequest: DeleteModelConfigRequest,
): string {
  return JSON.stringify(
    DeleteModelConfigRequest$outboundSchema.parse(deleteModelConfigRequest),
  );
}

export function deleteModelConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteModelConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteModelConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteModelConfigRequest' from JSON`,
  );
}
