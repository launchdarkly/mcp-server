/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBigSegmentExportRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
  /**
   * The export ID
   */
  exportID: string;
};

/** @internal */
export const GetBigSegmentExportRequest$inboundSchema: z.ZodType<
  GetBigSegmentExportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  exportID: z.string(),
});

/** @internal */
export type GetBigSegmentExportRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
  exportID: string;
};

/** @internal */
export const GetBigSegmentExportRequest$outboundSchema: z.ZodType<
  GetBigSegmentExportRequest$Outbound,
  z.ZodTypeDef,
  GetBigSegmentExportRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  exportID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBigSegmentExportRequest$ {
  /** @deprecated use `GetBigSegmentExportRequest$inboundSchema` instead. */
  export const inboundSchema = GetBigSegmentExportRequest$inboundSchema;
  /** @deprecated use `GetBigSegmentExportRequest$outboundSchema` instead. */
  export const outboundSchema = GetBigSegmentExportRequest$outboundSchema;
  /** @deprecated use `GetBigSegmentExportRequest$Outbound` instead. */
  export type Outbound = GetBigSegmentExportRequest$Outbound;
}

export function getBigSegmentExportRequestToJSON(
  getBigSegmentExportRequest: GetBigSegmentExportRequest,
): string {
  return JSON.stringify(
    GetBigSegmentExportRequest$outboundSchema.parse(getBigSegmentExportRequest),
  );
}

export function getBigSegmentExportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBigSegmentExportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBigSegmentExportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBigSegmentExportRequest' from JSON`,
  );
}
