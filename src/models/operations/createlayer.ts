/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateLayerRequest = {
  /**
   * The project key
   */
  projectKey: string;
  layerPost: models.LayerPost;
};

/** @internal */
export const CreateLayerRequest$inboundSchema: z.ZodType<
  CreateLayerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  LayerPost: models.LayerPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LayerPost": "layerPost",
  });
});

/** @internal */
export type CreateLayerRequest$Outbound = {
  projectKey: string;
  LayerPost: models.LayerPost$Outbound;
};

/** @internal */
export const CreateLayerRequest$outboundSchema: z.ZodType<
  CreateLayerRequest$Outbound,
  z.ZodTypeDef,
  CreateLayerRequest
> = z.object({
  projectKey: z.string(),
  layerPost: models.LayerPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    layerPost: "LayerPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLayerRequest$ {
  /** @deprecated use `CreateLayerRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLayerRequest$inboundSchema;
  /** @deprecated use `CreateLayerRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLayerRequest$outboundSchema;
  /** @deprecated use `CreateLayerRequest$Outbound` instead. */
  export type Outbound = CreateLayerRequest$Outbound;
}

export function createLayerRequestToJSON(
  createLayerRequest: CreateLayerRequest,
): string {
  return JSON.stringify(
    CreateLayerRequest$outboundSchema.parse(createLayerRequest),
  );
}

export function createLayerRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLayerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLayerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLayerRequest' from JSON`,
  );
}
