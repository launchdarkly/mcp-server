/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteEnvironmentRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
};

/** @internal */
export const DeleteEnvironmentRequest$inboundSchema: z.ZodType<
  DeleteEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
});

/** @internal */
export type DeleteEnvironmentRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
};

/** @internal */
export const DeleteEnvironmentRequest$outboundSchema: z.ZodType<
  DeleteEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  DeleteEnvironmentRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvironmentRequest$ {
  /** @deprecated use `DeleteEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteEnvironmentRequest$inboundSchema;
  /** @deprecated use `DeleteEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteEnvironmentRequest$outboundSchema;
  /** @deprecated use `DeleteEnvironmentRequest$Outbound` instead. */
  export type Outbound = DeleteEnvironmentRequest$Outbound;
}

export function deleteEnvironmentRequestToJSON(
  deleteEnvironmentRequest: DeleteEnvironmentRequest,
): string {
  return JSON.stringify(
    DeleteEnvironmentRequest$outboundSchema.parse(deleteEnvironmentRequest),
  );
}

export function deleteEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteEnvironmentRequest' from JSON`,
  );
}
