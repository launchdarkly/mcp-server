/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchRepositoryRequest = {
  /**
   * The repository name
   */
  repo: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchRepositoryRequest$inboundSchema: z.ZodType<
  PatchRepositoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchRepositoryRequest$Outbound = {
  repo: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchRepositoryRequest$outboundSchema: z.ZodType<
  PatchRepositoryRequest$Outbound,
  z.ZodTypeDef,
  PatchRepositoryRequest
> = z.object({
  repo: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchRepositoryRequest$ {
  /** @deprecated use `PatchRepositoryRequest$inboundSchema` instead. */
  export const inboundSchema = PatchRepositoryRequest$inboundSchema;
  /** @deprecated use `PatchRepositoryRequest$outboundSchema` instead. */
  export const outboundSchema = PatchRepositoryRequest$outboundSchema;
  /** @deprecated use `PatchRepositoryRequest$Outbound` instead. */
  export type Outbound = PatchRepositoryRequest$Outbound;
}

export function patchRepositoryRequestToJSON(
  patchRepositoryRequest: PatchRepositoryRequest,
): string {
  return JSON.stringify(
    PatchRepositoryRequest$outboundSchema.parse(patchRepositoryRequest),
  );
}

export function patchRepositoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchRepositoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchRepositoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchRepositoryRequest' from JSON`,
  );
}
