/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTagsRequest = {
  /**
   * Fetch tags associated with the specified resource type. Options are `flag`, `project`, `environment`, `segment`, `metric`. Returns all types by default.
   */
  kind?: Array<string> | undefined;
  /**
   * Return tags with the specified prefix
   */
  pre?: string | undefined;
  /**
   * Whether or not to return archived flags
   */
  archived?: boolean | undefined;
  /**
   * The number of tags to return. Maximum is 1000.
   */
  limit?: number | undefined;
  /**
   * The index of the first tag to return. Default is 0.
   */
  offset?: number | undefined;
  /**
   * The time to retrieve tags as of. Default is the current time.
   */
  asOf?: string | undefined;
};

/** @internal */
export const GetTagsRequest$inboundSchema: z.ZodType<
  GetTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.array(z.string()).optional(),
  pre: z.string().optional(),
  archived: z.boolean().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  asOf: z.string().optional(),
});

/** @internal */
export type GetTagsRequest$Outbound = {
  kind?: Array<string> | undefined;
  pre?: string | undefined;
  archived?: boolean | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  asOf?: string | undefined;
};

/** @internal */
export const GetTagsRequest$outboundSchema: z.ZodType<
  GetTagsRequest$Outbound,
  z.ZodTypeDef,
  GetTagsRequest
> = z.object({
  kind: z.array(z.string()).optional(),
  pre: z.string().optional(),
  archived: z.boolean().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  asOf: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagsRequest$ {
  /** @deprecated use `GetTagsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTagsRequest$inboundSchema;
  /** @deprecated use `GetTagsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTagsRequest$outboundSchema;
  /** @deprecated use `GetTagsRequest$Outbound` instead. */
  export type Outbound = GetTagsRequest$Outbound;
}

export function getTagsRequestToJSON(getTagsRequest: GetTagsRequest): string {
  return JSON.stringify(GetTagsRequest$outboundSchema.parse(getTagsRequest));
}

export function getTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTagsRequest' from JSON`,
  );
}
