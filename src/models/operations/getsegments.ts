/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSegmentsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The number of segments to return. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * Accepts sorting order and fields. Fields can be comma separated. Possible fields are 'creationDate', 'name', 'lastModified'. Example: `sort=name` sort by names ascending or `sort=-name,creationDate` sort by names descending and creationDate ascending.
   */
  sort?: string | undefined;
  /**
   * Accepts filter by `excludedKeys`, `external`, `includedKeys`, `query`, `tags`, `unbounded`. To learn more about the filter syntax, read the  'Filtering segments' section above.
   */
  filter?: string | undefined;
};

/** @internal */
export const GetSegmentsRequest$inboundSchema: z.ZodType<
  GetSegmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
});

/** @internal */
export type GetSegmentsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  offset?: number | undefined;
  sort?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const GetSegmentsRequest$outboundSchema: z.ZodType<
  GetSegmentsRequest$Outbound,
  z.ZodTypeDef,
  GetSegmentsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSegmentsRequest$ {
  /** @deprecated use `GetSegmentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSegmentsRequest$inboundSchema;
  /** @deprecated use `GetSegmentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSegmentsRequest$outboundSchema;
  /** @deprecated use `GetSegmentsRequest$Outbound` instead. */
  export type Outbound = GetSegmentsRequest$Outbound;
}

export function getSegmentsRequestToJSON(
  getSegmentsRequest: GetSegmentsRequest,
): string {
  return JSON.stringify(
    GetSegmentsRequest$outboundSchema.parse(getSegmentsRequest),
  );
}

export function getSegmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSegmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSegmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSegmentsRequest' from JSON`,
  );
}
