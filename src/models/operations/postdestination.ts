/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostDestinationRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  destinationPost: components.DestinationPost;
};

/** @internal */
export const PostDestinationRequest$inboundSchema: z.ZodType<
  PostDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  DestinationPost: components.DestinationPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "DestinationPost": "destinationPost",
  });
});

/** @internal */
export type PostDestinationRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  DestinationPost: components.DestinationPost$Outbound;
};

/** @internal */
export const PostDestinationRequest$outboundSchema: z.ZodType<
  PostDestinationRequest$Outbound,
  z.ZodTypeDef,
  PostDestinationRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  destinationPost: components.DestinationPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    destinationPost: "DestinationPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostDestinationRequest$ {
  /** @deprecated use `PostDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = PostDestinationRequest$inboundSchema;
  /** @deprecated use `PostDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = PostDestinationRequest$outboundSchema;
  /** @deprecated use `PostDestinationRequest$Outbound` instead. */
  export type Outbound = PostDestinationRequest$Outbound;
}

export function postDestinationRequestToJSON(
  postDestinationRequest: PostDestinationRequest,
): string {
  return JSON.stringify(
    PostDestinationRequest$outboundSchema.parse(postDestinationRequest),
  );
}

export function postDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostDestinationRequest' from JSON`,
  );
}
