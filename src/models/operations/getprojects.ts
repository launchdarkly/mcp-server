/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProjectsRequest = {
  /**
   * The number of projects to return in the response. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and returns the next `limit` items.
   */
  offset?: number | undefined;
  /**
   * A comma-separated list of filters. Each filter is constructed as `field:value`.
   */
  filter?: string | undefined;
  /**
   * A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order.
   */
  sort?: string | undefined;
  /**
   * A comma-separated list of properties that can reveal additional information in the response.
   */
  expand?: string | undefined;
};

/** @internal */
export const GetProjectsRequest$inboundSchema: z.ZodType<
  GetProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  sort: z.string().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetProjectsRequest$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
  sort?: string | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetProjectsRequest$outboundSchema: z.ZodType<
  GetProjectsRequest$Outbound,
  z.ZodTypeDef,
  GetProjectsRequest
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
  sort: z.string().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectsRequest$ {
  /** @deprecated use `GetProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = GetProjectsRequest$inboundSchema;
  /** @deprecated use `GetProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = GetProjectsRequest$outboundSchema;
  /** @deprecated use `GetProjectsRequest$Outbound` instead. */
  export type Outbound = GetProjectsRequest$Outbound;
}

export function getProjectsRequestToJSON(
  getProjectsRequest: GetProjectsRequest,
): string {
  return JSON.stringify(
    GetProjectsRequest$outboundSchema.parse(getProjectsRequest),
  );
}

export function getProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectsRequest' from JSON`,
  );
}
