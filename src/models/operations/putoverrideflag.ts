/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutOverrideFlagServerList = [
  "http://localhost:8765",
] as const;

export type PutOverrideFlagRequest = {
  projectKey: string;
  flagKey: string;
  /**
   * flag value to override flag with. The json representation of the variation value.
   */
  flagValue: components.FlagValueUnion;
};

/** @internal */
export const PutOverrideFlagRequest$inboundSchema: z.ZodType<
  PutOverrideFlagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  FlagValue: components.FlagValueUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FlagValue": "flagValue",
  });
});

/** @internal */
export type PutOverrideFlagRequest$Outbound = {
  projectKey: string;
  flagKey: string;
  FlagValue: components.FlagValueUnion$Outbound;
};

/** @internal */
export const PutOverrideFlagRequest$outboundSchema: z.ZodType<
  PutOverrideFlagRequest$Outbound,
  z.ZodTypeDef,
  PutOverrideFlagRequest
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  flagValue: components.FlagValueUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    flagValue: "FlagValue",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutOverrideFlagRequest$ {
  /** @deprecated use `PutOverrideFlagRequest$inboundSchema` instead. */
  export const inboundSchema = PutOverrideFlagRequest$inboundSchema;
  /** @deprecated use `PutOverrideFlagRequest$outboundSchema` instead. */
  export const outboundSchema = PutOverrideFlagRequest$outboundSchema;
  /** @deprecated use `PutOverrideFlagRequest$Outbound` instead. */
  export type Outbound = PutOverrideFlagRequest$Outbound;
}

export function putOverrideFlagRequestToJSON(
  putOverrideFlagRequest: PutOverrideFlagRequest,
): string {
  return JSON.stringify(
    PutOverrideFlagRequest$outboundSchema.parse(putOverrideFlagRequest),
  );
}

export function putOverrideFlagRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutOverrideFlagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutOverrideFlagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutOverrideFlagRequest' from JSON`,
  );
}
