/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutContextKindRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The context kind key
   */
  key: string;
  upsertContextKindPayload: components.UpsertContextKindPayload;
};

/** @internal */
export const PutContextKindRequest$inboundSchema: z.ZodType<
  PutContextKindRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  key: z.string(),
  UpsertContextKindPayload: components.UpsertContextKindPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpsertContextKindPayload": "upsertContextKindPayload",
  });
});

/** @internal */
export type PutContextKindRequest$Outbound = {
  projectKey: string;
  key: string;
  UpsertContextKindPayload: components.UpsertContextKindPayload$Outbound;
};

/** @internal */
export const PutContextKindRequest$outboundSchema: z.ZodType<
  PutContextKindRequest$Outbound,
  z.ZodTypeDef,
  PutContextKindRequest
> = z.object({
  projectKey: z.string(),
  key: z.string(),
  upsertContextKindPayload: components.UpsertContextKindPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    upsertContextKindPayload: "UpsertContextKindPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutContextKindRequest$ {
  /** @deprecated use `PutContextKindRequest$inboundSchema` instead. */
  export const inboundSchema = PutContextKindRequest$inboundSchema;
  /** @deprecated use `PutContextKindRequest$outboundSchema` instead. */
  export const outboundSchema = PutContextKindRequest$outboundSchema;
  /** @deprecated use `PutContextKindRequest$Outbound` instead. */
  export type Outbound = PutContextKindRequest$Outbound;
}

export function putContextKindRequestToJSON(
  putContextKindRequest: PutContextKindRequest,
): string {
  return JSON.stringify(
    PutContextKindRequest$outboundSchema.parse(putContextKindRequest),
  );
}

export function putContextKindRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutContextKindRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutContextKindRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutContextKindRequest' from JSON`,
  );
}
