/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApplicationRequest = {
  /**
   * The application key
   */
  applicationKey: string;
};

/** @internal */
export const DeleteApplicationRequest$inboundSchema: z.ZodType<
  DeleteApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationKey: z.string(),
});

/** @internal */
export type DeleteApplicationRequest$Outbound = {
  applicationKey: string;
};

/** @internal */
export const DeleteApplicationRequest$outboundSchema: z.ZodType<
  DeleteApplicationRequest$Outbound,
  z.ZodTypeDef,
  DeleteApplicationRequest
> = z.object({
  applicationKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApplicationRequest$ {
  /** @deprecated use `DeleteApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApplicationRequest$inboundSchema;
  /** @deprecated use `DeleteApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApplicationRequest$outboundSchema;
  /** @deprecated use `DeleteApplicationRequest$Outbound` instead. */
  export type Outbound = DeleteApplicationRequest$Outbound;
}

export function deleteApplicationRequestToJSON(
  deleteApplicationRequest: DeleteApplicationRequest,
): string {
  return JSON.stringify(
    DeleteApplicationRequest$outboundSchema.parse(deleteApplicationRequest),
  );
}

export function deleteApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApplicationRequest' from JSON`,
  );
}
