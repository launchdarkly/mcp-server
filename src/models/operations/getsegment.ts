/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSegmentRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
};

/** @internal */
export const GetSegmentRequest$inboundSchema: z.ZodType<
  GetSegmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
});

/** @internal */
export type GetSegmentRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
};

/** @internal */
export const GetSegmentRequest$outboundSchema: z.ZodType<
  GetSegmentRequest$Outbound,
  z.ZodTypeDef,
  GetSegmentRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSegmentRequest$ {
  /** @deprecated use `GetSegmentRequest$inboundSchema` instead. */
  export const inboundSchema = GetSegmentRequest$inboundSchema;
  /** @deprecated use `GetSegmentRequest$outboundSchema` instead. */
  export const outboundSchema = GetSegmentRequest$outboundSchema;
  /** @deprecated use `GetSegmentRequest$Outbound` instead. */
  export type Outbound = GetSegmentRequest$Outbound;
}

export function getSegmentRequestToJSON(
  getSegmentRequest: GetSegmentRequest,
): string {
  return JSON.stringify(
    GetSegmentRequest$outboundSchema.parse(getSegmentRequest),
  );
}

export function getSegmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSegmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSegmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSegmentRequest' from JSON`,
  );
}
