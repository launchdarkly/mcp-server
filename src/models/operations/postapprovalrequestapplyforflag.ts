/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostApprovalRequestApplyForFlagRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The feature flag approval request ID
   */
  id: string;
  postApprovalRequestApplyRequest: models.PostApprovalRequestApplyRequest;
};

/** @internal */
export const PostApprovalRequestApplyForFlagRequest$inboundSchema: z.ZodType<
  PostApprovalRequestApplyForFlagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  id: z.string(),
  postApprovalRequestApplyRequest:
    models.PostApprovalRequestApplyRequest$inboundSchema,
});

/** @internal */
export type PostApprovalRequestApplyForFlagRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  environmentKey: string;
  id: string;
  postApprovalRequestApplyRequest:
    models.PostApprovalRequestApplyRequest$Outbound;
};

/** @internal */
export const PostApprovalRequestApplyForFlagRequest$outboundSchema: z.ZodType<
  PostApprovalRequestApplyForFlagRequest$Outbound,
  z.ZodTypeDef,
  PostApprovalRequestApplyForFlagRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  id: z.string(),
  postApprovalRequestApplyRequest:
    models.PostApprovalRequestApplyRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApprovalRequestApplyForFlagRequest$ {
  /** @deprecated use `PostApprovalRequestApplyForFlagRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostApprovalRequestApplyForFlagRequest$inboundSchema;
  /** @deprecated use `PostApprovalRequestApplyForFlagRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApprovalRequestApplyForFlagRequest$outboundSchema;
  /** @deprecated use `PostApprovalRequestApplyForFlagRequest$Outbound` instead. */
  export type Outbound = PostApprovalRequestApplyForFlagRequest$Outbound;
}

export function postApprovalRequestApplyForFlagRequestToJSON(
  postApprovalRequestApplyForFlagRequest:
    PostApprovalRequestApplyForFlagRequest,
): string {
  return JSON.stringify(
    PostApprovalRequestApplyForFlagRequest$outboundSchema.parse(
      postApprovalRequestApplyForFlagRequest,
    ),
  );
}

export function postApprovalRequestApplyForFlagRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApprovalRequestApplyForFlagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApprovalRequestApplyForFlagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApprovalRequestApplyForFlagRequest' from JSON`,
  );
}
