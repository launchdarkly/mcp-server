/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEventsUsageRequest = {
  /**
   * The type of event to retrieve. Must be either `received` or `published`.
   */
  type: string;
  /**
   * The series of data returned starts from this timestamp. Defaults to 24 hours ago.
   */
  from?: string | undefined;
  /**
   * The series of data returned ends at this timestamp. Defaults to the current time.
   */
  to?: string | undefined;
};

/** @internal */
export const GetEventsUsageRequest$inboundSchema: z.ZodType<
  GetEventsUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  from: z.string().optional(),
  to: z.string().optional(),
});

/** @internal */
export type GetEventsUsageRequest$Outbound = {
  type: string;
  from?: string | undefined;
  to?: string | undefined;
};

/** @internal */
export const GetEventsUsageRequest$outboundSchema: z.ZodType<
  GetEventsUsageRequest$Outbound,
  z.ZodTypeDef,
  GetEventsUsageRequest
> = z.object({
  type: z.string(),
  from: z.string().optional(),
  to: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsUsageRequest$ {
  /** @deprecated use `GetEventsUsageRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventsUsageRequest$inboundSchema;
  /** @deprecated use `GetEventsUsageRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventsUsageRequest$outboundSchema;
  /** @deprecated use `GetEventsUsageRequest$Outbound` instead. */
  export type Outbound = GetEventsUsageRequest$Outbound;
}

export function getEventsUsageRequestToJSON(
  getEventsUsageRequest: GetEventsUsageRequest,
): string {
  return JSON.stringify(
    GetEventsUsageRequest$outboundSchema.parse(getEventsUsageRequest),
  );
}

export function getEventsUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventsUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventsUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventsUsageRequest' from JSON`,
  );
}
