/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateSubscriptionRequest = {
  /**
   * The integration key
   */
  integrationKey: string;
  subscriptionPost: models.SubscriptionPost;
};

/** @internal */
export const CreateSubscriptionRequest$inboundSchema: z.ZodType<
  CreateSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
  subscriptionPost: models.SubscriptionPost$inboundSchema,
});

/** @internal */
export type CreateSubscriptionRequest$Outbound = {
  integrationKey: string;
  subscriptionPost: models.SubscriptionPost$Outbound;
};

/** @internal */
export const CreateSubscriptionRequest$outboundSchema: z.ZodType<
  CreateSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  CreateSubscriptionRequest
> = z.object({
  integrationKey: z.string(),
  subscriptionPost: models.SubscriptionPost$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSubscriptionRequest$ {
  /** @deprecated use `CreateSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSubscriptionRequest$inboundSchema;
  /** @deprecated use `CreateSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSubscriptionRequest$outboundSchema;
  /** @deprecated use `CreateSubscriptionRequest$Outbound` instead. */
  export type Outbound = CreateSubscriptionRequest$Outbound;
}

export function createSubscriptionRequestToJSON(
  createSubscriptionRequest: CreateSubscriptionRequest,
): string {
  return JSON.stringify(
    CreateSubscriptionRequest$outboundSchema.parse(createSubscriptionRequest),
  );
}

export function createSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSubscriptionRequest' from JSON`,
  );
}
