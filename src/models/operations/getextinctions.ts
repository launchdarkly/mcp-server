/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetExtinctionsRequest = {
  /**
   * Filter results to a specific repository
   */
  repoName?: string | undefined;
  /**
   * Filter results to a specific branch. By default, only the default branch will be queried for extinctions.
   */
  branchName?: string | undefined;
  /**
   * Filter results to a specific project
   */
  projKey?: string | undefined;
  /**
   * Filter results to a specific flag key
   */
  flagKey?: string | undefined;
  /**
   * Filter results to a specific timeframe based on commit time, expressed as a Unix epoch time in milliseconds. Must be used with `to`.
   */
  from?: number | undefined;
  /**
   * Filter results to a specific timeframe based on commit time, expressed as a Unix epoch time in milliseconds. Must be used with `from`.
   */
  to?: number | undefined;
};

/** @internal */
export const GetExtinctionsRequest$inboundSchema: z.ZodType<
  GetExtinctionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repoName: z.string().optional(),
  branchName: z.string().optional(),
  projKey: z.string().optional(),
  flagKey: z.string().optional(),
  from: z.number().int().optional(),
  to: z.number().int().optional(),
});

/** @internal */
export type GetExtinctionsRequest$Outbound = {
  repoName?: string | undefined;
  branchName?: string | undefined;
  projKey?: string | undefined;
  flagKey?: string | undefined;
  from?: number | undefined;
  to?: number | undefined;
};

/** @internal */
export const GetExtinctionsRequest$outboundSchema: z.ZodType<
  GetExtinctionsRequest$Outbound,
  z.ZodTypeDef,
  GetExtinctionsRequest
> = z.object({
  repoName: z.string().optional(),
  branchName: z.string().optional(),
  projKey: z.string().optional(),
  flagKey: z.string().optional(),
  from: z.number().int().optional(),
  to: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExtinctionsRequest$ {
  /** @deprecated use `GetExtinctionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetExtinctionsRequest$inboundSchema;
  /** @deprecated use `GetExtinctionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetExtinctionsRequest$outboundSchema;
  /** @deprecated use `GetExtinctionsRequest$Outbound` instead. */
  export type Outbound = GetExtinctionsRequest$Outbound;
}

export function getExtinctionsRequestToJSON(
  getExtinctionsRequest: GetExtinctionsRequest,
): string {
  return JSON.stringify(
    GetExtinctionsRequest$outboundSchema.parse(getExtinctionsRequest),
  );
}

export function getExtinctionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetExtinctionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetExtinctionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetExtinctionsRequest' from JSON`,
  );
}
