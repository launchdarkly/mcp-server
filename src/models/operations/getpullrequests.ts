/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPullRequestsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * Required if you are using the <code>sort</code> parameter's <code>leadTime</code> option to sort pull requests.
   */
  environmentKey?: string | undefined;
  /**
   * Filter the results to pull requests deployed to a comma separated list of applications
   */
  applicationKey?: string | undefined;
  /**
   * Filter results to pull requests with the given status. Options: `open`, `merged`, `closed`, `deployed`.
   */
  status?: string | undefined;
  /**
   * Filter list of pull requests by title or author
   */
  query?: string | undefined;
  /**
   * The number of pull requests to return. Default is 20. Maximum allowed is 100.
   */
  limit?: number | undefined;
  /**
   * Expand properties in response. Options: `deployments`, `flagReferences`, `leadTime`.
   */
  expand?: string | undefined;
  /**
   * Sort results. Requires the `environmentKey` to be set. Options: `leadTime` (asc) and `-leadTime` (desc). When query option is excluded, default sort is by created or merged date.
   */
  sort?: string | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is 7 days ago.
   */
  from?: Date | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is now.
   */
  to?: Date | undefined;
  /**
   * Identifier used for pagination
   */
  after?: string | undefined;
  /**
   * Identifier used for pagination
   */
  before?: string | undefined;
};

/** @internal */
export const GetPullRequestsRequest$inboundSchema: z.ZodType<
  GetPullRequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string().optional(),
  applicationKey: z.string().optional(),
  status: z.string().optional(),
  query: z.string().optional(),
  limit: z.number().int().optional(),
  expand: z.string().optional(),
  sort: z.string().optional(),
  from: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  to: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  after: z.string().optional(),
  before: z.string().optional(),
});

/** @internal */
export type GetPullRequestsRequest$Outbound = {
  projectKey: string;
  environmentKey?: string | undefined;
  applicationKey?: string | undefined;
  status?: string | undefined;
  query?: string | undefined;
  limit?: number | undefined;
  expand?: string | undefined;
  sort?: string | undefined;
  from?: string | undefined;
  to?: string | undefined;
  after?: string | undefined;
  before?: string | undefined;
};

/** @internal */
export const GetPullRequestsRequest$outboundSchema: z.ZodType<
  GetPullRequestsRequest$Outbound,
  z.ZodTypeDef,
  GetPullRequestsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string().optional(),
  applicationKey: z.string().optional(),
  status: z.string().optional(),
  query: z.string().optional(),
  limit: z.number().int().optional(),
  expand: z.string().optional(),
  sort: z.string().optional(),
  from: z.date().transform(v => v.toISOString()).optional(),
  to: z.date().transform(v => v.toISOString()).optional(),
  after: z.string().optional(),
  before: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPullRequestsRequest$ {
  /** @deprecated use `GetPullRequestsRequest$inboundSchema` instead. */
  export const inboundSchema = GetPullRequestsRequest$inboundSchema;
  /** @deprecated use `GetPullRequestsRequest$outboundSchema` instead. */
  export const outboundSchema = GetPullRequestsRequest$outboundSchema;
  /** @deprecated use `GetPullRequestsRequest$Outbound` instead. */
  export type Outbound = GetPullRequestsRequest$Outbound;
}

export function getPullRequestsRequestToJSON(
  getPullRequestsRequest: GetPullRequestsRequest,
): string {
  return JSON.stringify(
    GetPullRequestsRequest$outboundSchema.parse(getPullRequestsRequest),
  );
}

export function getPullRequestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPullRequestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPullRequestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPullRequestsRequest' from JSON`,
  );
}
