/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllReleaseProgressionsForReleasePipelineRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The pipeline key
   */
  pipelineKey: string;
  /**
   * Accepts filter by `status` and `activePhaseId`. `status` can take a value of `completed` or `active`. `activePhaseId` takes a UUID and will filter results down to releases active on the specified phase. Providing `status equals completed` along with an `activePhaseId` filter will return an error as they are disjoint sets of data. The combination of `status equals active` and `activePhaseId` will return the same results as `activePhaseId` alone.
   */
  filter?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Defaults to 0. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetAllReleaseProgressionsForReleasePipelineRequest$inboundSchema:
  z.ZodType<
    GetAllReleaseProgressionsForReleasePipelineRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    projectKey: z.string(),
    pipelineKey: z.string(),
    filter: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/** @internal */
export type GetAllReleaseProgressionsForReleasePipelineRequest$Outbound = {
  projectKey: string;
  pipelineKey: string;
  filter?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetAllReleaseProgressionsForReleasePipelineRequest$outboundSchema:
  z.ZodType<
    GetAllReleaseProgressionsForReleasePipelineRequest$Outbound,
    z.ZodTypeDef,
    GetAllReleaseProgressionsForReleasePipelineRequest
  > = z.object({
    projectKey: z.string(),
    pipelineKey: z.string(),
    filter: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllReleaseProgressionsForReleasePipelineRequest$ {
  /** @deprecated use `GetAllReleaseProgressionsForReleasePipelineRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAllReleaseProgressionsForReleasePipelineRequest$inboundSchema;
  /** @deprecated use `GetAllReleaseProgressionsForReleasePipelineRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAllReleaseProgressionsForReleasePipelineRequest$outboundSchema;
  /** @deprecated use `GetAllReleaseProgressionsForReleasePipelineRequest$Outbound` instead. */
  export type Outbound =
    GetAllReleaseProgressionsForReleasePipelineRequest$Outbound;
}

export function getAllReleaseProgressionsForReleasePipelineRequestToJSON(
  getAllReleaseProgressionsForReleasePipelineRequest:
    GetAllReleaseProgressionsForReleasePipelineRequest,
): string {
  return JSON.stringify(
    GetAllReleaseProgressionsForReleasePipelineRequest$outboundSchema.parse(
      getAllReleaseProgressionsForReleasePipelineRequest,
    ),
  );
}

export function getAllReleaseProgressionsForReleasePipelineRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllReleaseProgressionsForReleasePipelineRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllReleaseProgressionsForReleasePipelineRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllReleaseProgressionsForReleasePipelineRequest' from JSON`,
  );
}
