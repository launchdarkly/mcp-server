/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTokenRequest = {
  /**
   * The ID of the access token
   */
  id: string;
};

/** @internal */
export const GetTokenRequest$inboundSchema: z.ZodType<
  GetTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetTokenRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetTokenRequest$outboundSchema: z.ZodType<
  GetTokenRequest$Outbound,
  z.ZodTypeDef,
  GetTokenRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTokenRequest$ {
  /** @deprecated use `GetTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetTokenRequest$inboundSchema;
  /** @deprecated use `GetTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetTokenRequest$outboundSchema;
  /** @deprecated use `GetTokenRequest$Outbound` instead. */
  export type Outbound = GetTokenRequest$Outbound;
}

export function getTokenRequestToJSON(
  getTokenRequest: GetTokenRequest,
): string {
  return JSON.stringify(GetTokenRequest$outboundSchema.parse(getTokenRequest));
}

export function getTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTokenRequest' from JSON`,
  );
}
