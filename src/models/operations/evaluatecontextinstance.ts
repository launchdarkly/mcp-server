/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvaluateContextInstanceRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The number of feature flags to return. Defaults to -1, which returns all flags
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order
   */
  sort?: string | undefined;
  /**
   * A comma-separated list of filters. Each filter is of the form `field operator value`. Supported fields are explained above.
   */
  filter?: string | undefined;
  requestBody: { [k: string]: any };
};

/** @internal */
export const EvaluateContextInstanceRequest$inboundSchema: z.ZodType<
  EvaluateContextInstanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  RequestBody: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type EvaluateContextInstanceRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  limit?: number | undefined;
  offset?: number | undefined;
  sort?: string | undefined;
  filter?: string | undefined;
  RequestBody: { [k: string]: any };
};

/** @internal */
export const EvaluateContextInstanceRequest$outboundSchema: z.ZodType<
  EvaluateContextInstanceRequest$Outbound,
  z.ZodTypeDef,
  EvaluateContextInstanceRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  filter: z.string().optional(),
  requestBody: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluateContextInstanceRequest$ {
  /** @deprecated use `EvaluateContextInstanceRequest$inboundSchema` instead. */
  export const inboundSchema = EvaluateContextInstanceRequest$inboundSchema;
  /** @deprecated use `EvaluateContextInstanceRequest$outboundSchema` instead. */
  export const outboundSchema = EvaluateContextInstanceRequest$outboundSchema;
  /** @deprecated use `EvaluateContextInstanceRequest$Outbound` instead. */
  export type Outbound = EvaluateContextInstanceRequest$Outbound;
}

export function evaluateContextInstanceRequestToJSON(
  evaluateContextInstanceRequest: EvaluateContextInstanceRequest,
): string {
  return JSON.stringify(
    EvaluateContextInstanceRequest$outboundSchema.parse(
      evaluateContextInstanceRequest,
    ),
  );
}

export function evaluateContextInstanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<EvaluateContextInstanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvaluateContextInstanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvaluateContextInstanceRequest' from JSON`,
  );
}
