/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteIntegrationConfigurationRequest = {
  /**
   * The ID of the integration configuration to be deleted
   */
  integrationConfigurationId: string;
};

/** @internal */
export const DeleteIntegrationConfigurationRequest$inboundSchema: z.ZodType<
  DeleteIntegrationConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
});

/** @internal */
export type DeleteIntegrationConfigurationRequest$Outbound = {
  integrationConfigurationId: string;
};

/** @internal */
export const DeleteIntegrationConfigurationRequest$outboundSchema: z.ZodType<
  DeleteIntegrationConfigurationRequest$Outbound,
  z.ZodTypeDef,
  DeleteIntegrationConfigurationRequest
> = z.object({
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIntegrationConfigurationRequest$ {
  /** @deprecated use `DeleteIntegrationConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteIntegrationConfigurationRequest$inboundSchema;
  /** @deprecated use `DeleteIntegrationConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteIntegrationConfigurationRequest$outboundSchema;
  /** @deprecated use `DeleteIntegrationConfigurationRequest$Outbound` instead. */
  export type Outbound = DeleteIntegrationConfigurationRequest$Outbound;
}

export function deleteIntegrationConfigurationRequestToJSON(
  deleteIntegrationConfigurationRequest: DeleteIntegrationConfigurationRequest,
): string {
  return JSON.stringify(
    DeleteIntegrationConfigurationRequest$outboundSchema.parse(
      deleteIntegrationConfigurationRequest,
    ),
  );
}

export function deleteIntegrationConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIntegrationConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteIntegrationConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIntegrationConfigurationRequest' from JSON`,
  );
}
