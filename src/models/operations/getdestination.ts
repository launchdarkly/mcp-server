/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDestinationRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The Data Export destination ID
   */
  id: string;
};

/** @internal */
export const GetDestinationRequest$inboundSchema: z.ZodType<
  GetDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  id: z.string(),
});

/** @internal */
export type GetDestinationRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  id: string;
};

/** @internal */
export const GetDestinationRequest$outboundSchema: z.ZodType<
  GetDestinationRequest$Outbound,
  z.ZodTypeDef,
  GetDestinationRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationRequest$ {
  /** @deprecated use `GetDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = GetDestinationRequest$inboundSchema;
  /** @deprecated use `GetDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = GetDestinationRequest$outboundSchema;
  /** @deprecated use `GetDestinationRequest$Outbound` instead. */
  export type Outbound = GetDestinationRequest$Outbound;
}

export function getDestinationRequestToJSON(
  getDestinationRequest: GetDestinationRequest,
): string {
  return JSON.stringify(
    GetDestinationRequest$outboundSchema.parse(getDestinationRequest),
  );
}

export function getDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDestinationRequest' from JSON`,
  );
}
