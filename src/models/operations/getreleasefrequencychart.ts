/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetReleaseFrequencyChartRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Comma separated list of application keys
   */
  applicationKey?: string | undefined;
  /**
   * Filter events to those associated with an experiment (`true`) or without an experiment (`false`)
   */
  hasExperiments?: boolean | undefined;
  /**
   * Filter to include or exclude global events. Default value is `include`. Options: `include`, `exclude`
   */
  global?: string | undefined;
  /**
   * Property to group results by. Options: `impact`
   */
  groupBy?: string | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is 7 days ago.
   */
  from?: Date | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is now.
   */
  to?: Date | undefined;
  /**
   * Specify type of bucket. Options: `rolling`, `hour`, `day`. Default: `rolling`.
   */
  bucketType?: string | undefined;
  /**
   * Duration of intervals for x-axis in milliseconds. Default value is one day (`86400000` milliseconds).
   */
  bucketMs?: number | undefined;
  /**
   * Options: `metrics`
   */
  expand?: string | undefined;
};

/** @internal */
export const GetReleaseFrequencyChartRequest$inboundSchema: z.ZodType<
  GetReleaseFrequencyChartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string().optional(),
  hasExperiments: z.boolean().optional(),
  global: z.string().optional(),
  groupBy: z.string().optional(),
  from: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  to: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  bucketType: z.string().optional(),
  bucketMs: z.number().int().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetReleaseFrequencyChartRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  applicationKey?: string | undefined;
  hasExperiments?: boolean | undefined;
  global?: string | undefined;
  groupBy?: string | undefined;
  from?: string | undefined;
  to?: string | undefined;
  bucketType?: string | undefined;
  bucketMs?: number | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetReleaseFrequencyChartRequest$outboundSchema: z.ZodType<
  GetReleaseFrequencyChartRequest$Outbound,
  z.ZodTypeDef,
  GetReleaseFrequencyChartRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string().optional(),
  hasExperiments: z.boolean().optional(),
  global: z.string().optional(),
  groupBy: z.string().optional(),
  from: z.date().transform(v => v.toISOString()).optional(),
  to: z.date().transform(v => v.toISOString()).optional(),
  bucketType: z.string().optional(),
  bucketMs: z.number().int().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReleaseFrequencyChartRequest$ {
  /** @deprecated use `GetReleaseFrequencyChartRequest$inboundSchema` instead. */
  export const inboundSchema = GetReleaseFrequencyChartRequest$inboundSchema;
  /** @deprecated use `GetReleaseFrequencyChartRequest$outboundSchema` instead. */
  export const outboundSchema = GetReleaseFrequencyChartRequest$outboundSchema;
  /** @deprecated use `GetReleaseFrequencyChartRequest$Outbound` instead. */
  export type Outbound = GetReleaseFrequencyChartRequest$Outbound;
}

export function getReleaseFrequencyChartRequestToJSON(
  getReleaseFrequencyChartRequest: GetReleaseFrequencyChartRequest,
): string {
  return JSON.stringify(
    GetReleaseFrequencyChartRequest$outboundSchema.parse(
      getReleaseFrequencyChartRequest,
    ),
  );
}

export function getReleaseFrequencyChartRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetReleaseFrequencyChartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReleaseFrequencyChartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReleaseFrequencyChartRequest' from JSON`,
  );
}
