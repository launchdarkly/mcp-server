/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchOAuthClientRequest = {
  /**
   * The client ID
   */
  clientId: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchOAuthClientRequest$inboundSchema: z.ZodType<
  PatchOAuthClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchOAuthClientRequest$Outbound = {
  clientId: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchOAuthClientRequest$outboundSchema: z.ZodType<
  PatchOAuthClientRequest$Outbound,
  z.ZodTypeDef,
  PatchOAuthClientRequest
> = z.object({
  clientId: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchOAuthClientRequest$ {
  /** @deprecated use `PatchOAuthClientRequest$inboundSchema` instead. */
  export const inboundSchema = PatchOAuthClientRequest$inboundSchema;
  /** @deprecated use `PatchOAuthClientRequest$outboundSchema` instead. */
  export const outboundSchema = PatchOAuthClientRequest$outboundSchema;
  /** @deprecated use `PatchOAuthClientRequest$Outbound` instead. */
  export type Outbound = PatchOAuthClientRequest$Outbound;
}

export function patchOAuthClientRequestToJSON(
  patchOAuthClientRequest: PatchOAuthClientRequest,
): string {
  return JSON.stringify(
    PatchOAuthClientRequest$outboundSchema.parse(patchOAuthClientRequest),
  );
}

export function patchOAuthClientRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchOAuthClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchOAuthClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchOAuthClientRequest' from JSON`,
  );
}
