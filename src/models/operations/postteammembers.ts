/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostTeamMembersFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type PostTeamMembersRequestBody = {
  /**
   * CSV file containing email addresses
   */
  file?: PostTeamMembersFile | Blob | undefined;
};

export type PostTeamMembersRequest = {
  /**
   * The team key
   */
  teamKey: string;
  requestBody: PostTeamMembersRequestBody;
};

/** @internal */
export const PostTeamMembersFile$inboundSchema: z.ZodType<
  PostTeamMembersFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type PostTeamMembersFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const PostTeamMembersFile$outboundSchema: z.ZodType<
  PostTeamMembersFile$Outbound,
  z.ZodTypeDef,
  PostTeamMembersFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTeamMembersFile$ {
  /** @deprecated use `PostTeamMembersFile$inboundSchema` instead. */
  export const inboundSchema = PostTeamMembersFile$inboundSchema;
  /** @deprecated use `PostTeamMembersFile$outboundSchema` instead. */
  export const outboundSchema = PostTeamMembersFile$outboundSchema;
  /** @deprecated use `PostTeamMembersFile$Outbound` instead. */
  export type Outbound = PostTeamMembersFile$Outbound;
}

export function postTeamMembersFileToJSON(
  postTeamMembersFile: PostTeamMembersFile,
): string {
  return JSON.stringify(
    PostTeamMembersFile$outboundSchema.parse(postTeamMembersFile),
  );
}

export function postTeamMembersFileFromJSON(
  jsonString: string,
): SafeParseResult<PostTeamMembersFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTeamMembersFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTeamMembersFile' from JSON`,
  );
}

/** @internal */
export const PostTeamMembersRequestBody$inboundSchema: z.ZodType<
  PostTeamMembersRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => PostTeamMembersFile$inboundSchema).optional(),
});

/** @internal */
export type PostTeamMembersRequestBody$Outbound = {
  file?: PostTeamMembersFile$Outbound | Blob | undefined;
};

/** @internal */
export const PostTeamMembersRequestBody$outboundSchema: z.ZodType<
  PostTeamMembersRequestBody$Outbound,
  z.ZodTypeDef,
  PostTeamMembersRequestBody
> = z.object({
  file: z.lazy(() => PostTeamMembersFile$outboundSchema).or(blobLikeSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTeamMembersRequestBody$ {
  /** @deprecated use `PostTeamMembersRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostTeamMembersRequestBody$inboundSchema;
  /** @deprecated use `PostTeamMembersRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostTeamMembersRequestBody$outboundSchema;
  /** @deprecated use `PostTeamMembersRequestBody$Outbound` instead. */
  export type Outbound = PostTeamMembersRequestBody$Outbound;
}

export function postTeamMembersRequestBodyToJSON(
  postTeamMembersRequestBody: PostTeamMembersRequestBody,
): string {
  return JSON.stringify(
    PostTeamMembersRequestBody$outboundSchema.parse(postTeamMembersRequestBody),
  );
}

export function postTeamMembersRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostTeamMembersRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTeamMembersRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTeamMembersRequestBody' from JSON`,
  );
}

/** @internal */
export const PostTeamMembersRequest$inboundSchema: z.ZodType<
  PostTeamMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamKey: z.string(),
  RequestBody: z.lazy(() => PostTeamMembersRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostTeamMembersRequest$Outbound = {
  teamKey: string;
  RequestBody: PostTeamMembersRequestBody$Outbound;
};

/** @internal */
export const PostTeamMembersRequest$outboundSchema: z.ZodType<
  PostTeamMembersRequest$Outbound,
  z.ZodTypeDef,
  PostTeamMembersRequest
> = z.object({
  teamKey: z.string(),
  requestBody: z.lazy(() => PostTeamMembersRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTeamMembersRequest$ {
  /** @deprecated use `PostTeamMembersRequest$inboundSchema` instead. */
  export const inboundSchema = PostTeamMembersRequest$inboundSchema;
  /** @deprecated use `PostTeamMembersRequest$outboundSchema` instead. */
  export const outboundSchema = PostTeamMembersRequest$outboundSchema;
  /** @deprecated use `PostTeamMembersRequest$Outbound` instead. */
  export type Outbound = PostTeamMembersRequest$Outbound;
}

export function postTeamMembersRequestToJSON(
  postTeamMembersRequest: PostTeamMembersRequest,
): string {
  return JSON.stringify(
    PostTeamMembersRequest$outboundSchema.parse(postTeamMembersRequest),
  );
}

export function postTeamMembersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostTeamMembersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTeamMembersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTeamMembersRequest' from JSON`,
  );
}
