/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSearchUsersRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Full-text search for users based on name, first name, last name, e-mail address, or key
   */
  q?: string | undefined;
  /**
   * Specifies the maximum number of items in the collection to return (max: 50, default: 20)
   */
  limit?: number | undefined;
  /**
   * Deprecated, use `searchAfter` instead. Specifies the first item to return in the collection.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  offset?: number | undefined;
  /**
   * A Unix epoch time in milliseconds specifying the maximum last time a user requested a feature flag from LaunchDarkly
   */
  after?: number | undefined;
  /**
   * Specifies a field by which to sort. LaunchDarkly supports the `userKey` and `lastSeen` fields. Fields prefixed by a dash ( - ) sort in descending order.
   */
  sort?: string | undefined;
  /**
   * Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the `next` link we provide instead.
   */
  searchAfter?: string | undefined;
  /**
   * A comma-separated list of user attribute filters. Each filter is in the form of attributeKey:attributeValue
   */
  filter?: string | undefined;
};

/** @internal */
export const GetSearchUsersRequest$inboundSchema: z.ZodType<
  GetSearchUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  q: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  after: z.number().int().optional(),
  sort: z.string().optional(),
  searchAfter: z.string().optional(),
  filter: z.string().optional(),
});

/** @internal */
export type GetSearchUsersRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  q?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  after?: number | undefined;
  sort?: string | undefined;
  searchAfter?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const GetSearchUsersRequest$outboundSchema: z.ZodType<
  GetSearchUsersRequest$Outbound,
  z.ZodTypeDef,
  GetSearchUsersRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  q: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  after: z.number().int().optional(),
  sort: z.string().optional(),
  searchAfter: z.string().optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchUsersRequest$ {
  /** @deprecated use `GetSearchUsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetSearchUsersRequest$inboundSchema;
  /** @deprecated use `GetSearchUsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetSearchUsersRequest$outboundSchema;
  /** @deprecated use `GetSearchUsersRequest$Outbound` instead. */
  export type Outbound = GetSearchUsersRequest$Outbound;
}

export function getSearchUsersRequestToJSON(
  getSearchUsersRequest: GetSearchUsersRequest,
): string {
  return JSON.stringify(
    GetSearchUsersRequest$outboundSchema.parse(getSearchUsersRequest),
  );
}

export function getSearchUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchUsersRequest' from JSON`,
  );
}
