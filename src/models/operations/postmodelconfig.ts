/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Version of the endpoint.
 */
export const PostModelConfigLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type PostModelConfigLDAPIVersion = ClosedEnum<
  typeof PostModelConfigLDAPIVersion
>;

export type PostModelConfigRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: PostModelConfigLDAPIVersion;
  projectKey: string;
  /**
   * AI model config object to create
   */
  modelConfigPost: models.ModelConfigPost;
};

/** @internal */
export const PostModelConfigLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof PostModelConfigLDAPIVersion
> = z.nativeEnum(PostModelConfigLDAPIVersion);

/** @internal */
export const PostModelConfigLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof PostModelConfigLDAPIVersion
> = PostModelConfigLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostModelConfigLDAPIVersion$ {
  /** @deprecated use `PostModelConfigLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = PostModelConfigLDAPIVersion$inboundSchema;
  /** @deprecated use `PostModelConfigLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = PostModelConfigLDAPIVersion$outboundSchema;
}

/** @internal */
export const PostModelConfigRequest$inboundSchema: z.ZodType<
  PostModelConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": PostModelConfigLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  ModelConfigPost: models.ModelConfigPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
    "ModelConfigPost": "modelConfigPost",
  });
});

/** @internal */
export type PostModelConfigRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  ModelConfigPost: models.ModelConfigPost$Outbound;
};

/** @internal */
export const PostModelConfigRequest$outboundSchema: z.ZodType<
  PostModelConfigRequest$Outbound,
  z.ZodTypeDef,
  PostModelConfigRequest
> = z.object({
  ldAPIVersion: PostModelConfigLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  modelConfigPost: models.ModelConfigPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
    modelConfigPost: "ModelConfigPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostModelConfigRequest$ {
  /** @deprecated use `PostModelConfigRequest$inboundSchema` instead. */
  export const inboundSchema = PostModelConfigRequest$inboundSchema;
  /** @deprecated use `PostModelConfigRequest$outboundSchema` instead. */
  export const outboundSchema = PostModelConfigRequest$outboundSchema;
  /** @deprecated use `PostModelConfigRequest$Outbound` instead. */
  export type Outbound = PostModelConfigRequest$Outbound;
}

export function postModelConfigRequestToJSON(
  postModelConfigRequest: PostModelConfigRequest,
): string {
  return JSON.stringify(
    PostModelConfigRequest$outboundSchema.parse(postModelConfigRequest),
  );
}

export function postModelConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostModelConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostModelConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostModelConfigRequest' from JSON`,
  );
}
