/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchBigSegmentStoreIntegrationRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The integration key, either `redis` or `dynamodb`
   */
  integrationKey: string;
  /**
   * The integration ID
   */
  integrationId: string;
  requestBody: Array<components.PatchOperation>;
};

/** @internal */
export const PatchBigSegmentStoreIntegrationRequest$inboundSchema: z.ZodType<
  PatchBigSegmentStoreIntegrationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  integrationKey: z.string(),
  integrationId: z.string(),
  RequestBody: z.array(components.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchBigSegmentStoreIntegrationRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  integrationKey: string;
  integrationId: string;
  RequestBody: Array<components.PatchOperation$Outbound>;
};

/** @internal */
export const PatchBigSegmentStoreIntegrationRequest$outboundSchema: z.ZodType<
  PatchBigSegmentStoreIntegrationRequest$Outbound,
  z.ZodTypeDef,
  PatchBigSegmentStoreIntegrationRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  integrationKey: z.string(),
  integrationId: z.string(),
  requestBody: z.array(components.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchBigSegmentStoreIntegrationRequest$ {
  /** @deprecated use `PatchBigSegmentStoreIntegrationRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchBigSegmentStoreIntegrationRequest$inboundSchema;
  /** @deprecated use `PatchBigSegmentStoreIntegrationRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchBigSegmentStoreIntegrationRequest$outboundSchema;
  /** @deprecated use `PatchBigSegmentStoreIntegrationRequest$Outbound` instead. */
  export type Outbound = PatchBigSegmentStoreIntegrationRequest$Outbound;
}

export function patchBigSegmentStoreIntegrationRequestToJSON(
  patchBigSegmentStoreIntegrationRequest:
    PatchBigSegmentStoreIntegrationRequest,
): string {
  return JSON.stringify(
    PatchBigSegmentStoreIntegrationRequest$outboundSchema.parse(
      patchBigSegmentStoreIntegrationRequest,
    ),
  );
}

export function patchBigSegmentStoreIntegrationRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchBigSegmentStoreIntegrationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchBigSegmentStoreIntegrationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchBigSegmentStoreIntegrationRequest' from JSON`,
  );
}
