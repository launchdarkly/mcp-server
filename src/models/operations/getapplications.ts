/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApplicationsRequest = {
  /**
   * Accepts filter by `key`, `name`, `kind`, and `autoAdded`. To learn more about the filter syntax, read [Filtering applications and application versions](https://launchdarkly.com/docs/api/applications-beta#filtering-applications-and-application-versions).
   */
  filter?: string | undefined;
  /**
   * The number of applications to return. Defaults to 10.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * Accepts sorting order and fields. Fields can be comma separated. Possible fields are `creationDate`, `name`. Examples: `sort=name` sort by names ascending, `sort=-name,creationDate` sort by names descending and creationDate ascending.
   */
  sort?: string | undefined;
  /**
   * A comma-separated list of properties that can reveal additional information in the response. Options: `flags`.
   */
  expand?: string | undefined;
};

/** @internal */
export const GetApplicationsRequest$inboundSchema: z.ZodType<
  GetApplicationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetApplicationsRequest$Outbound = {
  filter?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  sort?: string | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetApplicationsRequest$outboundSchema: z.ZodType<
  GetApplicationsRequest$Outbound,
  z.ZodTypeDef,
  GetApplicationsRequest
> = z.object({
  filter: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApplicationsRequest$ {
  /** @deprecated use `GetApplicationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApplicationsRequest$inboundSchema;
  /** @deprecated use `GetApplicationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApplicationsRequest$outboundSchema;
  /** @deprecated use `GetApplicationsRequest$Outbound` instead. */
  export type Outbound = GetApplicationsRequest$Outbound;
}

export function getApplicationsRequestToJSON(
  getApplicationsRequest: GetApplicationsRequest,
): string {
  return JSON.stringify(
    GetApplicationsRequest$outboundSchema.parse(getApplicationsRequest),
  );
}

export function getApplicationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApplicationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApplicationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApplicationsRequest' from JSON`,
  );
}
