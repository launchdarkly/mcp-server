/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllIntegrationConfigurationsRequest = {
  /**
   * Integration key
   */
  integrationKey: string;
};

/** @internal */
export const GetAllIntegrationConfigurationsRequest$inboundSchema: z.ZodType<
  GetAllIntegrationConfigurationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
});

/** @internal */
export type GetAllIntegrationConfigurationsRequest$Outbound = {
  integrationKey: string;
};

/** @internal */
export const GetAllIntegrationConfigurationsRequest$outboundSchema: z.ZodType<
  GetAllIntegrationConfigurationsRequest$Outbound,
  z.ZodTypeDef,
  GetAllIntegrationConfigurationsRequest
> = z.object({
  integrationKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllIntegrationConfigurationsRequest$ {
  /** @deprecated use `GetAllIntegrationConfigurationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAllIntegrationConfigurationsRequest$inboundSchema;
  /** @deprecated use `GetAllIntegrationConfigurationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAllIntegrationConfigurationsRequest$outboundSchema;
  /** @deprecated use `GetAllIntegrationConfigurationsRequest$Outbound` instead. */
  export type Outbound = GetAllIntegrationConfigurationsRequest$Outbound;
}

export function getAllIntegrationConfigurationsRequestToJSON(
  getAllIntegrationConfigurationsRequest:
    GetAllIntegrationConfigurationsRequest,
): string {
  return JSON.stringify(
    GetAllIntegrationConfigurationsRequest$outboundSchema.parse(
      getAllIntegrationConfigurationsRequest,
    ),
  );
}

export function getAllIntegrationConfigurationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllIntegrationConfigurationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllIntegrationConfigurationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllIntegrationConfigurationsRequest' from JSON`,
  );
}
