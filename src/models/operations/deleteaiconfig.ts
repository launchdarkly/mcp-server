/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const DeleteAIConfigLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type DeleteAIConfigLDAPIVersion = ClosedEnum<
  typeof DeleteAIConfigLDAPIVersion
>;

export type DeleteAIConfigRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: DeleteAIConfigLDAPIVersion;
  projectKey: string;
  configKey: string;
};

/** @internal */
export const DeleteAIConfigLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeleteAIConfigLDAPIVersion
> = z.nativeEnum(DeleteAIConfigLDAPIVersion);

/** @internal */
export const DeleteAIConfigLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeleteAIConfigLDAPIVersion
> = DeleteAIConfigLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAIConfigLDAPIVersion$ {
  /** @deprecated use `DeleteAIConfigLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = DeleteAIConfigLDAPIVersion$inboundSchema;
  /** @deprecated use `DeleteAIConfigLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = DeleteAIConfigLDAPIVersion$outboundSchema;
}

/** @internal */
export const DeleteAIConfigRequest$inboundSchema: z.ZodType<
  DeleteAIConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": DeleteAIConfigLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  configKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type DeleteAIConfigRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  configKey: string;
};

/** @internal */
export const DeleteAIConfigRequest$outboundSchema: z.ZodType<
  DeleteAIConfigRequest$Outbound,
  z.ZodTypeDef,
  DeleteAIConfigRequest
> = z.object({
  ldAPIVersion: DeleteAIConfigLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  configKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAIConfigRequest$ {
  /** @deprecated use `DeleteAIConfigRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAIConfigRequest$inboundSchema;
  /** @deprecated use `DeleteAIConfigRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAIConfigRequest$outboundSchema;
  /** @deprecated use `DeleteAIConfigRequest$Outbound` instead. */
  export type Outbound = DeleteAIConfigRequest$Outbound;
}

export function deleteAIConfigRequestToJSON(
  deleteAIConfigRequest: DeleteAIConfigRequest,
): string {
  return JSON.stringify(
    DeleteAIConfigRequest$outboundSchema.parse(deleteAIConfigRequest),
  );
}

export function deleteAIConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAIConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAIConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAIConfigRequest' from JSON`,
  );
}
