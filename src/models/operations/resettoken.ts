/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResetTokenRequest = {
  /**
   * The ID of the access token to update
   */
  id: string;
  /**
   * An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.
   */
  expiry?: number | undefined;
};

/** @internal */
export const ResetTokenRequest$inboundSchema: z.ZodType<
  ResetTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  expiry: z.number().int().optional(),
});

/** @internal */
export type ResetTokenRequest$Outbound = {
  id: string;
  expiry?: number | undefined;
};

/** @internal */
export const ResetTokenRequest$outboundSchema: z.ZodType<
  ResetTokenRequest$Outbound,
  z.ZodTypeDef,
  ResetTokenRequest
> = z.object({
  id: z.string(),
  expiry: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetTokenRequest$ {
  /** @deprecated use `ResetTokenRequest$inboundSchema` instead. */
  export const inboundSchema = ResetTokenRequest$inboundSchema;
  /** @deprecated use `ResetTokenRequest$outboundSchema` instead. */
  export const outboundSchema = ResetTokenRequest$outboundSchema;
  /** @deprecated use `ResetTokenRequest$Outbound` instead. */
  export type Outbound = ResetTokenRequest$Outbound;
}

export function resetTokenRequestToJSON(
  resetTokenRequest: ResetTokenRequest,
): string {
  return JSON.stringify(
    ResetTokenRequest$outboundSchema.parse(resetTokenRequest),
  );
}

export function resetTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResetTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetTokenRequest' from JSON`,
  );
}
