/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRepositoryProjectRequest = {
  /**
   * The repository key
   */
  repositoryKey: string;
  /**
   * The project key
   */
  projectKey: string;
};

/** @internal */
export const DeleteRepositoryProjectRequest$inboundSchema: z.ZodType<
  DeleteRepositoryProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repositoryKey: z.string(),
  projectKey: z.string(),
});

/** @internal */
export type DeleteRepositoryProjectRequest$Outbound = {
  repositoryKey: string;
  projectKey: string;
};

/** @internal */
export const DeleteRepositoryProjectRequest$outboundSchema: z.ZodType<
  DeleteRepositoryProjectRequest$Outbound,
  z.ZodTypeDef,
  DeleteRepositoryProjectRequest
> = z.object({
  repositoryKey: z.string(),
  projectKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRepositoryProjectRequest$ {
  /** @deprecated use `DeleteRepositoryProjectRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRepositoryProjectRequest$inboundSchema;
  /** @deprecated use `DeleteRepositoryProjectRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRepositoryProjectRequest$outboundSchema;
  /** @deprecated use `DeleteRepositoryProjectRequest$Outbound` instead. */
  export type Outbound = DeleteRepositoryProjectRequest$Outbound;
}

export function deleteRepositoryProjectRequestToJSON(
  deleteRepositoryProjectRequest: DeleteRepositoryProjectRequest,
): string {
  return JSON.stringify(
    DeleteRepositoryProjectRequest$outboundSchema.parse(
      deleteRepositoryProjectRequest,
    ),
  );
}

export function deleteRepositoryProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRepositoryProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRepositoryProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRepositoryProjectRequest' from JSON`,
  );
}
