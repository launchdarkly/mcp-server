/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchInsightGroupRequest = {
  /**
   * The insight group key
   */
  insightGroupKey: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchInsightGroupRequest$inboundSchema: z.ZodType<
  PatchInsightGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  insightGroupKey: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchInsightGroupRequest$Outbound = {
  insightGroupKey: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchInsightGroupRequest$outboundSchema: z.ZodType<
  PatchInsightGroupRequest$Outbound,
  z.ZodTypeDef,
  PatchInsightGroupRequest
> = z.object({
  insightGroupKey: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchInsightGroupRequest$ {
  /** @deprecated use `PatchInsightGroupRequest$inboundSchema` instead. */
  export const inboundSchema = PatchInsightGroupRequest$inboundSchema;
  /** @deprecated use `PatchInsightGroupRequest$outboundSchema` instead. */
  export const outboundSchema = PatchInsightGroupRequest$outboundSchema;
  /** @deprecated use `PatchInsightGroupRequest$Outbound` instead. */
  export type Outbound = PatchInsightGroupRequest$Outbound;
}

export function patchInsightGroupRequestToJSON(
  patchInsightGroupRequest: PatchInsightGroupRequest,
): string {
  return JSON.stringify(
    PatchInsightGroupRequest$outboundSchema.parse(patchInsightGroupRequest),
  );
}

export function patchInsightGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchInsightGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchInsightGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchInsightGroupRequest' from JSON`,
  );
}
