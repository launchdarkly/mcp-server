/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInsightGroupsRequest = {
  /**
   * The number of insight groups to return. Default is 20. Must be between 1 and 20 inclusive.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * Sort flag list by field. Prefix field with <code>-</code> to sort in descending order. Allowed fields: name
   */
  sort?: string | undefined;
  /**
   * Filter list of insights groups by name.
   */
  query?: string | undefined;
  /**
   * Options: `scores`, `environment`, `metadata`
   */
  expand?: string | undefined;
};

/** @internal */
export const GetInsightGroupsRequest$inboundSchema: z.ZodType<
  GetInsightGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  query: z.string().optional(),
  expand: z.string().optional(),
});

/** @internal */
export type GetInsightGroupsRequest$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  sort?: string | undefined;
  query?: string | undefined;
  expand?: string | undefined;
};

/** @internal */
export const GetInsightGroupsRequest$outboundSchema: z.ZodType<
  GetInsightGroupsRequest$Outbound,
  z.ZodTypeDef,
  GetInsightGroupsRequest
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  sort: z.string().optional(),
  query: z.string().optional(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInsightGroupsRequest$ {
  /** @deprecated use `GetInsightGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = GetInsightGroupsRequest$inboundSchema;
  /** @deprecated use `GetInsightGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = GetInsightGroupsRequest$outboundSchema;
  /** @deprecated use `GetInsightGroupsRequest$Outbound` instead. */
  export type Outbound = GetInsightGroupsRequest$Outbound;
}

export function getInsightGroupsRequestToJSON(
  getInsightGroupsRequest: GetInsightGroupsRequest,
): string {
  return JSON.stringify(
    GetInsightGroupsRequest$outboundSchema.parse(getInsightGroupsRequest),
  );
}

export function getInsightGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInsightGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInsightGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInsightGroupsRequest' from JSON`,
  );
}
