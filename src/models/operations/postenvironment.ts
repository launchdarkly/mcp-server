/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostEnvironmentRequest = {
  /**
   * The project key
   */
  projectKey: string;
  environmentPost: components.EnvironmentPost;
};

/** @internal */
export const PostEnvironmentRequest$inboundSchema: z.ZodType<
  PostEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  EnvironmentPost: components.EnvironmentPost$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "EnvironmentPost": "environmentPost",
  });
});

/** @internal */
export type PostEnvironmentRequest$Outbound = {
  projectKey: string;
  EnvironmentPost: components.EnvironmentPost$Outbound;
};

/** @internal */
export const PostEnvironmentRequest$outboundSchema: z.ZodType<
  PostEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  PostEnvironmentRequest
> = z.object({
  projectKey: z.string(),
  environmentPost: components.EnvironmentPost$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    environmentPost: "EnvironmentPost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEnvironmentRequest$ {
  /** @deprecated use `PostEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = PostEnvironmentRequest$inboundSchema;
  /** @deprecated use `PostEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = PostEnvironmentRequest$outboundSchema;
  /** @deprecated use `PostEnvironmentRequest$Outbound` instead. */
  export type Outbound = PostEnvironmentRequest$Outbound;
}

export function postEnvironmentRequestToJSON(
  postEnvironmentRequest: PostEnvironmentRequest,
): string {
  return JSON.stringify(
    PostEnvironmentRequest$outboundSchema.parse(postEnvironmentRequest),
  );
}

export function postEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEnvironmentRequest' from JSON`,
  );
}
