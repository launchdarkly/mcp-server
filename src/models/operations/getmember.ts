/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMemberRequest = {
  /**
   * The member ID
   */
  id: string;
  /**
   * A comma-separated list of properties that can reveal additional information in the response.
   */
  expand?: string | undefined;
};

/** @internal */
export const GetMemberRequest$inboundSchema: z.ZodType<
  GetMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  expand: z.string().optional(),
});

/** @internal */
export type GetMemberRequest$Outbound = {
  id: string;
  expand?: string | undefined;
};

/** @internal */
export const GetMemberRequest$outboundSchema: z.ZodType<
  GetMemberRequest$Outbound,
  z.ZodTypeDef,
  GetMemberRequest
> = z.object({
  id: z.string(),
  expand: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberRequest$ {
  /** @deprecated use `GetMemberRequest$inboundSchema` instead. */
  export const inboundSchema = GetMemberRequest$inboundSchema;
  /** @deprecated use `GetMemberRequest$outboundSchema` instead. */
  export const outboundSchema = GetMemberRequest$outboundSchema;
  /** @deprecated use `GetMemberRequest$Outbound` instead. */
  export type Outbound = GetMemberRequest$Outbound;
}

export function getMemberRequestToJSON(
  getMemberRequest: GetMemberRequest,
): string {
  return JSON.stringify(
    GetMemberRequest$outboundSchema.parse(getMemberRequest),
  );
}

export function getMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberRequest' from JSON`,
  );
}
