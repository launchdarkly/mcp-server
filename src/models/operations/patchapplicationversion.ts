/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchApplicationVersionRequest = {
  /**
   * The application key
   */
  applicationKey: string;
  /**
   * The application version key
   */
  versionKey: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchApplicationVersionRequest$inboundSchema: z.ZodType<
  PatchApplicationVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationKey: z.string(),
  versionKey: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchApplicationVersionRequest$Outbound = {
  applicationKey: string;
  versionKey: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchApplicationVersionRequest$outboundSchema: z.ZodType<
  PatchApplicationVersionRequest$Outbound,
  z.ZodTypeDef,
  PatchApplicationVersionRequest
> = z.object({
  applicationKey: z.string(),
  versionKey: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchApplicationVersionRequest$ {
  /** @deprecated use `PatchApplicationVersionRequest$inboundSchema` instead. */
  export const inboundSchema = PatchApplicationVersionRequest$inboundSchema;
  /** @deprecated use `PatchApplicationVersionRequest$outboundSchema` instead. */
  export const outboundSchema = PatchApplicationVersionRequest$outboundSchema;
  /** @deprecated use `PatchApplicationVersionRequest$Outbound` instead. */
  export type Outbound = PatchApplicationVersionRequest$Outbound;
}

export function patchApplicationVersionRequestToJSON(
  patchApplicationVersionRequest: PatchApplicationVersionRequest,
): string {
  return JSON.stringify(
    PatchApplicationVersionRequest$outboundSchema.parse(
      patchApplicationVersionRequest,
    ),
  );
}

export function patchApplicationVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchApplicationVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchApplicationVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchApplicationVersionRequest' from JSON`,
  );
}
