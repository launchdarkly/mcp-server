/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllReleasePipelinesRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * A comma-separated list of filters. Each filter is of the form field:value. Read the endpoint description for a full list of available filter fields.
   */
  filter?: string | undefined;
  /**
   * The maximum number of items to return. Defaults to 20.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Defaults to 0. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
};

/** @internal */
export const GetAllReleasePipelinesRequest$inboundSchema: z.ZodType<
  GetAllReleasePipelinesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  filter: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type GetAllReleasePipelinesRequest$Outbound = {
  projectKey: string;
  filter?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const GetAllReleasePipelinesRequest$outboundSchema: z.ZodType<
  GetAllReleasePipelinesRequest$Outbound,
  z.ZodTypeDef,
  GetAllReleasePipelinesRequest
> = z.object({
  projectKey: z.string(),
  filter: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllReleasePipelinesRequest$ {
  /** @deprecated use `GetAllReleasePipelinesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllReleasePipelinesRequest$inboundSchema;
  /** @deprecated use `GetAllReleasePipelinesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllReleasePipelinesRequest$outboundSchema;
  /** @deprecated use `GetAllReleasePipelinesRequest$Outbound` instead. */
  export type Outbound = GetAllReleasePipelinesRequest$Outbound;
}

export function getAllReleasePipelinesRequestToJSON(
  getAllReleasePipelinesRequest: GetAllReleasePipelinesRequest,
): string {
  return JSON.stringify(
    GetAllReleasePipelinesRequest$outboundSchema.parse(
      getAllReleasePipelinesRequest,
    ),
  );
}

export function getAllReleasePipelinesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllReleasePipelinesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllReleasePipelinesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllReleasePipelinesRequest' from JSON`,
  );
}
