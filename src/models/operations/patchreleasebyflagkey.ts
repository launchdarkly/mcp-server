/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PatchReleaseByFlagKeyRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The flag key
   */
  flagKey: string;
  requestBody: Array<models.PatchOperation>;
};

/** @internal */
export const PatchReleaseByFlagKeyRequest$inboundSchema: z.ZodType<
  PatchReleaseByFlagKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  RequestBody: z.array(models.PatchOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchReleaseByFlagKeyRequest$Outbound = {
  projectKey: string;
  flagKey: string;
  RequestBody: Array<models.PatchOperation$Outbound>;
};

/** @internal */
export const PatchReleaseByFlagKeyRequest$outboundSchema: z.ZodType<
  PatchReleaseByFlagKeyRequest$Outbound,
  z.ZodTypeDef,
  PatchReleaseByFlagKeyRequest
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  requestBody: z.array(models.PatchOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchReleaseByFlagKeyRequest$ {
  /** @deprecated use `PatchReleaseByFlagKeyRequest$inboundSchema` instead. */
  export const inboundSchema = PatchReleaseByFlagKeyRequest$inboundSchema;
  /** @deprecated use `PatchReleaseByFlagKeyRequest$outboundSchema` instead. */
  export const outboundSchema = PatchReleaseByFlagKeyRequest$outboundSchema;
  /** @deprecated use `PatchReleaseByFlagKeyRequest$Outbound` instead. */
  export type Outbound = PatchReleaseByFlagKeyRequest$Outbound;
}

export function patchReleaseByFlagKeyRequestToJSON(
  patchReleaseByFlagKeyRequest: PatchReleaseByFlagKeyRequest,
): string {
  return JSON.stringify(
    PatchReleaseByFlagKeyRequest$outboundSchema.parse(
      patchReleaseByFlagKeyRequest,
    ),
  );
}

export function patchReleaseByFlagKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchReleaseByFlagKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchReleaseByFlagKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchReleaseByFlagKeyRequest' from JSON`,
  );
}
