/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMauUsageRequest = {
  /**
   * The series of data returned starts from this timestamp. Defaults to 30 days ago.
   */
  from?: string | undefined;
  /**
   * The series of data returned ends at this timestamp. Defaults to the current time.
   */
  to?: string | undefined;
  /**
   * A project key to filter results to. Can be specified multiple times, one query parameter per project key, to view data for multiple projects.
   */
  project?: string | undefined;
  /**
   * An environment key to filter results to. When using this parameter, exactly one project key must also be set. Can be specified multiple times as separate query parameters to view data for multiple environments within a single project.
   */
  environment?: string | undefined;
  /**
   * An SDK type to filter results to. Can be specified multiple times, one query parameter per SDK type. Valid values: client, server
   */
  sdktype?: string | undefined;
  /**
   * An SDK name to filter results to. Can be specified multiple times, one query parameter per SDK.
   */
  sdk?: string | undefined;
  /**
   * If specified, filters results to either anonymous or nonanonymous users.
   */
  anonymous?: string | undefined;
  /**
   * If specified, returns data for each distinct value of the given field. Can be specified multiple times to group data by multiple dimensions (for example, to group by both project and SDK). Valid values: project, environment, sdktype, sdk, anonymous, contextKind, sdkAppId
   */
  groupby?: string | undefined;
  /**
   * If specified, queries for rolling 30-day, month-to-date, or daily incremental counts. Default is rolling 30-day. Valid values: rolling_30d, month_to_date, daily_incremental
   */
  aggregationType?: string | undefined;
  /**
   * Filters results to the specified context kinds. Can be specified multiple times, one query parameter per context kind. If not set, queries for the user context kind.
   */
  contextKind?: string | undefined;
};

/** @internal */
export const GetMauUsageRequest$inboundSchema: z.ZodType<
  GetMauUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string().optional(),
  to: z.string().optional(),
  project: z.string().optional(),
  environment: z.string().optional(),
  sdktype: z.string().optional(),
  sdk: z.string().optional(),
  anonymous: z.string().optional(),
  groupby: z.string().optional(),
  aggregationType: z.string().optional(),
  contextKind: z.string().optional(),
});

/** @internal */
export type GetMauUsageRequest$Outbound = {
  from?: string | undefined;
  to?: string | undefined;
  project?: string | undefined;
  environment?: string | undefined;
  sdktype?: string | undefined;
  sdk?: string | undefined;
  anonymous?: string | undefined;
  groupby?: string | undefined;
  aggregationType?: string | undefined;
  contextKind?: string | undefined;
};

/** @internal */
export const GetMauUsageRequest$outboundSchema: z.ZodType<
  GetMauUsageRequest$Outbound,
  z.ZodTypeDef,
  GetMauUsageRequest
> = z.object({
  from: z.string().optional(),
  to: z.string().optional(),
  project: z.string().optional(),
  environment: z.string().optional(),
  sdktype: z.string().optional(),
  sdk: z.string().optional(),
  anonymous: z.string().optional(),
  groupby: z.string().optional(),
  aggregationType: z.string().optional(),
  contextKind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMauUsageRequest$ {
  /** @deprecated use `GetMauUsageRequest$inboundSchema` instead. */
  export const inboundSchema = GetMauUsageRequest$inboundSchema;
  /** @deprecated use `GetMauUsageRequest$outboundSchema` instead. */
  export const outboundSchema = GetMauUsageRequest$outboundSchema;
  /** @deprecated use `GetMauUsageRequest$Outbound` instead. */
  export type Outbound = GetMauUsageRequest$Outbound;
}

export function getMauUsageRequestToJSON(
  getMauUsageRequest: GetMauUsageRequest,
): string {
  return JSON.stringify(
    GetMauUsageRequest$outboundSchema.parse(getMauUsageRequest),
  );
}

export function getMauUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMauUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMauUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMauUsageRequest' from JSON`,
  );
}
