/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteWorkflowRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The workflow id
   */
  workflowId: string;
};

/** @internal */
export const DeleteWorkflowRequest$inboundSchema: z.ZodType<
  DeleteWorkflowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  workflowId: z.string(),
});

/** @internal */
export type DeleteWorkflowRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  environmentKey: string;
  workflowId: string;
};

/** @internal */
export const DeleteWorkflowRequest$outboundSchema: z.ZodType<
  DeleteWorkflowRequest$Outbound,
  z.ZodTypeDef,
  DeleteWorkflowRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  workflowId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWorkflowRequest$ {
  /** @deprecated use `DeleteWorkflowRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteWorkflowRequest$inboundSchema;
  /** @deprecated use `DeleteWorkflowRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteWorkflowRequest$outboundSchema;
  /** @deprecated use `DeleteWorkflowRequest$Outbound` instead. */
  export type Outbound = DeleteWorkflowRequest$Outbound;
}

export function deleteWorkflowRequestToJSON(
  deleteWorkflowRequest: DeleteWorkflowRequest,
): string {
  return JSON.stringify(
    DeleteWorkflowRequest$outboundSchema.parse(deleteWorkflowRequest),
  );
}

export function deleteWorkflowRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWorkflowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWorkflowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWorkflowRequest' from JSON`,
  );
}
