/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSubscriptionsRequest = {
  /**
   * The integration key
   */
  integrationKey: string;
};

/** @internal */
export const GetSubscriptionsRequest$inboundSchema: z.ZodType<
  GetSubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationKey: z.string(),
});

/** @internal */
export type GetSubscriptionsRequest$Outbound = {
  integrationKey: string;
};

/** @internal */
export const GetSubscriptionsRequest$outboundSchema: z.ZodType<
  GetSubscriptionsRequest$Outbound,
  z.ZodTypeDef,
  GetSubscriptionsRequest
> = z.object({
  integrationKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriptionsRequest$ {
  /** @deprecated use `GetSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSubscriptionsRequest$inboundSchema;
  /** @deprecated use `GetSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSubscriptionsRequest$outboundSchema;
  /** @deprecated use `GetSubscriptionsRequest$Outbound` instead. */
  export type Outbound = GetSubscriptionsRequest$Outbound;
}

export function getSubscriptionsRequestToJSON(
  getSubscriptionsRequest: GetSubscriptionsRequest,
): string {
  return JSON.stringify(
    GetSubscriptionsRequest$outboundSchema.parse(getSubscriptionsRequest),
  );
}

export function getSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriptionsRequest' from JSON`,
  );
}
