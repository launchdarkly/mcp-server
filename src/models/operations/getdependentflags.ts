/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDependentFlagsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
};

/** @internal */
export const GetDependentFlagsRequest$inboundSchema: z.ZodType<
  GetDependentFlagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
});

/** @internal */
export type GetDependentFlagsRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
};

/** @internal */
export const GetDependentFlagsRequest$outboundSchema: z.ZodType<
  GetDependentFlagsRequest$Outbound,
  z.ZodTypeDef,
  GetDependentFlagsRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDependentFlagsRequest$ {
  /** @deprecated use `GetDependentFlagsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDependentFlagsRequest$inboundSchema;
  /** @deprecated use `GetDependentFlagsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDependentFlagsRequest$outboundSchema;
  /** @deprecated use `GetDependentFlagsRequest$Outbound` instead. */
  export type Outbound = GetDependentFlagsRequest$Outbound;
}

export function getDependentFlagsRequestToJSON(
  getDependentFlagsRequest: GetDependentFlagsRequest,
): string {
  return JSON.stringify(
    GetDependentFlagsRequest$outboundSchema.parse(getDependentFlagsRequest),
  );
}

export function getDependentFlagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDependentFlagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDependentFlagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDependentFlagsRequest' from JSON`,
  );
}
