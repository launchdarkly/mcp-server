/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFlagEventsRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Comma separated list of application keys
   */
  applicationKey?: string | undefined;
  /**
   * Filter events by flag key
   */
  query?: string | undefined;
  /**
   * Filter events by impact size. A small impact created a less than 20% change in the proportion of end users receiving one or more flag variations. A medium impact created between a 20%-80% change. A large impact created a more than 80% change. Options: `none`, `small`, `medium`, `large`
   */
  impactSize?: string | undefined;
  /**
   * Filter events to those associated with an experiment (`true`) or without an experiment (`false`)
   */
  hasExperiments?: boolean | undefined;
  /**
   * Filter to include or exclude global events. Default value is `include`. Options: `include`, `exclude`
   */
  global?: string | undefined;
  /**
   * Expand properties in response. Options: `experiments`
   */
  expand?: string | undefined;
  /**
   * The number of deployments to return. Default is 20. Maximum allowed is 100.
   */
  limit?: number | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is 7 days ago.
   */
  from?: number | undefined;
  /**
   * Unix timestamp in milliseconds. Default value is now.
   */
  to?: number | undefined;
  /**
   * Identifier used for pagination
   */
  after?: string | undefined;
  /**
   * Identifier used for pagination
   */
  before?: string | undefined;
};

/** @internal */
export const GetFlagEventsRequest$inboundSchema: z.ZodType<
  GetFlagEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string().optional(),
  query: z.string().optional(),
  impactSize: z.string().optional(),
  hasExperiments: z.boolean().optional(),
  global: z.string().optional(),
  expand: z.string().optional(),
  limit: z.number().int().optional(),
  from: z.number().int().optional(),
  to: z.number().int().optional(),
  after: z.string().optional(),
  before: z.string().optional(),
});

/** @internal */
export type GetFlagEventsRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  applicationKey?: string | undefined;
  query?: string | undefined;
  impactSize?: string | undefined;
  hasExperiments?: boolean | undefined;
  global?: string | undefined;
  expand?: string | undefined;
  limit?: number | undefined;
  from?: number | undefined;
  to?: number | undefined;
  after?: string | undefined;
  before?: string | undefined;
};

/** @internal */
export const GetFlagEventsRequest$outboundSchema: z.ZodType<
  GetFlagEventsRequest$Outbound,
  z.ZodTypeDef,
  GetFlagEventsRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKey: z.string().optional(),
  query: z.string().optional(),
  impactSize: z.string().optional(),
  hasExperiments: z.boolean().optional(),
  global: z.string().optional(),
  expand: z.string().optional(),
  limit: z.number().int().optional(),
  from: z.number().int().optional(),
  to: z.number().int().optional(),
  after: z.string().optional(),
  before: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlagEventsRequest$ {
  /** @deprecated use `GetFlagEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetFlagEventsRequest$inboundSchema;
  /** @deprecated use `GetFlagEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetFlagEventsRequest$outboundSchema;
  /** @deprecated use `GetFlagEventsRequest$Outbound` instead. */
  export type Outbound = GetFlagEventsRequest$Outbound;
}

export function getFlagEventsRequestToJSON(
  getFlagEventsRequest: GetFlagEventsRequest,
): string {
  return JSON.stringify(
    GetFlagEventsRequest$outboundSchema.parse(getFlagEventsRequest),
  );
}

export function getFlagEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFlagEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFlagEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFlagEventsRequest' from JSON`,
  );
}
