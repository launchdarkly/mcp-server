/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchRelayAutoConfigRequest = {
  /**
   * The relay auto config id
   */
  id: string;
  patchWithComment: components.PatchWithComment;
};

/** @internal */
export const PatchRelayAutoConfigRequest$inboundSchema: z.ZodType<
  PatchRelayAutoConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  PatchWithComment: components.PatchWithComment$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PatchWithComment": "patchWithComment",
  });
});

/** @internal */
export type PatchRelayAutoConfigRequest$Outbound = {
  id: string;
  PatchWithComment: components.PatchWithComment$Outbound;
};

/** @internal */
export const PatchRelayAutoConfigRequest$outboundSchema: z.ZodType<
  PatchRelayAutoConfigRequest$Outbound,
  z.ZodTypeDef,
  PatchRelayAutoConfigRequest
> = z.object({
  id: z.string(),
  patchWithComment: components.PatchWithComment$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    patchWithComment: "PatchWithComment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchRelayAutoConfigRequest$ {
  /** @deprecated use `PatchRelayAutoConfigRequest$inboundSchema` instead. */
  export const inboundSchema = PatchRelayAutoConfigRequest$inboundSchema;
  /** @deprecated use `PatchRelayAutoConfigRequest$outboundSchema` instead. */
  export const outboundSchema = PatchRelayAutoConfigRequest$outboundSchema;
  /** @deprecated use `PatchRelayAutoConfigRequest$Outbound` instead. */
  export type Outbound = PatchRelayAutoConfigRequest$Outbound;
}

export function patchRelayAutoConfigRequestToJSON(
  patchRelayAutoConfigRequest: PatchRelayAutoConfigRequest,
): string {
  return JSON.stringify(
    PatchRelayAutoConfigRequest$outboundSchema.parse(
      patchRelayAutoConfigRequest,
    ),
  );
}

export function patchRelayAutoConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchRelayAutoConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchRelayAutoConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchRelayAutoConfigRequest' from JSON`,
  );
}
