/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Version of the endpoint.
 */
export const GetAIConfigsLDAPIVersion = {
  Beta: "beta",
} as const;
/**
 * Version of the endpoint.
 */
export type GetAIConfigsLDAPIVersion = ClosedEnum<
  typeof GetAIConfigsLDAPIVersion
>;

export type GetAIConfigsRequest = {
  /**
   * Version of the endpoint.
   */
  ldAPIVersion: GetAIConfigsLDAPIVersion;
  projectKey: string;
  /**
   * A sort to apply to the list of AI Configs.
   */
  sort?: string | undefined;
  /**
   * The number of AI Configs to return.
   */
  limit?: number | undefined;
  /**
   * Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query `limit`.
   */
  offset?: number | undefined;
  /**
   * A filter to apply to the list of AI Configs.
   */
  filter?: string | undefined;
};

/** @internal */
export const GetAIConfigsLDAPIVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetAIConfigsLDAPIVersion
> = z.nativeEnum(GetAIConfigsLDAPIVersion);

/** @internal */
export const GetAIConfigsLDAPIVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetAIConfigsLDAPIVersion
> = GetAIConfigsLDAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAIConfigsLDAPIVersion$ {
  /** @deprecated use `GetAIConfigsLDAPIVersion$inboundSchema` instead. */
  export const inboundSchema = GetAIConfigsLDAPIVersion$inboundSchema;
  /** @deprecated use `GetAIConfigsLDAPIVersion$outboundSchema` instead. */
  export const outboundSchema = GetAIConfigsLDAPIVersion$outboundSchema;
}

/** @internal */
export const GetAIConfigsRequest$inboundSchema: z.ZodType<
  GetAIConfigsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "LD-API-Version": GetAIConfigsLDAPIVersion$inboundSchema,
  projectKey: z.string(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "LD-API-Version": "ldAPIVersion",
  });
});

/** @internal */
export type GetAIConfigsRequest$Outbound = {
  "LD-API-Version": string;
  projectKey: string;
  sort?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
};

/** @internal */
export const GetAIConfigsRequest$outboundSchema: z.ZodType<
  GetAIConfigsRequest$Outbound,
  z.ZodTypeDef,
  GetAIConfigsRequest
> = z.object({
  ldAPIVersion: GetAIConfigsLDAPIVersion$outboundSchema,
  projectKey: z.string(),
  sort: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    ldAPIVersion: "LD-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAIConfigsRequest$ {
  /** @deprecated use `GetAIConfigsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAIConfigsRequest$inboundSchema;
  /** @deprecated use `GetAIConfigsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAIConfigsRequest$outboundSchema;
  /** @deprecated use `GetAIConfigsRequest$Outbound` instead. */
  export type Outbound = GetAIConfigsRequest$Outbound;
}

export function getAIConfigsRequestToJSON(
  getAIConfigsRequest: GetAIConfigsRequest,
): string {
  return JSON.stringify(
    GetAIConfigsRequest$outboundSchema.parse(getAIConfigsRequest),
  );
}

export function getAIConfigsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAIConfigsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAIConfigsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAIConfigsRequest' from JSON`,
  );
}
