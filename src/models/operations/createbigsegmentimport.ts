/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBigSegmentImportFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type CreateBigSegmentImportRequestBody = {
  /**
   * CSV file containing keys
   */
  file?: CreateBigSegmentImportFile | Blob | undefined;
  /**
   * Import mode. Use either `merge` or `replace`
   */
  mode?: string | undefined;
  /**
   * Whether to wait for approvals before processing the import
   */
  waitOnApprovals?: boolean | undefined;
};

export type CreateBigSegmentImportRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The segment key
   */
  segmentKey: string;
  requestBody: CreateBigSegmentImportRequestBody;
};

/** @internal */
export const CreateBigSegmentImportFile$inboundSchema: z.ZodType<
  CreateBigSegmentImportFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type CreateBigSegmentImportFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CreateBigSegmentImportFile$outboundSchema: z.ZodType<
  CreateBigSegmentImportFile$Outbound,
  z.ZodTypeDef,
  CreateBigSegmentImportFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBigSegmentImportFile$ {
  /** @deprecated use `CreateBigSegmentImportFile$inboundSchema` instead. */
  export const inboundSchema = CreateBigSegmentImportFile$inboundSchema;
  /** @deprecated use `CreateBigSegmentImportFile$outboundSchema` instead. */
  export const outboundSchema = CreateBigSegmentImportFile$outboundSchema;
  /** @deprecated use `CreateBigSegmentImportFile$Outbound` instead. */
  export type Outbound = CreateBigSegmentImportFile$Outbound;
}

export function createBigSegmentImportFileToJSON(
  createBigSegmentImportFile: CreateBigSegmentImportFile,
): string {
  return JSON.stringify(
    CreateBigSegmentImportFile$outboundSchema.parse(createBigSegmentImportFile),
  );
}

export function createBigSegmentImportFileFromJSON(
  jsonString: string,
): SafeParseResult<CreateBigSegmentImportFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBigSegmentImportFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBigSegmentImportFile' from JSON`,
  );
}

/** @internal */
export const CreateBigSegmentImportRequestBody$inboundSchema: z.ZodType<
  CreateBigSegmentImportRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => CreateBigSegmentImportFile$inboundSchema).optional(),
  mode: z.string().optional(),
  waitOnApprovals: z.boolean().optional(),
});

/** @internal */
export type CreateBigSegmentImportRequestBody$Outbound = {
  file?: CreateBigSegmentImportFile$Outbound | Blob | undefined;
  mode?: string | undefined;
  waitOnApprovals?: boolean | undefined;
};

/** @internal */
export const CreateBigSegmentImportRequestBody$outboundSchema: z.ZodType<
  CreateBigSegmentImportRequestBody$Outbound,
  z.ZodTypeDef,
  CreateBigSegmentImportRequestBody
> = z.object({
  file: z.lazy(() => CreateBigSegmentImportFile$outboundSchema).or(
    blobLikeSchema,
  ).optional(),
  mode: z.string().optional(),
  waitOnApprovals: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBigSegmentImportRequestBody$ {
  /** @deprecated use `CreateBigSegmentImportRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateBigSegmentImportRequestBody$inboundSchema;
  /** @deprecated use `CreateBigSegmentImportRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBigSegmentImportRequestBody$outboundSchema;
  /** @deprecated use `CreateBigSegmentImportRequestBody$Outbound` instead. */
  export type Outbound = CreateBigSegmentImportRequestBody$Outbound;
}

export function createBigSegmentImportRequestBodyToJSON(
  createBigSegmentImportRequestBody: CreateBigSegmentImportRequestBody,
): string {
  return JSON.stringify(
    CreateBigSegmentImportRequestBody$outboundSchema.parse(
      createBigSegmentImportRequestBody,
    ),
  );
}

export function createBigSegmentImportRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBigSegmentImportRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBigSegmentImportRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBigSegmentImportRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateBigSegmentImportRequest$inboundSchema: z.ZodType<
  CreateBigSegmentImportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  RequestBody: z.lazy(() => CreateBigSegmentImportRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateBigSegmentImportRequest$Outbound = {
  projectKey: string;
  environmentKey: string;
  segmentKey: string;
  RequestBody: CreateBigSegmentImportRequestBody$Outbound;
};

/** @internal */
export const CreateBigSegmentImportRequest$outboundSchema: z.ZodType<
  CreateBigSegmentImportRequest$Outbound,
  z.ZodTypeDef,
  CreateBigSegmentImportRequest
> = z.object({
  projectKey: z.string(),
  environmentKey: z.string(),
  segmentKey: z.string(),
  requestBody: z.lazy(() => CreateBigSegmentImportRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBigSegmentImportRequest$ {
  /** @deprecated use `CreateBigSegmentImportRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBigSegmentImportRequest$inboundSchema;
  /** @deprecated use `CreateBigSegmentImportRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBigSegmentImportRequest$outboundSchema;
  /** @deprecated use `CreateBigSegmentImportRequest$Outbound` instead. */
  export type Outbound = CreateBigSegmentImportRequest$Outbound;
}

export function createBigSegmentImportRequestToJSON(
  createBigSegmentImportRequest: CreateBigSegmentImportRequest,
): string {
  return JSON.stringify(
    CreateBigSegmentImportRequest$outboundSchema.parse(
      createBigSegmentImportRequest,
    ),
  );
}

export function createBigSegmentImportRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBigSegmentImportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBigSegmentImportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBigSegmentImportRequest' from JSON`,
  );
}
