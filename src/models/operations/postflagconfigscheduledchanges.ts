/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostFlagConfigScheduledChangesRequest = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The feature flag key
   */
  featureFlagKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * Whether to succeed (`true`) or fail (`false`) when these instructions conflict with existing scheduled changes
   */
  ignoreConflicts?: boolean | undefined;
  postFlagScheduledChangesInput: models.PostFlagScheduledChangesInput;
};

/** @internal */
export const PostFlagConfigScheduledChangesRequest$inboundSchema: z.ZodType<
  PostFlagConfigScheduledChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  ignoreConflicts: z.boolean().optional(),
  PostFlagScheduledChangesInput:
    models.PostFlagScheduledChangesInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PostFlagScheduledChangesInput": "postFlagScheduledChangesInput",
  });
});

/** @internal */
export type PostFlagConfigScheduledChangesRequest$Outbound = {
  projectKey: string;
  featureFlagKey: string;
  environmentKey: string;
  ignoreConflicts?: boolean | undefined;
  PostFlagScheduledChangesInput: models.PostFlagScheduledChangesInput$Outbound;
};

/** @internal */
export const PostFlagConfigScheduledChangesRequest$outboundSchema: z.ZodType<
  PostFlagConfigScheduledChangesRequest$Outbound,
  z.ZodTypeDef,
  PostFlagConfigScheduledChangesRequest
> = z.object({
  projectKey: z.string(),
  featureFlagKey: z.string(),
  environmentKey: z.string(),
  ignoreConflicts: z.boolean().optional(),
  postFlagScheduledChangesInput:
    models.PostFlagScheduledChangesInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    postFlagScheduledChangesInput: "PostFlagScheduledChangesInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostFlagConfigScheduledChangesRequest$ {
  /** @deprecated use `PostFlagConfigScheduledChangesRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostFlagConfigScheduledChangesRequest$inboundSchema;
  /** @deprecated use `PostFlagConfigScheduledChangesRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostFlagConfigScheduledChangesRequest$outboundSchema;
  /** @deprecated use `PostFlagConfigScheduledChangesRequest$Outbound` instead. */
  export type Outbound = PostFlagConfigScheduledChangesRequest$Outbound;
}

export function postFlagConfigScheduledChangesRequestToJSON(
  postFlagConfigScheduledChangesRequest: PostFlagConfigScheduledChangesRequest,
): string {
  return JSON.stringify(
    PostFlagConfigScheduledChangesRequest$outboundSchema.parse(
      postFlagConfigScheduledChangesRequest,
    ),
  );
}

export function postFlagConfigScheduledChangesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostFlagConfigScheduledChangesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostFlagConfigScheduledChangesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostFlagConfigScheduledChangesRequest' from JSON`,
  );
}
