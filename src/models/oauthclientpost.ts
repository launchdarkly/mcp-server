/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OauthClientPost = {
  /**
   * The name of your new LaunchDarkly OAuth 2.0 client.
   */
  name?: string | undefined;
  /**
   * The redirect URI for your new OAuth 2.0 application. This should be an absolute URL conforming with the standard HTTPS protocol.
   */
  redirectUri?: string | undefined;
  /**
   * Description of your OAuth 2.0 client.
   */
  description?: string | undefined;
};

/** @internal */
export const OauthClientPost$inboundSchema: z.ZodType<
  OauthClientPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  redirectUri: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type OauthClientPost$Outbound = {
  name?: string | undefined;
  redirectUri?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const OauthClientPost$outboundSchema: z.ZodType<
  OauthClientPost$Outbound,
  z.ZodTypeDef,
  OauthClientPost
> = z.object({
  name: z.string().optional(),
  redirectUri: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OauthClientPost$ {
  /** @deprecated use `OauthClientPost$inboundSchema` instead. */
  export const inboundSchema = OauthClientPost$inboundSchema;
  /** @deprecated use `OauthClientPost$outboundSchema` instead. */
  export const outboundSchema = OauthClientPost$outboundSchema;
  /** @deprecated use `OauthClientPost$Outbound` instead. */
  export type Outbound = OauthClientPost$Outbound;
}

export function oauthClientPostToJSON(
  oauthClientPost: OauthClientPost,
): string {
  return JSON.stringify(OauthClientPost$outboundSchema.parse(oauthClientPost));
}

export function oauthClientPostFromJSON(
  jsonString: string,
): SafeParseResult<OauthClientPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OauthClientPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OauthClientPost' from JSON`,
  );
}
