/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MetricInMetricGroupInput = {
  /**
   * The metric key
   */
  key: string;
  /**
   * Name of the metric when used within the associated metric group. Can be different from the original name of the metric
   */
  nameInGroup: string;
};

/** @internal */
export const MetricInMetricGroupInput$inboundSchema: z.ZodType<
  MetricInMetricGroupInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  nameInGroup: z.string(),
});

/** @internal */
export type MetricInMetricGroupInput$Outbound = {
  key: string;
  nameInGroup: string;
};

/** @internal */
export const MetricInMetricGroupInput$outboundSchema: z.ZodType<
  MetricInMetricGroupInput$Outbound,
  z.ZodTypeDef,
  MetricInMetricGroupInput
> = z.object({
  key: z.string(),
  nameInGroup: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInMetricGroupInput$ {
  /** @deprecated use `MetricInMetricGroupInput$inboundSchema` instead. */
  export const inboundSchema = MetricInMetricGroupInput$inboundSchema;
  /** @deprecated use `MetricInMetricGroupInput$outboundSchema` instead. */
  export const outboundSchema = MetricInMetricGroupInput$outboundSchema;
  /** @deprecated use `MetricInMetricGroupInput$Outbound` instead. */
  export type Outbound = MetricInMetricGroupInput$Outbound;
}

export function metricInMetricGroupInputToJSON(
  metricInMetricGroupInput: MetricInMetricGroupInput,
): string {
  return JSON.stringify(
    MetricInMetricGroupInput$outboundSchema.parse(metricInMetricGroupInput),
  );
}

export function metricInMetricGroupInputFromJSON(
  jsonString: string,
): SafeParseResult<MetricInMetricGroupInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricInMetricGroupInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricInMetricGroupInput' from JSON`,
  );
}
