/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ContextAttributeName = {
  /**
   * A context attribute's name.
   */
  name: string;
  /**
   * A relative estimate of the number of contexts seen recently that have an attribute with the associated name.
   */
  weight: number;
  /**
   * Whether or not the attribute has one or more redacted values.
   */
  redacted?: boolean | undefined;
};

/** @internal */
export const ContextAttributeName$inboundSchema: z.ZodType<
  ContextAttributeName,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  weight: z.number().int(),
  redacted: z.boolean().optional(),
});

/** @internal */
export type ContextAttributeName$Outbound = {
  name: string;
  weight: number;
  redacted?: boolean | undefined;
};

/** @internal */
export const ContextAttributeName$outboundSchema: z.ZodType<
  ContextAttributeName$Outbound,
  z.ZodTypeDef,
  ContextAttributeName
> = z.object({
  name: z.string(),
  weight: z.number().int(),
  redacted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextAttributeName$ {
  /** @deprecated use `ContextAttributeName$inboundSchema` instead. */
  export const inboundSchema = ContextAttributeName$inboundSchema;
  /** @deprecated use `ContextAttributeName$outboundSchema` instead. */
  export const outboundSchema = ContextAttributeName$outboundSchema;
  /** @deprecated use `ContextAttributeName$Outbound` instead. */
  export type Outbound = ContextAttributeName$Outbound;
}

export function contextAttributeNameToJSON(
  contextAttributeName: ContextAttributeName,
): string {
  return JSON.stringify(
    ContextAttributeName$outboundSchema.parse(contextAttributeName),
  );
}

export function contextAttributeNameFromJSON(
  jsonString: string,
): SafeParseResult<ContextAttributeName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextAttributeName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextAttributeName' from JSON`,
  );
}
