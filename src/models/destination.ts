/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The type of Data Export destination
 */
export const DestinationKind = {
  GooglePubsub: "google-pubsub",
  Kinesis: "kinesis",
  Mparticle: "mparticle",
  Segment: "segment",
  AzureEventHubs: "azure-event-hubs",
  SnowflakeV2: "snowflake-v2",
} as const;
/**
 * The type of Data Export destination
 */
export type DestinationKind = ClosedEnum<typeof DestinationKind>;

export type Destination = {
  /**
   * The ID of this Data Export destination
   */
  id?: string | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * A human-readable name for your Data Export destination
   */
  name?: string | undefined;
  /**
   * The type of Data Export destination
   */
  kind?: DestinationKind | undefined;
  version?: number | undefined;
  /**
   * An object with the configuration parameters required for the destination type
   */
  config?: any | undefined;
  /**
   * Whether the export is on, that is, the status of the integration
   */
  on?: boolean | undefined;
  access?: Access | undefined;
};

/** @internal */
export const DestinationKind$inboundSchema: z.ZodNativeEnum<
  typeof DestinationKind
> = z.nativeEnum(DestinationKind);

/** @internal */
export const DestinationKind$outboundSchema: z.ZodNativeEnum<
  typeof DestinationKind
> = DestinationKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationKind$ {
  /** @deprecated use `DestinationKind$inboundSchema` instead. */
  export const inboundSchema = DestinationKind$inboundSchema;
  /** @deprecated use `DestinationKind$outboundSchema` instead. */
  export const outboundSchema = DestinationKind$outboundSchema;
}

/** @internal */
export const Destination$inboundSchema: z.ZodType<
  Destination,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _links: z.record(Link$inboundSchema).optional(),
  name: z.string().optional(),
  kind: DestinationKind$inboundSchema.optional(),
  version: z.number().optional(),
  config: z.any().optional(),
  on: z.boolean().optional(),
  _access: Access$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_links": "links",
    "_access": "access",
  });
});

/** @internal */
export type Destination$Outbound = {
  _id?: string | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  name?: string | undefined;
  kind?: string | undefined;
  version?: number | undefined;
  config?: any | undefined;
  on?: boolean | undefined;
  _access?: Access$Outbound | undefined;
};

/** @internal */
export const Destination$outboundSchema: z.ZodType<
  Destination$Outbound,
  z.ZodTypeDef,
  Destination
> = z.object({
  id: z.string().optional(),
  links: z.record(Link$outboundSchema).optional(),
  name: z.string().optional(),
  kind: DestinationKind$outboundSchema.optional(),
  version: z.number().optional(),
  config: z.any().optional(),
  on: z.boolean().optional(),
  access: Access$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    links: "_links",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Destination$ {
  /** @deprecated use `Destination$inboundSchema` instead. */
  export const inboundSchema = Destination$inboundSchema;
  /** @deprecated use `Destination$outboundSchema` instead. */
  export const outboundSchema = Destination$outboundSchema;
  /** @deprecated use `Destination$Outbound` instead. */
  export type Outbound = Destination$Outbound;
}

export function destinationToJSON(destination: Destination): string {
  return JSON.stringify(Destination$outboundSchema.parse(destination));
}

export function destinationFromJSON(
  jsonString: string,
): SafeParseResult<Destination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Destination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Destination' from JSON`,
  );
}
