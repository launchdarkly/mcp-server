/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FormVariable,
  FormVariable$inboundSchema,
  FormVariable$Outbound,
  FormVariable$outboundSchema,
} from "./formvariable.js";

export type ApprovalsCapabilityConfig = {
  /**
   * The additional form variables for the approvals capability
   */
  additionalFormVariables?: Array<FormVariable> | undefined;
};

/** @internal */
export const ApprovalsCapabilityConfig$inboundSchema: z.ZodType<
  ApprovalsCapabilityConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalFormVariables: z.array(FormVariable$inboundSchema).optional(),
});

/** @internal */
export type ApprovalsCapabilityConfig$Outbound = {
  additionalFormVariables?: Array<FormVariable$Outbound> | undefined;
};

/** @internal */
export const ApprovalsCapabilityConfig$outboundSchema: z.ZodType<
  ApprovalsCapabilityConfig$Outbound,
  z.ZodTypeDef,
  ApprovalsCapabilityConfig
> = z.object({
  additionalFormVariables: z.array(FormVariable$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApprovalsCapabilityConfig$ {
  /** @deprecated use `ApprovalsCapabilityConfig$inboundSchema` instead. */
  export const inboundSchema = ApprovalsCapabilityConfig$inboundSchema;
  /** @deprecated use `ApprovalsCapabilityConfig$outboundSchema` instead. */
  export const outboundSchema = ApprovalsCapabilityConfig$outboundSchema;
  /** @deprecated use `ApprovalsCapabilityConfig$Outbound` instead. */
  export type Outbound = ApprovalsCapabilityConfig$Outbound;
}

export function approvalsCapabilityConfigToJSON(
  approvalsCapabilityConfig: ApprovalsCapabilityConfig,
): string {
  return JSON.stringify(
    ApprovalsCapabilityConfig$outboundSchema.parse(approvalsCapabilityConfig),
  );
}

export function approvalsCapabilityConfigFromJSON(
  jsonString: string,
): SafeParseResult<ApprovalsCapabilityConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApprovalsCapabilityConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApprovalsCapabilityConfig' from JSON`,
  );
}
