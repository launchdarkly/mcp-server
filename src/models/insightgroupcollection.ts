/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InsightGroup,
  InsightGroup$inboundSchema,
  InsightGroup$Outbound,
  InsightGroup$outboundSchema,
} from "./insightgroup.js";
import {
  InsightGroupCollectionMetadata,
  InsightGroupCollectionMetadata$inboundSchema,
  InsightGroupCollectionMetadata$Outbound,
  InsightGroupCollectionMetadata$outboundSchema,
} from "./insightgroupcollectionmetadata.js";
import {
  InsightGroupCollectionScoreMetadata,
  InsightGroupCollectionScoreMetadata$inboundSchema,
  InsightGroupCollectionScoreMetadata$Outbound,
  InsightGroupCollectionScoreMetadata$outboundSchema,
} from "./insightgroupcollectionscoremetadata.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type InsightGroupCollection = {
  /**
   * The total number of insight groups
   */
  totalCount: number;
  /**
   * A list of insight groups
   */
  items: Array<InsightGroup>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  metadata?: InsightGroupCollectionMetadata | undefined;
  scoreMetadata?: InsightGroupCollectionScoreMetadata | undefined;
};

/** @internal */
export const InsightGroupCollection$inboundSchema: z.ZodType<
  InsightGroupCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightGroup$inboundSchema),
  _links: z.record(Link$inboundSchema).optional(),
  metadata: InsightGroupCollectionMetadata$inboundSchema.optional(),
  scoreMetadata: InsightGroupCollectionScoreMetadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InsightGroupCollection$Outbound = {
  totalCount: number;
  items: Array<InsightGroup$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
  metadata?: InsightGroupCollectionMetadata$Outbound | undefined;
  scoreMetadata?: InsightGroupCollectionScoreMetadata$Outbound | undefined;
};

/** @internal */
export const InsightGroupCollection$outboundSchema: z.ZodType<
  InsightGroupCollection$Outbound,
  z.ZodTypeDef,
  InsightGroupCollection
> = z.object({
  totalCount: z.number().int(),
  items: z.array(InsightGroup$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
  metadata: InsightGroupCollectionMetadata$outboundSchema.optional(),
  scoreMetadata: InsightGroupCollectionScoreMetadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightGroupCollection$ {
  /** @deprecated use `InsightGroupCollection$inboundSchema` instead. */
  export const inboundSchema = InsightGroupCollection$inboundSchema;
  /** @deprecated use `InsightGroupCollection$outboundSchema` instead. */
  export const outboundSchema = InsightGroupCollection$outboundSchema;
  /** @deprecated use `InsightGroupCollection$Outbound` instead. */
  export type Outbound = InsightGroupCollection$Outbound;
}

export function insightGroupCollectionToJSON(
  insightGroupCollection: InsightGroupCollection,
): string {
  return JSON.stringify(
    InsightGroupCollection$outboundSchema.parse(insightGroupCollection),
  );
}

export function insightGroupCollectionFromJSON(
  jsonString: string,
): SafeParseResult<InsightGroupCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightGroupCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightGroupCollection' from JSON`,
  );
}
