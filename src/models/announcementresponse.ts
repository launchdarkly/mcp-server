/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AnnouncementAccessRep,
  AnnouncementAccessRep$inboundSchema,
  AnnouncementAccessRep$Outbound,
  AnnouncementAccessRep$outboundSchema,
} from "./announcementaccessrep.js";
import {
  AnnouncementResponseLinks,
  AnnouncementResponseLinks$inboundSchema,
  AnnouncementResponseLinks$Outbound,
  AnnouncementResponseLinks$outboundSchema,
} from "./announcementresponselinks.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The severity of the announcement
 */
export const AnnouncementResponseSeverity = {
  Info: "info",
  Warning: "warning",
  Critical: "critical",
} as const;
/**
 * The severity of the announcement
 */
export type AnnouncementResponseSeverity = ClosedEnum<
  typeof AnnouncementResponseSeverity
>;

/**
 * The status of the announcement
 */
export const AnnouncementResponseStatus = {
  Active: "active",
  Inactive: "inactive",
  Scheduled: "scheduled",
} as const;
/**
 * The status of the announcement
 */
export type AnnouncementResponseStatus = ClosedEnum<
  typeof AnnouncementResponseStatus
>;

/**
 * Announcement response
 */
export type AnnouncementResponse = {
  /**
   * The ID of the announcement
   */
  id: string;
  /**
   * true if the announcement is dismissible
   */
  isDismissible: boolean;
  /**
   * The title of the announcement
   */
  title: string;
  /**
   * The message of the announcement
   */
  message: string;
  /**
   * The start time of the announcement. This is a Unix timestamp in milliseconds.
   */
  startTime: number;
  /**
   * The end time of the announcement. This is a Unix timestamp in milliseconds.
   */
  endTime?: number | undefined;
  /**
   * The severity of the announcement
   */
  severity: AnnouncementResponseSeverity;
  /**
   * The status of the announcement
   */
  status: AnnouncementResponseStatus;
  access?: AnnouncementAccessRep | undefined;
  links: AnnouncementResponseLinks;
};

/** @internal */
export const AnnouncementResponseSeverity$inboundSchema: z.ZodNativeEnum<
  typeof AnnouncementResponseSeverity
> = z.nativeEnum(AnnouncementResponseSeverity);

/** @internal */
export const AnnouncementResponseSeverity$outboundSchema: z.ZodNativeEnum<
  typeof AnnouncementResponseSeverity
> = AnnouncementResponseSeverity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementResponseSeverity$ {
  /** @deprecated use `AnnouncementResponseSeverity$inboundSchema` instead. */
  export const inboundSchema = AnnouncementResponseSeverity$inboundSchema;
  /** @deprecated use `AnnouncementResponseSeverity$outboundSchema` instead. */
  export const outboundSchema = AnnouncementResponseSeverity$outboundSchema;
}

/** @internal */
export const AnnouncementResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof AnnouncementResponseStatus
> = z.nativeEnum(AnnouncementResponseStatus);

/** @internal */
export const AnnouncementResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof AnnouncementResponseStatus
> = AnnouncementResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementResponseStatus$ {
  /** @deprecated use `AnnouncementResponseStatus$inboundSchema` instead. */
  export const inboundSchema = AnnouncementResponseStatus$inboundSchema;
  /** @deprecated use `AnnouncementResponseStatus$outboundSchema` instead. */
  export const outboundSchema = AnnouncementResponseStatus$outboundSchema;
}

/** @internal */
export const AnnouncementResponse$inboundSchema: z.ZodType<
  AnnouncementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  isDismissible: z.boolean(),
  title: z.string(),
  message: z.string(),
  startTime: z.number().int(),
  endTime: z.number().int().optional(),
  severity: AnnouncementResponseSeverity$inboundSchema,
  _status: AnnouncementResponseStatus$inboundSchema,
  _access: AnnouncementAccessRep$inboundSchema.optional(),
  _links: AnnouncementResponseLinks$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_status": "status",
    "_access": "access",
    "_links": "links",
  });
});

/** @internal */
export type AnnouncementResponse$Outbound = {
  _id: string;
  isDismissible: boolean;
  title: string;
  message: string;
  startTime: number;
  endTime?: number | undefined;
  severity: string;
  _status: string;
  _access?: AnnouncementAccessRep$Outbound | undefined;
  _links: AnnouncementResponseLinks$Outbound;
};

/** @internal */
export const AnnouncementResponse$outboundSchema: z.ZodType<
  AnnouncementResponse$Outbound,
  z.ZodTypeDef,
  AnnouncementResponse
> = z.object({
  id: z.string(),
  isDismissible: z.boolean(),
  title: z.string(),
  message: z.string(),
  startTime: z.number().int(),
  endTime: z.number().int().optional(),
  severity: AnnouncementResponseSeverity$outboundSchema,
  status: AnnouncementResponseStatus$outboundSchema,
  access: AnnouncementAccessRep$outboundSchema.optional(),
  links: AnnouncementResponseLinks$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    status: "_status",
    access: "_access",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementResponse$ {
  /** @deprecated use `AnnouncementResponse$inboundSchema` instead. */
  export const inboundSchema = AnnouncementResponse$inboundSchema;
  /** @deprecated use `AnnouncementResponse$outboundSchema` instead. */
  export const outboundSchema = AnnouncementResponse$outboundSchema;
  /** @deprecated use `AnnouncementResponse$Outbound` instead. */
  export type Outbound = AnnouncementResponse$Outbound;
}

export function announcementResponseToJSON(
  announcementResponse: AnnouncementResponse,
): string {
  return JSON.stringify(
    AnnouncementResponse$outboundSchema.parse(announcementResponse),
  );
}

export function announcementResponseFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementResponse' from JSON`,
  );
}
