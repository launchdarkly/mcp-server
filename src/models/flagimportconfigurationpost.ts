/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FlagImportConfigurationPost = {
  config: { [k: string]: any };
  /**
   * Tags to associate with the configuration
   */
  tags?: Array<string> | undefined;
  /**
   * Name to identify the configuration
   */
  name?: string | undefined;
};

/** @internal */
export const FlagImportConfigurationPost$inboundSchema: z.ZodType<
  FlagImportConfigurationPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.record(z.any()),
  tags: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/** @internal */
export type FlagImportConfigurationPost$Outbound = {
  config: { [k: string]: any };
  tags?: Array<string> | undefined;
  name?: string | undefined;
};

/** @internal */
export const FlagImportConfigurationPost$outboundSchema: z.ZodType<
  FlagImportConfigurationPost$Outbound,
  z.ZodTypeDef,
  FlagImportConfigurationPost
> = z.object({
  config: z.record(z.any()),
  tags: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportConfigurationPost$ {
  /** @deprecated use `FlagImportConfigurationPost$inboundSchema` instead. */
  export const inboundSchema = FlagImportConfigurationPost$inboundSchema;
  /** @deprecated use `FlagImportConfigurationPost$outboundSchema` instead. */
  export const outboundSchema = FlagImportConfigurationPost$outboundSchema;
  /** @deprecated use `FlagImportConfigurationPost$Outbound` instead. */
  export type Outbound = FlagImportConfigurationPost$Outbound;
}

export function flagImportConfigurationPostToJSON(
  flagImportConfigurationPost: FlagImportConfigurationPost,
): string {
  return JSON.stringify(
    FlagImportConfigurationPost$outboundSchema.parse(
      flagImportConfigurationPost,
    ),
  );
}

export function flagImportConfigurationPostFromJSON(
  jsonString: string,
): SafeParseResult<FlagImportConfigurationPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagImportConfigurationPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagImportConfigurationPost' from JSON`,
  );
}
