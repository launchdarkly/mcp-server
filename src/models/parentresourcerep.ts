/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ParentResourceRep = {
  links?: { [k: string]: Link } | undefined;
  /**
   * The name of the parent resource
   */
  name?: string | undefined;
  /**
   * The parent's resource specifier
   */
  resource?: string | undefined;
};

/** @internal */
export const ParentResourceRep$inboundSchema: z.ZodType<
  ParentResourceRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  name: z.string().optional(),
  resource: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ParentResourceRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  name?: string | undefined;
  resource?: string | undefined;
};

/** @internal */
export const ParentResourceRep$outboundSchema: z.ZodType<
  ParentResourceRep$Outbound,
  z.ZodTypeDef,
  ParentResourceRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  name: z.string().optional(),
  resource: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParentResourceRep$ {
  /** @deprecated use `ParentResourceRep$inboundSchema` instead. */
  export const inboundSchema = ParentResourceRep$inboundSchema;
  /** @deprecated use `ParentResourceRep$outboundSchema` instead. */
  export const outboundSchema = ParentResourceRep$outboundSchema;
  /** @deprecated use `ParentResourceRep$Outbound` instead. */
  export type Outbound = ParentResourceRep$Outbound;
}

export function parentResourceRepToJSON(
  parentResourceRep: ParentResourceRep,
): string {
  return JSON.stringify(
    ParentResourceRep$outboundSchema.parse(parentResourceRep),
  );
}

export function parentResourceRepFromJSON(
  jsonString: string,
): SafeParseResult<ParentResourceRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParentResourceRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParentResourceRep' from JSON`,
  );
}
