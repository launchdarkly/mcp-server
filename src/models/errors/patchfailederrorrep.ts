/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type PatchFailedErrorRepData = {
  /**
   * Specific error code encountered
   */
  code: string;
  /**
   * Description of the error
   */
  message: string;
};

export class PatchFailedErrorRep extends Error {
  /**
   * Specific error code encountered
   */
  code: string;

  /** The original data that was passed to this error instance. */
  data$: PatchFailedErrorRepData;

  constructor(err: PatchFailedErrorRepData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "PatchFailedErrorRep";
  }
}

/** @internal */
export const PatchFailedErrorRep$inboundSchema: z.ZodType<
  PatchFailedErrorRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
})
  .transform((v) => {
    return new PatchFailedErrorRep(v);
  });

/** @internal */
export type PatchFailedErrorRep$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const PatchFailedErrorRep$outboundSchema: z.ZodType<
  PatchFailedErrorRep$Outbound,
  z.ZodTypeDef,
  PatchFailedErrorRep
> = z.instanceof(PatchFailedErrorRep)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string(),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchFailedErrorRep$ {
  /** @deprecated use `PatchFailedErrorRep$inboundSchema` instead. */
  export const inboundSchema = PatchFailedErrorRep$inboundSchema;
  /** @deprecated use `PatchFailedErrorRep$outboundSchema` instead. */
  export const outboundSchema = PatchFailedErrorRep$outboundSchema;
  /** @deprecated use `PatchFailedErrorRep$Outbound` instead. */
  export type Outbound = PatchFailedErrorRep$Outbound;
}
