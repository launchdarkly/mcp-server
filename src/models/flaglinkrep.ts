/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagLinkMember,
  FlagLinkMember$inboundSchema,
  FlagLinkMember$Outbound,
  FlagLinkMember$outboundSchema,
} from "./flaglinkmember.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  TimestampRep,
  TimestampRep$inboundSchema,
  TimestampRep$Outbound,
  TimestampRep$outboundSchema,
} from "./timestamprep.js";

export type FlagLinkRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The flag link key
   */
  key?: string | undefined;
  /**
   * The integration key for an integration whose <code>manifest.json</code> includes the <code>flagLink</code> capability, if this is a flag link for an existing integration
   */
  integrationKey?: string | undefined;
  /**
   * The ID of this flag link
   */
  id: string;
  /**
   * The URL for the external resource the flag is linked to
   */
  deepLink: string;
  timestamp: TimestampRep;
  /**
   * The title of the flag link
   */
  title?: string | undefined;
  /**
   * The description of the flag link
   */
  description?: string | undefined;
  /**
   * The metadata required by this integration in order to create a flag link, if this is a flag link for an existing integration. Defined in the integration's <code>manifest.json</code> file under <code>flagLink</code>.
   */
  metadata?: { [k: string]: string } | undefined;
  createdAt: number;
  member?: FlagLinkMember | undefined;
};

/** @internal */
export const FlagLinkRep$inboundSchema: z.ZodType<
  FlagLinkRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  _key: z.string().optional(),
  _integrationKey: z.string().optional(),
  _id: z.string(),
  _deepLink: z.string(),
  _timestamp: TimestampRep$inboundSchema,
  title: z.string().optional(),
  description: z.string().optional(),
  _metadata: z.record(z.string()).optional(),
  _createdAt: z.number().int(),
  _member: FlagLinkMember$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_key": "key",
    "_integrationKey": "integrationKey",
    "_id": "id",
    "_deepLink": "deepLink",
    "_timestamp": "timestamp",
    "_metadata": "metadata",
    "_createdAt": "createdAt",
    "_member": "member",
  });
});

/** @internal */
export type FlagLinkRep$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _key?: string | undefined;
  _integrationKey?: string | undefined;
  _id: string;
  _deepLink: string;
  _timestamp: TimestampRep$Outbound;
  title?: string | undefined;
  description?: string | undefined;
  _metadata?: { [k: string]: string } | undefined;
  _createdAt: number;
  _member?: FlagLinkMember$Outbound | undefined;
};

/** @internal */
export const FlagLinkRep$outboundSchema: z.ZodType<
  FlagLinkRep$Outbound,
  z.ZodTypeDef,
  FlagLinkRep
> = z.object({
  links: z.record(Link$outboundSchema),
  key: z.string().optional(),
  integrationKey: z.string().optional(),
  id: z.string(),
  deepLink: z.string(),
  timestamp: TimestampRep$outboundSchema,
  title: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.number().int(),
  member: FlagLinkMember$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    key: "_key",
    integrationKey: "_integrationKey",
    id: "_id",
    deepLink: "_deepLink",
    timestamp: "_timestamp",
    metadata: "_metadata",
    createdAt: "_createdAt",
    member: "_member",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagLinkRep$ {
  /** @deprecated use `FlagLinkRep$inboundSchema` instead. */
  export const inboundSchema = FlagLinkRep$inboundSchema;
  /** @deprecated use `FlagLinkRep$outboundSchema` instead. */
  export const outboundSchema = FlagLinkRep$outboundSchema;
  /** @deprecated use `FlagLinkRep$Outbound` instead. */
  export type Outbound = FlagLinkRep$Outbound;
}

export function flagLinkRepToJSON(flagLinkRep: FlagLinkRep): string {
  return JSON.stringify(FlagLinkRep$outboundSchema.parse(flagLinkRep));
}

export function flagLinkRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagLinkRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagLinkRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagLinkRep' from JSON`,
  );
}
