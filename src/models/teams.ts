/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Team,
  Team$inboundSchema,
  Team$Outbound,
  Team$outboundSchema,
} from "./team.js";

export type Teams = {
  /**
   * An array of teams
   */
  items: Array<Team>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The number of teams
   */
  totalCount?: number | undefined;
};

/** @internal */
export const Teams$inboundSchema: z.ZodType<Teams, z.ZodTypeDef, unknown> = z
  .object({
    items: z.array(Team$inboundSchema),
    _links: z.record(Link$inboundSchema).optional(),
    totalCount: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Teams$Outbound = {
  items: Array<Team$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const Teams$outboundSchema: z.ZodType<
  Teams$Outbound,
  z.ZodTypeDef,
  Teams
> = z.object({
  items: z.array(Team$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Teams$ {
  /** @deprecated use `Teams$inboundSchema` instead. */
  export const inboundSchema = Teams$inboundSchema;
  /** @deprecated use `Teams$outboundSchema` instead. */
  export const outboundSchema = Teams$outboundSchema;
  /** @deprecated use `Teams$Outbound` instead. */
  export type Outbound = Teams$Outbound;
}

export function teamsToJSON(teams: Teams): string {
  return JSON.stringify(Teams$outboundSchema.parse(teams));
}

export function teamsFromJSON(
  jsonString: string,
): SafeParseResult<Teams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Teams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Teams' from JSON`,
  );
}
