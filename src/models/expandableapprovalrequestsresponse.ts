/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExpandableApprovalRequestResponse,
  ExpandableApprovalRequestResponse$inboundSchema,
  ExpandableApprovalRequestResponse$Outbound,
  ExpandableApprovalRequestResponse$outboundSchema,
} from "./expandableapprovalrequestresponse.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ExpandableApprovalRequestsResponse = {
  /**
   * An array of approval requests
   */
  items: Array<ExpandableApprovalRequestResponse>;
  /**
   * Total number of approval requests
   */
  totalCount: number;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ExpandableApprovalRequestsResponse$inboundSchema: z.ZodType<
  ExpandableApprovalRequestsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ExpandableApprovalRequestResponse$inboundSchema),
  totalCount: z.number().int(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ExpandableApprovalRequestsResponse$Outbound = {
  items: Array<ExpandableApprovalRequestResponse$Outbound>;
  totalCount: number;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const ExpandableApprovalRequestsResponse$outboundSchema: z.ZodType<
  ExpandableApprovalRequestsResponse$Outbound,
  z.ZodTypeDef,
  ExpandableApprovalRequestsResponse
> = z.object({
  items: z.array(ExpandableApprovalRequestResponse$outboundSchema),
  totalCount: z.number().int(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpandableApprovalRequestsResponse$ {
  /** @deprecated use `ExpandableApprovalRequestsResponse$inboundSchema` instead. */
  export const inboundSchema = ExpandableApprovalRequestsResponse$inboundSchema;
  /** @deprecated use `ExpandableApprovalRequestsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ExpandableApprovalRequestsResponse$outboundSchema;
  /** @deprecated use `ExpandableApprovalRequestsResponse$Outbound` instead. */
  export type Outbound = ExpandableApprovalRequestsResponse$Outbound;
}

export function expandableApprovalRequestsResponseToJSON(
  expandableApprovalRequestsResponse: ExpandableApprovalRequestsResponse,
): string {
  return JSON.stringify(
    ExpandableApprovalRequestsResponse$outboundSchema.parse(
      expandableApprovalRequestsResponse,
    ),
  );
}

export function expandableApprovalRequestsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExpandableApprovalRequestsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ExpandableApprovalRequestsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpandableApprovalRequestsResponse' from JSON`,
  );
}
