/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InsightGroupsCountByIndicator = {
  /**
   * The number of insight groups with an excellent indicator
   */
  excellent: number;
  /**
   * The number of insight groups with a good indicator
   */
  good: number;
  /**
   * The number of insight groups with a fair indicator
   */
  fair: number;
  /**
   * The number of insight groups with a needs attention indicator
   */
  needsAttention: number;
  /**
   * The number of insight groups with a not calculated indicator
   */
  notCalculated: number;
  /**
   * The number of insight groups with an unknown indicator
   */
  unknown: number;
  /**
   * The total number of insight groups
   */
  total: number;
};

/** @internal */
export const InsightGroupsCountByIndicator$inboundSchema: z.ZodType<
  InsightGroupsCountByIndicator,
  z.ZodTypeDef,
  unknown
> = z.object({
  excellent: z.number().int(),
  good: z.number().int(),
  fair: z.number().int(),
  needsAttention: z.number().int(),
  notCalculated: z.number().int(),
  unknown: z.number().int(),
  total: z.number().int(),
});

/** @internal */
export type InsightGroupsCountByIndicator$Outbound = {
  excellent: number;
  good: number;
  fair: number;
  needsAttention: number;
  notCalculated: number;
  unknown: number;
  total: number;
};

/** @internal */
export const InsightGroupsCountByIndicator$outboundSchema: z.ZodType<
  InsightGroupsCountByIndicator$Outbound,
  z.ZodTypeDef,
  InsightGroupsCountByIndicator
> = z.object({
  excellent: z.number().int(),
  good: z.number().int(),
  fair: z.number().int(),
  needsAttention: z.number().int(),
  notCalculated: z.number().int(),
  unknown: z.number().int(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightGroupsCountByIndicator$ {
  /** @deprecated use `InsightGroupsCountByIndicator$inboundSchema` instead. */
  export const inboundSchema = InsightGroupsCountByIndicator$inboundSchema;
  /** @deprecated use `InsightGroupsCountByIndicator$outboundSchema` instead. */
  export const outboundSchema = InsightGroupsCountByIndicator$outboundSchema;
  /** @deprecated use `InsightGroupsCountByIndicator$Outbound` instead. */
  export type Outbound = InsightGroupsCountByIndicator$Outbound;
}

export function insightGroupsCountByIndicatorToJSON(
  insightGroupsCountByIndicator: InsightGroupsCountByIndicator,
): string {
  return JSON.stringify(
    InsightGroupsCountByIndicator$outboundSchema.parse(
      insightGroupsCountByIndicator,
    ),
  );
}

export function insightGroupsCountByIndicatorFromJSON(
  jsonString: string,
): SafeParseResult<InsightGroupsCountByIndicator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightGroupsCountByIndicator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightGroupsCountByIndicator' from JSON`,
  );
}
