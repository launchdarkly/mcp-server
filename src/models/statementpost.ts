/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Whether this statement should allow or deny actions on the resources.
 */
export const StatementPostEffect = {
  Allow: "allow",
  Deny: "deny",
} as const;
/**
 * Whether this statement should allow or deny actions on the resources.
 */
export type StatementPostEffect = ClosedEnum<typeof StatementPostEffect>;

export type StatementPost = {
  /**
   * Resource specifier strings
   */
  resources?: Array<string> | undefined;
  /**
   * Targeted resources are the resources NOT in this list. The <code>resources</code> field must be empty to use this field.
   */
  notResources?: Array<string> | undefined;
  /**
   * Actions to perform on a resource
   */
  actions?: Array<string> | undefined;
  /**
   * Targeted actions are the actions NOT in this list. The <code>actions</code> field must be empty to use this field.
   */
  notActions?: Array<string> | undefined;
  /**
   * Whether this statement should allow or deny actions on the resources.
   */
  effect: StatementPostEffect;
};

/** @internal */
export const StatementPostEffect$inboundSchema: z.ZodNativeEnum<
  typeof StatementPostEffect
> = z.nativeEnum(StatementPostEffect);

/** @internal */
export const StatementPostEffect$outboundSchema: z.ZodNativeEnum<
  typeof StatementPostEffect
> = StatementPostEffect$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatementPostEffect$ {
  /** @deprecated use `StatementPostEffect$inboundSchema` instead. */
  export const inboundSchema = StatementPostEffect$inboundSchema;
  /** @deprecated use `StatementPostEffect$outboundSchema` instead. */
  export const outboundSchema = StatementPostEffect$outboundSchema;
}

/** @internal */
export const StatementPost$inboundSchema: z.ZodType<
  StatementPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: StatementPostEffect$inboundSchema,
});

/** @internal */
export type StatementPost$Outbound = {
  resources?: Array<string> | undefined;
  notResources?: Array<string> | undefined;
  actions?: Array<string> | undefined;
  notActions?: Array<string> | undefined;
  effect: string;
};

/** @internal */
export const StatementPost$outboundSchema: z.ZodType<
  StatementPost$Outbound,
  z.ZodTypeDef,
  StatementPost
> = z.object({
  resources: z.array(z.string()).optional(),
  notResources: z.array(z.string()).optional(),
  actions: z.array(z.string()).optional(),
  notActions: z.array(z.string()).optional(),
  effect: StatementPostEffect$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatementPost$ {
  /** @deprecated use `StatementPost$inboundSchema` instead. */
  export const inboundSchema = StatementPost$inboundSchema;
  /** @deprecated use `StatementPost$outboundSchema` instead. */
  export const outboundSchema = StatementPost$outboundSchema;
  /** @deprecated use `StatementPost$Outbound` instead. */
  export type Outbound = StatementPost$Outbound;
}

export function statementPostToJSON(statementPost: StatementPost): string {
  return JSON.stringify(StatementPost$outboundSchema.parse(statementPost));
}

export function statementPostFromJSON(
  jsonString: string,
): SafeParseResult<StatementPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatementPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatementPost' from JSON`,
  );
}
