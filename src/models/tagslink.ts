/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TagsLink = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const TagsLink$inboundSchema: z.ZodType<
  TagsLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type TagsLink$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const TagsLink$outboundSchema: z.ZodType<
  TagsLink$Outbound,
  z.ZodTypeDef,
  TagsLink
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagsLink$ {
  /** @deprecated use `TagsLink$inboundSchema` instead. */
  export const inboundSchema = TagsLink$inboundSchema;
  /** @deprecated use `TagsLink$outboundSchema` instead. */
  export const outboundSchema = TagsLink$outboundSchema;
  /** @deprecated use `TagsLink$Outbound` instead. */
  export type Outbound = TagsLink$Outbound;
}

export function tagsLinkToJSON(tagsLink: TagsLink): string {
  return JSON.stringify(TagsLink$outboundSchema.parse(tagsLink));
}

export function tagsLinkFromJSON(
  jsonString: string,
): SafeParseResult<TagsLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagsLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagsLink' from JSON`,
  );
}
