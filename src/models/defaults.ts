/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Defaults = {
  /**
   * The index, from the array of variations for this flag, of the variation to serve by default when targeting is on.
   */
  onVariation: number;
  /**
   * The index, from the array of variations for this flag, of the variation to serve by default when targeting is off.
   */
  offVariation: number;
};

/** @internal */
export const Defaults$inboundSchema: z.ZodType<
  Defaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  onVariation: z.number().int(),
  offVariation: z.number().int(),
});

/** @internal */
export type Defaults$Outbound = {
  onVariation: number;
  offVariation: number;
};

/** @internal */
export const Defaults$outboundSchema: z.ZodType<
  Defaults$Outbound,
  z.ZodTypeDef,
  Defaults
> = z.object({
  onVariation: z.number().int(),
  offVariation: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Defaults$ {
  /** @deprecated use `Defaults$inboundSchema` instead. */
  export const inboundSchema = Defaults$inboundSchema;
  /** @deprecated use `Defaults$outboundSchema` instead. */
  export const outboundSchema = Defaults$outboundSchema;
  /** @deprecated use `Defaults$Outbound` instead. */
  export type Outbound = Defaults$Outbound;
}

export function defaultsToJSON(defaults: Defaults): string {
  return JSON.stringify(Defaults$outboundSchema.parse(defaults));
}

export function defaultsFromJSON(
  jsonString: string,
): SafeParseResult<Defaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Defaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Defaults' from JSON`,
  );
}
