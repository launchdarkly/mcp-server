/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  UserSegment,
  UserSegment$inboundSchema,
  UserSegment$Outbound,
  UserSegment$outboundSchema,
} from "./usersegment.js";

export type UserSegments = {
  /**
   * An array of segments
   */
  items: Array<UserSegment>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The total number of segments
   */
  totalCount?: number | undefined;
};

/** @internal */
export const UserSegments$inboundSchema: z.ZodType<
  UserSegments,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(UserSegment$inboundSchema),
  _links: z.record(Link$inboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UserSegments$Outbound = {
  items: Array<UserSegment$Outbound>;
  _links: { [k: string]: Link$Outbound };
  totalCount?: number | undefined;
};

/** @internal */
export const UserSegments$outboundSchema: z.ZodType<
  UserSegments$Outbound,
  z.ZodTypeDef,
  UserSegments
> = z.object({
  items: z.array(UserSegment$outboundSchema),
  links: z.record(Link$outboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserSegments$ {
  /** @deprecated use `UserSegments$inboundSchema` instead. */
  export const inboundSchema = UserSegments$inboundSchema;
  /** @deprecated use `UserSegments$outboundSchema` instead. */
  export const outboundSchema = UserSegments$outboundSchema;
  /** @deprecated use `UserSegments$Outbound` instead. */
  export type Outbound = UserSegments$Outbound;
}

export function userSegmentsToJSON(userSegments: UserSegments): string {
  return JSON.stringify(UserSegments$outboundSchema.parse(userSegments));
}

export function userSegmentsFromJSON(
  jsonString: string,
): SafeParseResult<UserSegments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserSegments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserSegments' from JSON`,
  );
}
