/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SegmentUserList = {
  add?: Array<string> | undefined;
  remove?: Array<string> | undefined;
};

/** @internal */
export const SegmentUserList$inboundSchema: z.ZodType<
  SegmentUserList,
  z.ZodTypeDef,
  unknown
> = z.object({
  add: z.array(z.string()).optional(),
  remove: z.array(z.string()).optional(),
});

/** @internal */
export type SegmentUserList$Outbound = {
  add?: Array<string> | undefined;
  remove?: Array<string> | undefined;
};

/** @internal */
export const SegmentUserList$outboundSchema: z.ZodType<
  SegmentUserList$Outbound,
  z.ZodTypeDef,
  SegmentUserList
> = z.object({
  add: z.array(z.string()).optional(),
  remove: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SegmentUserList$ {
  /** @deprecated use `SegmentUserList$inboundSchema` instead. */
  export const inboundSchema = SegmentUserList$inboundSchema;
  /** @deprecated use `SegmentUserList$outboundSchema` instead. */
  export const outboundSchema = SegmentUserList$outboundSchema;
  /** @deprecated use `SegmentUserList$Outbound` instead. */
  export type Outbound = SegmentUserList$Outbound;
}

export function segmentUserListToJSON(
  segmentUserList: SegmentUserList,
): string {
  return JSON.stringify(SegmentUserList$outboundSchema.parse(segmentUserList));
}

export function segmentUserListFromJSON(
  jsonString: string,
): SafeParseResult<SegmentUserList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SegmentUserList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SegmentUserList' from JSON`,
  );
}
