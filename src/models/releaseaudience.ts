/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AudienceConfiguration,
  AudienceConfiguration$inboundSchema,
  AudienceConfiguration$Outbound,
  AudienceConfiguration$outboundSchema,
} from "./audienceconfiguration.js";
import {
  EnvironmentSummary,
  EnvironmentSummary$inboundSchema,
  EnvironmentSummary$Outbound,
  EnvironmentSummary$outboundSchema,
} from "./environmentsummary.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ReleaseAudience = {
  /**
   * The audience ID
   */
  id: string;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  environment?: EnvironmentSummary | undefined;
  /**
   * The release phase name
   */
  name: string;
  configuration?: AudienceConfiguration | undefined;
  /**
   * A list of segment keys
   */
  segmentKeys?: Array<string> | undefined;
  status?: string | undefined;
  /**
   * The rules IDs added or updated by this audience
   */
  ruleIds?: Array<string> | undefined;
};

/** @internal */
export const ReleaseAudience$inboundSchema: z.ZodType<
  ReleaseAudience,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _links: z.record(Link$inboundSchema).optional(),
  environment: EnvironmentSummary$inboundSchema.optional(),
  name: z.string(),
  configuration: AudienceConfiguration$inboundSchema.optional(),
  segmentKeys: z.array(z.string()).optional(),
  status: z.string().optional(),
  _ruleIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_links": "links",
    "_ruleIds": "ruleIds",
  });
});

/** @internal */
export type ReleaseAudience$Outbound = {
  _id: string;
  _links?: { [k: string]: Link$Outbound } | undefined;
  environment?: EnvironmentSummary$Outbound | undefined;
  name: string;
  configuration?: AudienceConfiguration$Outbound | undefined;
  segmentKeys?: Array<string> | undefined;
  status?: string | undefined;
  _ruleIds?: Array<string> | undefined;
};

/** @internal */
export const ReleaseAudience$outboundSchema: z.ZodType<
  ReleaseAudience$Outbound,
  z.ZodTypeDef,
  ReleaseAudience
> = z.object({
  id: z.string(),
  links: z.record(Link$outboundSchema).optional(),
  environment: EnvironmentSummary$outboundSchema.optional(),
  name: z.string(),
  configuration: AudienceConfiguration$outboundSchema.optional(),
  segmentKeys: z.array(z.string()).optional(),
  status: z.string().optional(),
  ruleIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    links: "_links",
    ruleIds: "_ruleIds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseAudience$ {
  /** @deprecated use `ReleaseAudience$inboundSchema` instead. */
  export const inboundSchema = ReleaseAudience$inboundSchema;
  /** @deprecated use `ReleaseAudience$outboundSchema` instead. */
  export const outboundSchema = ReleaseAudience$outboundSchema;
  /** @deprecated use `ReleaseAudience$Outbound` instead. */
  export type Outbound = ReleaseAudience$Outbound;
}

export function releaseAudienceToJSON(
  releaseAudience: ReleaseAudience,
): string {
  return JSON.stringify(ReleaseAudience$outboundSchema.parse(releaseAudience));
}

export function releaseAudienceFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseAudience, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseAudience$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseAudience' from JSON`,
  );
}
