/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Conflict,
  Conflict$inboundSchema,
  Conflict$Outbound,
  Conflict$outboundSchema,
} from "./conflict.js";
import {
  CopiedFromEnv,
  CopiedFromEnv$inboundSchema,
  CopiedFromEnv$Outbound,
  CopiedFromEnv$outboundSchema,
} from "./copiedfromenv.js";
import {
  CustomWorkflowMeta,
  CustomWorkflowMeta$inboundSchema,
  CustomWorkflowMeta$Outbound,
  CustomWorkflowMeta$outboundSchema,
} from "./customworkflowmeta.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IntegrationMetadata,
  IntegrationMetadata$inboundSchema,
  IntegrationMetadata$Outbound,
  IntegrationMetadata$outboundSchema,
} from "./integrationmetadata.js";
import {
  ReviewResponse,
  ReviewResponse$inboundSchema,
  ReviewResponse$Outbound,
  ReviewResponse$outboundSchema,
} from "./reviewresponse.js";

/**
 * Current status of the review of this approval request
 */
export const FlagConfigApprovalRequestResponseReviewStatus = {
  Approved: "approved",
  Declined: "declined",
  Pending: "pending",
} as const;
/**
 * Current status of the review of this approval request
 */
export type FlagConfigApprovalRequestResponseReviewStatus = ClosedEnum<
  typeof FlagConfigApprovalRequestResponseReviewStatus
>;

/**
 * Current status of the approval request
 */
export const FlagConfigApprovalRequestResponseStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
  Scheduled: "scheduled",
} as const;
/**
 * Current status of the approval request
 */
export type FlagConfigApprovalRequestResponseStatus = ClosedEnum<
  typeof FlagConfigApprovalRequestResponseStatus
>;

export type FlagConfigApprovalRequestResponse = {
  /**
   * The ID of this approval request
   */
  id: string;
  /**
   * Version of the approval request
   */
  version: number;
  creationDate: number;
  serviceKind: string;
  /**
   * The ID of the member who requested the approval
   */
  requestorId?: string | undefined;
  /**
   * A human-friendly name for the approval request
   */
  description?: string | undefined;
  /**
   * Current status of the review of this approval request
   */
  reviewStatus: FlagConfigApprovalRequestResponseReviewStatus;
  /**
   * An array of individual reviews of this approval request
   */
  allReviews: Array<ReviewResponse>;
  /**
   * An array of member IDs. These members are notified to review the approval request.
   */
  notifyMemberIds: Array<string>;
  appliedDate?: number | undefined;
  /**
   * The member ID of the member who applied the approval request
   */
  appliedByMemberId?: string | undefined;
  /**
   * The service token ID of the service token which applied the approval request
   */
  appliedByServiceTokenId?: string | undefined;
  /**
   * Current status of the approval request
   */
  status: FlagConfigApprovalRequestResponseStatus;
  instructions: Array<{ [k: string]: any }>;
  /**
   * Details on any conflicting approval requests
   */
  conflicts: Array<Conflict>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: any };
  executionDate?: number | undefined;
  /**
   * ID of scheduled change to edit or delete
   */
  operatingOnId?: string | undefined;
  integrationMetadata?: IntegrationMetadata | undefined;
  source?: CopiedFromEnv | undefined;
  customWorkflowMetadata?: CustomWorkflowMeta | undefined;
};

/** @internal */
export const FlagConfigApprovalRequestResponseReviewStatus$inboundSchema:
  z.ZodNativeEnum<typeof FlagConfigApprovalRequestResponseReviewStatus> = z
    .nativeEnum(FlagConfigApprovalRequestResponseReviewStatus);

/** @internal */
export const FlagConfigApprovalRequestResponseReviewStatus$outboundSchema:
  z.ZodNativeEnum<typeof FlagConfigApprovalRequestResponseReviewStatus> =
    FlagConfigApprovalRequestResponseReviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagConfigApprovalRequestResponseReviewStatus$ {
  /** @deprecated use `FlagConfigApprovalRequestResponseReviewStatus$inboundSchema` instead. */
  export const inboundSchema =
    FlagConfigApprovalRequestResponseReviewStatus$inboundSchema;
  /** @deprecated use `FlagConfigApprovalRequestResponseReviewStatus$outboundSchema` instead. */
  export const outboundSchema =
    FlagConfigApprovalRequestResponseReviewStatus$outboundSchema;
}

/** @internal */
export const FlagConfigApprovalRequestResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof FlagConfigApprovalRequestResponseStatus> = z
    .nativeEnum(FlagConfigApprovalRequestResponseStatus);

/** @internal */
export const FlagConfigApprovalRequestResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof FlagConfigApprovalRequestResponseStatus> =
    FlagConfigApprovalRequestResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagConfigApprovalRequestResponseStatus$ {
  /** @deprecated use `FlagConfigApprovalRequestResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    FlagConfigApprovalRequestResponseStatus$inboundSchema;
  /** @deprecated use `FlagConfigApprovalRequestResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    FlagConfigApprovalRequestResponseStatus$outboundSchema;
}

/** @internal */
export const FlagConfigApprovalRequestResponse$inboundSchema: z.ZodType<
  FlagConfigApprovalRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _version: z.number().int(),
  creationDate: z.number().int(),
  serviceKind: z.string(),
  requestorId: z.string().optional(),
  description: z.string().optional(),
  reviewStatus: FlagConfigApprovalRequestResponseReviewStatus$inboundSchema,
  allReviews: z.array(ReviewResponse$inboundSchema),
  notifyMemberIds: z.array(z.string()),
  appliedDate: z.number().int().optional(),
  appliedByMemberId: z.string().optional(),
  appliedByServiceTokenId: z.string().optional(),
  status: FlagConfigApprovalRequestResponseStatus$inboundSchema,
  instructions: z.array(z.record(z.any())),
  conflicts: z.array(Conflict$inboundSchema),
  _links: z.record(z.any()),
  executionDate: z.number().int().optional(),
  operatingOnId: z.string().optional(),
  integrationMetadata: IntegrationMetadata$inboundSchema.optional(),
  source: CopiedFromEnv$inboundSchema.optional(),
  customWorkflowMetadata: CustomWorkflowMeta$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_version": "version",
    "_links": "links",
  });
});

/** @internal */
export type FlagConfigApprovalRequestResponse$Outbound = {
  _id: string;
  _version: number;
  creationDate: number;
  serviceKind: string;
  requestorId?: string | undefined;
  description?: string | undefined;
  reviewStatus: string;
  allReviews: Array<ReviewResponse$Outbound>;
  notifyMemberIds: Array<string>;
  appliedDate?: number | undefined;
  appliedByMemberId?: string | undefined;
  appliedByServiceTokenId?: string | undefined;
  status: string;
  instructions: Array<{ [k: string]: any }>;
  conflicts: Array<Conflict$Outbound>;
  _links: { [k: string]: any };
  executionDate?: number | undefined;
  operatingOnId?: string | undefined;
  integrationMetadata?: IntegrationMetadata$Outbound | undefined;
  source?: CopiedFromEnv$Outbound | undefined;
  customWorkflowMetadata?: CustomWorkflowMeta$Outbound | undefined;
};

/** @internal */
export const FlagConfigApprovalRequestResponse$outboundSchema: z.ZodType<
  FlagConfigApprovalRequestResponse$Outbound,
  z.ZodTypeDef,
  FlagConfigApprovalRequestResponse
> = z.object({
  id: z.string(),
  version: z.number().int(),
  creationDate: z.number().int(),
  serviceKind: z.string(),
  requestorId: z.string().optional(),
  description: z.string().optional(),
  reviewStatus: FlagConfigApprovalRequestResponseReviewStatus$outboundSchema,
  allReviews: z.array(ReviewResponse$outboundSchema),
  notifyMemberIds: z.array(z.string()),
  appliedDate: z.number().int().optional(),
  appliedByMemberId: z.string().optional(),
  appliedByServiceTokenId: z.string().optional(),
  status: FlagConfigApprovalRequestResponseStatus$outboundSchema,
  instructions: z.array(z.record(z.any())),
  conflicts: z.array(Conflict$outboundSchema),
  links: z.record(z.any()),
  executionDate: z.number().int().optional(),
  operatingOnId: z.string().optional(),
  integrationMetadata: IntegrationMetadata$outboundSchema.optional(),
  source: CopiedFromEnv$outboundSchema.optional(),
  customWorkflowMetadata: CustomWorkflowMeta$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    version: "_version",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagConfigApprovalRequestResponse$ {
  /** @deprecated use `FlagConfigApprovalRequestResponse$inboundSchema` instead. */
  export const inboundSchema = FlagConfigApprovalRequestResponse$inboundSchema;
  /** @deprecated use `FlagConfigApprovalRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    FlagConfigApprovalRequestResponse$outboundSchema;
  /** @deprecated use `FlagConfigApprovalRequestResponse$Outbound` instead. */
  export type Outbound = FlagConfigApprovalRequestResponse$Outbound;
}

export function flagConfigApprovalRequestResponseToJSON(
  flagConfigApprovalRequestResponse: FlagConfigApprovalRequestResponse,
): string {
  return JSON.stringify(
    FlagConfigApprovalRequestResponse$outboundSchema.parse(
      flagConfigApprovalRequestResponse,
    ),
  );
}

export function flagConfigApprovalRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<FlagConfigApprovalRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagConfigApprovalRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagConfigApprovalRequestResponse' from JSON`,
  );
}
