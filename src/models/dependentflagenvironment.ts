/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type DependentFlagEnvironment = {
  /**
   * The environment name
   */
  name?: string | undefined;
  /**
   * The environment key
   */
  key: string;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  site: Link;
};

/** @internal */
export const DependentFlagEnvironment$inboundSchema: z.ZodType<
  DependentFlagEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  _links: z.record(Link$inboundSchema),
  _site: Link$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_site": "site",
  });
});

/** @internal */
export type DependentFlagEnvironment$Outbound = {
  name?: string | undefined;
  key: string;
  _links: { [k: string]: Link$Outbound };
  _site: Link$Outbound;
};

/** @internal */
export const DependentFlagEnvironment$outboundSchema: z.ZodType<
  DependentFlagEnvironment$Outbound,
  z.ZodTypeDef,
  DependentFlagEnvironment
> = z.object({
  name: z.string().optional(),
  key: z.string(),
  links: z.record(Link$outboundSchema),
  site: Link$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    site: "_site",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DependentFlagEnvironment$ {
  /** @deprecated use `DependentFlagEnvironment$inboundSchema` instead. */
  export const inboundSchema = DependentFlagEnvironment$inboundSchema;
  /** @deprecated use `DependentFlagEnvironment$outboundSchema` instead. */
  export const outboundSchema = DependentFlagEnvironment$outboundSchema;
  /** @deprecated use `DependentFlagEnvironment$Outbound` instead. */
  export type Outbound = DependentFlagEnvironment$Outbound;
}

export function dependentFlagEnvironmentToJSON(
  dependentFlagEnvironment: DependentFlagEnvironment,
): string {
  return JSON.stringify(
    DependentFlagEnvironment$outboundSchema.parse(dependentFlagEnvironment),
  );
}

export function dependentFlagEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<DependentFlagEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DependentFlagEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DependentFlagEnvironment' from JSON`,
  );
}
