/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InsightsMetricScore,
  InsightsMetricScore$inboundSchema,
  InsightsMetricScore$Outbound,
  InsightsMetricScore$outboundSchema,
} from "./insightsmetricscore.js";

export type InsightGroupScores = {
  overall: InsightsMetricScore;
  deploymentFrequency: InsightsMetricScore;
  deploymentFailureRate: InsightsMetricScore;
  leadTime: InsightsMetricScore;
  impactSize: InsightsMetricScore;
  experimentationCoverage: InsightsMetricScore;
  flagHealth: InsightsMetricScore;
  velocity: InsightsMetricScore;
  risk: InsightsMetricScore;
  efficiency: InsightsMetricScore;
  creationRatio?: InsightsMetricScore | undefined;
};

/** @internal */
export const InsightGroupScores$inboundSchema: z.ZodType<
  InsightGroupScores,
  z.ZodTypeDef,
  unknown
> = z.object({
  overall: InsightsMetricScore$inboundSchema,
  deploymentFrequency: InsightsMetricScore$inboundSchema,
  deploymentFailureRate: InsightsMetricScore$inboundSchema,
  leadTime: InsightsMetricScore$inboundSchema,
  impactSize: InsightsMetricScore$inboundSchema,
  experimentationCoverage: InsightsMetricScore$inboundSchema,
  flagHealth: InsightsMetricScore$inboundSchema,
  velocity: InsightsMetricScore$inboundSchema,
  risk: InsightsMetricScore$inboundSchema,
  efficiency: InsightsMetricScore$inboundSchema,
  creationRatio: InsightsMetricScore$inboundSchema.optional(),
});

/** @internal */
export type InsightGroupScores$Outbound = {
  overall: InsightsMetricScore$Outbound;
  deploymentFrequency: InsightsMetricScore$Outbound;
  deploymentFailureRate: InsightsMetricScore$Outbound;
  leadTime: InsightsMetricScore$Outbound;
  impactSize: InsightsMetricScore$Outbound;
  experimentationCoverage: InsightsMetricScore$Outbound;
  flagHealth: InsightsMetricScore$Outbound;
  velocity: InsightsMetricScore$Outbound;
  risk: InsightsMetricScore$Outbound;
  efficiency: InsightsMetricScore$Outbound;
  creationRatio?: InsightsMetricScore$Outbound | undefined;
};

/** @internal */
export const InsightGroupScores$outboundSchema: z.ZodType<
  InsightGroupScores$Outbound,
  z.ZodTypeDef,
  InsightGroupScores
> = z.object({
  overall: InsightsMetricScore$outboundSchema,
  deploymentFrequency: InsightsMetricScore$outboundSchema,
  deploymentFailureRate: InsightsMetricScore$outboundSchema,
  leadTime: InsightsMetricScore$outboundSchema,
  impactSize: InsightsMetricScore$outboundSchema,
  experimentationCoverage: InsightsMetricScore$outboundSchema,
  flagHealth: InsightsMetricScore$outboundSchema,
  velocity: InsightsMetricScore$outboundSchema,
  risk: InsightsMetricScore$outboundSchema,
  efficiency: InsightsMetricScore$outboundSchema,
  creationRatio: InsightsMetricScore$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightGroupScores$ {
  /** @deprecated use `InsightGroupScores$inboundSchema` instead. */
  export const inboundSchema = InsightGroupScores$inboundSchema;
  /** @deprecated use `InsightGroupScores$outboundSchema` instead. */
  export const outboundSchema = InsightGroupScores$outboundSchema;
  /** @deprecated use `InsightGroupScores$Outbound` instead. */
  export type Outbound = InsightGroupScores$Outbound;
}

export function insightGroupScoresToJSON(
  insightGroupScores: InsightGroupScores,
): string {
  return JSON.stringify(
    InsightGroupScores$outboundSchema.parse(insightGroupScores),
  );
}

export function insightGroupScoresFromJSON(
  jsonString: string,
): SafeParseResult<InsightGroupScores, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightGroupScores$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightGroupScores' from JSON`,
  );
}
