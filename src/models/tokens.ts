/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Token,
  Token$inboundSchema,
  Token$Outbound,
  Token$outboundSchema,
} from "./token.js";

export type Tokens = {
  /**
   * An array of access tokens
   */
  items?: Array<Token> | undefined;
  links?: { [k: string]: Link } | undefined;
  /**
   * The number of access tokens returned
   */
  totalCount?: number | undefined;
};

/** @internal */
export const Tokens$inboundSchema: z.ZodType<Tokens, z.ZodTypeDef, unknown> = z
  .object({
    items: z.array(Token$inboundSchema).optional(),
    _links: z.record(Link$inboundSchema).optional(),
    totalCount: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Tokens$Outbound = {
  items?: Array<Token$Outbound> | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const Tokens$outboundSchema: z.ZodType<
  Tokens$Outbound,
  z.ZodTypeDef,
  Tokens
> = z.object({
  items: z.array(Token$outboundSchema).optional(),
  links: z.record(Link$outboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tokens$ {
  /** @deprecated use `Tokens$inboundSchema` instead. */
  export const inboundSchema = Tokens$inboundSchema;
  /** @deprecated use `Tokens$outboundSchema` instead. */
  export const outboundSchema = Tokens$outboundSchema;
  /** @deprecated use `Tokens$Outbound` instead. */
  export type Outbound = Tokens$Outbound;
}

export function tokensToJSON(tokens: Tokens): string {
  return JSON.stringify(Tokens$outboundSchema.parse(tokens));
}

export function tokensFromJSON(
  jsonString: string,
): SafeParseResult<Tokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tokens' from JSON`,
  );
}
