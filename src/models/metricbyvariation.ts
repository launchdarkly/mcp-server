/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metrics,
  Metrics$inboundSchema,
  Metrics$Outbound,
  Metrics$outboundSchema,
} from "./metrics.js";

export type MetricByVariation = {
  variationKey?: string | undefined;
  metrics?: Metrics | undefined;
};

/** @internal */
export const MetricByVariation$inboundSchema: z.ZodType<
  MetricByVariation,
  z.ZodTypeDef,
  unknown
> = z.object({
  variationKey: z.string().optional(),
  metrics: Metrics$inboundSchema.optional(),
});

/** @internal */
export type MetricByVariation$Outbound = {
  variationKey?: string | undefined;
  metrics?: Metrics$Outbound | undefined;
};

/** @internal */
export const MetricByVariation$outboundSchema: z.ZodType<
  MetricByVariation$Outbound,
  z.ZodTypeDef,
  MetricByVariation
> = z.object({
  variationKey: z.string().optional(),
  metrics: Metrics$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricByVariation$ {
  /** @deprecated use `MetricByVariation$inboundSchema` instead. */
  export const inboundSchema = MetricByVariation$inboundSchema;
  /** @deprecated use `MetricByVariation$outboundSchema` instead. */
  export const outboundSchema = MetricByVariation$outboundSchema;
  /** @deprecated use `MetricByVariation$Outbound` instead. */
  export type Outbound = MetricByVariation$Outbound;
}

export function metricByVariationToJSON(
  metricByVariation: MetricByVariation,
): string {
  return JSON.stringify(
    MetricByVariation$outboundSchema.parse(metricByVariation),
  );
}

export function metricByVariationFromJSON(
  jsonString: string,
): SafeParseResult<MetricByVariation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricByVariation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricByVariation' from JSON`,
  );
}
