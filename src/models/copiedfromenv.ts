/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CopiedFromEnv = {
  /**
   * Key of feature flag copied
   */
  key: string;
  /**
   * Version of feature flag copied
   */
  version?: number | undefined;
};

/** @internal */
export const CopiedFromEnv$inboundSchema: z.ZodType<
  CopiedFromEnv,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  version: z.number().int().optional(),
});

/** @internal */
export type CopiedFromEnv$Outbound = {
  key: string;
  version?: number | undefined;
};

/** @internal */
export const CopiedFromEnv$outboundSchema: z.ZodType<
  CopiedFromEnv$Outbound,
  z.ZodTypeDef,
  CopiedFromEnv
> = z.object({
  key: z.string(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CopiedFromEnv$ {
  /** @deprecated use `CopiedFromEnv$inboundSchema` instead. */
  export const inboundSchema = CopiedFromEnv$inboundSchema;
  /** @deprecated use `CopiedFromEnv$outboundSchema` instead. */
  export const outboundSchema = CopiedFromEnv$outboundSchema;
  /** @deprecated use `CopiedFromEnv$Outbound` instead. */
  export type Outbound = CopiedFromEnv$Outbound;
}

export function copiedFromEnvToJSON(copiedFromEnv: CopiedFromEnv): string {
  return JSON.stringify(CopiedFromEnv$outboundSchema.parse(copiedFromEnv));
}

export function copiedFromEnvFromJSON(
  jsonString: string,
): SafeParseResult<CopiedFromEnv, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CopiedFromEnv$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CopiedFromEnv' from JSON`,
  );
}
