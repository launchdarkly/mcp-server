/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  StageInput,
  StageInput$inboundSchema,
  StageInput$Outbound,
  StageInput$outboundSchema,
} from "./stageinput.js";

export type CustomWorkflowInput = {
  maintainerId?: string | undefined;
  /**
   * The workflow name
   */
  name: string;
  /**
   * The workflow description
   */
  description?: string | undefined;
  /**
   * A list of the workflow stages
   */
  stages?: Array<StageInput> | undefined;
  /**
   * The template key
   */
  templateKey?: string | undefined;
};

/** @internal */
export const CustomWorkflowInput$inboundSchema: z.ZodType<
  CustomWorkflowInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  maintainerId: z.string().optional(),
  name: z.string(),
  description: z.string().optional(),
  stages: z.array(StageInput$inboundSchema).optional(),
  templateKey: z.string().optional(),
});

/** @internal */
export type CustomWorkflowInput$Outbound = {
  maintainerId?: string | undefined;
  name: string;
  description?: string | undefined;
  stages?: Array<StageInput$Outbound> | undefined;
  templateKey?: string | undefined;
};

/** @internal */
export const CustomWorkflowInput$outboundSchema: z.ZodType<
  CustomWorkflowInput$Outbound,
  z.ZodTypeDef,
  CustomWorkflowInput
> = z.object({
  maintainerId: z.string().optional(),
  name: z.string(),
  description: z.string().optional(),
  stages: z.array(StageInput$outboundSchema).optional(),
  templateKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomWorkflowInput$ {
  /** @deprecated use `CustomWorkflowInput$inboundSchema` instead. */
  export const inboundSchema = CustomWorkflowInput$inboundSchema;
  /** @deprecated use `CustomWorkflowInput$outboundSchema` instead. */
  export const outboundSchema = CustomWorkflowInput$outboundSchema;
  /** @deprecated use `CustomWorkflowInput$Outbound` instead. */
  export type Outbound = CustomWorkflowInput$Outbound;
}

export function customWorkflowInputToJSON(
  customWorkflowInput: CustomWorkflowInput,
): string {
  return JSON.stringify(
    CustomWorkflowInput$outboundSchema.parse(customWorkflowInput),
  );
}

export function customWorkflowInputFromJSON(
  jsonString: string,
): SafeParseResult<CustomWorkflowInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomWorkflowInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomWorkflowInput' from JSON`,
  );
}
