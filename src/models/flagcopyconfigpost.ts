/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagCopyConfigEnvironment,
  FlagCopyConfigEnvironment$inboundSchema,
  FlagCopyConfigEnvironment$Outbound,
  FlagCopyConfigEnvironment$outboundSchema,
} from "./flagcopyconfigenvironment.js";

export const FlagCopyConfigPostIncludedAction = {
  UpdateOn: "updateOn",
  UpdateRules: "updateRules",
  UpdateFallthrough: "updateFallthrough",
  UpdateOffVariation: "updateOffVariation",
  UpdatePrerequisites: "updatePrerequisites",
  UpdateTargets: "updateTargets",
  UpdateFlagConfigMigrationSettings: "updateFlagConfigMigrationSettings",
} as const;
export type FlagCopyConfigPostIncludedAction = ClosedEnum<
  typeof FlagCopyConfigPostIncludedAction
>;

export const FlagCopyConfigPostExcludedAction = {
  UpdateOn: "updateOn",
  UpdateRules: "updateRules",
  UpdateFallthrough: "updateFallthrough",
  UpdateOffVariation: "updateOffVariation",
  UpdatePrerequisites: "updatePrerequisites",
  UpdateTargets: "updateTargets",
  UpdateFlagConfigMigrationSettings: "updateFlagConfigMigrationSettings",
} as const;
export type FlagCopyConfigPostExcludedAction = ClosedEnum<
  typeof FlagCopyConfigPostExcludedAction
>;

export type FlagCopyConfigPost = {
  source: FlagCopyConfigEnvironment;
  target: FlagCopyConfigEnvironment;
  /**
   * Optional comment
   */
  comment?: string | undefined;
  /**
   * Optional list of the flag changes to copy from the source environment to the target environment. You may include either <code>includedActions</code> or <code>excludedActions</code>, but not both. If you include neither, then all flag changes will be copied.
   */
  includedActions?: Array<FlagCopyConfigPostIncludedAction> | undefined;
  /**
   * Optional list of the flag changes NOT to copy from the source environment to the target environment. You may include either  <code>includedActions</code> or <code>excludedActions</code>, but not both. If you include neither, then all flag changes will be copied.
   */
  excludedActions?: Array<FlagCopyConfigPostExcludedAction> | undefined;
};

/** @internal */
export const FlagCopyConfigPostIncludedAction$inboundSchema: z.ZodNativeEnum<
  typeof FlagCopyConfigPostIncludedAction
> = z.nativeEnum(FlagCopyConfigPostIncludedAction);

/** @internal */
export const FlagCopyConfigPostIncludedAction$outboundSchema: z.ZodNativeEnum<
  typeof FlagCopyConfigPostIncludedAction
> = FlagCopyConfigPostIncludedAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagCopyConfigPostIncludedAction$ {
  /** @deprecated use `FlagCopyConfigPostIncludedAction$inboundSchema` instead. */
  export const inboundSchema = FlagCopyConfigPostIncludedAction$inboundSchema;
  /** @deprecated use `FlagCopyConfigPostIncludedAction$outboundSchema` instead. */
  export const outboundSchema = FlagCopyConfigPostIncludedAction$outboundSchema;
}

/** @internal */
export const FlagCopyConfigPostExcludedAction$inboundSchema: z.ZodNativeEnum<
  typeof FlagCopyConfigPostExcludedAction
> = z.nativeEnum(FlagCopyConfigPostExcludedAction);

/** @internal */
export const FlagCopyConfigPostExcludedAction$outboundSchema: z.ZodNativeEnum<
  typeof FlagCopyConfigPostExcludedAction
> = FlagCopyConfigPostExcludedAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagCopyConfigPostExcludedAction$ {
  /** @deprecated use `FlagCopyConfigPostExcludedAction$inboundSchema` instead. */
  export const inboundSchema = FlagCopyConfigPostExcludedAction$inboundSchema;
  /** @deprecated use `FlagCopyConfigPostExcludedAction$outboundSchema` instead. */
  export const outboundSchema = FlagCopyConfigPostExcludedAction$outboundSchema;
}

/** @internal */
export const FlagCopyConfigPost$inboundSchema: z.ZodType<
  FlagCopyConfigPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: FlagCopyConfigEnvironment$inboundSchema,
  target: FlagCopyConfigEnvironment$inboundSchema,
  comment: z.string().optional(),
  includedActions: z.array(FlagCopyConfigPostIncludedAction$inboundSchema)
    .optional(),
  excludedActions: z.array(FlagCopyConfigPostExcludedAction$inboundSchema)
    .optional(),
});

/** @internal */
export type FlagCopyConfigPost$Outbound = {
  source: FlagCopyConfigEnvironment$Outbound;
  target: FlagCopyConfigEnvironment$Outbound;
  comment?: string | undefined;
  includedActions?: Array<string> | undefined;
  excludedActions?: Array<string> | undefined;
};

/** @internal */
export const FlagCopyConfigPost$outboundSchema: z.ZodType<
  FlagCopyConfigPost$Outbound,
  z.ZodTypeDef,
  FlagCopyConfigPost
> = z.object({
  source: FlagCopyConfigEnvironment$outboundSchema,
  target: FlagCopyConfigEnvironment$outboundSchema,
  comment: z.string().optional(),
  includedActions: z.array(FlagCopyConfigPostIncludedAction$outboundSchema)
    .optional(),
  excludedActions: z.array(FlagCopyConfigPostExcludedAction$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagCopyConfigPost$ {
  /** @deprecated use `FlagCopyConfigPost$inboundSchema` instead. */
  export const inboundSchema = FlagCopyConfigPost$inboundSchema;
  /** @deprecated use `FlagCopyConfigPost$outboundSchema` instead. */
  export const outboundSchema = FlagCopyConfigPost$outboundSchema;
  /** @deprecated use `FlagCopyConfigPost$Outbound` instead. */
  export type Outbound = FlagCopyConfigPost$Outbound;
}

export function flagCopyConfigPostToJSON(
  flagCopyConfigPost: FlagCopyConfigPost,
): string {
  return JSON.stringify(
    FlagCopyConfigPost$outboundSchema.parse(flagCopyConfigPost),
  );
}

export function flagCopyConfigPostFromJSON(
  jsonString: string,
): SafeParseResult<FlagCopyConfigPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagCopyConfigPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagCopyConfigPost' from JSON`,
  );
}
