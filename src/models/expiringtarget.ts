/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResourceId,
  ResourceId$inboundSchema,
  ResourceId$Outbound,
  ResourceId$outboundSchema,
} from "./resourceid.js";

export type ExpiringTarget = {
  /**
   * The ID of this expiring target
   */
  id: string;
  /**
   * The version of this expiring target
   */
  version: number;
  expirationDate: number;
  /**
   * The context kind of the context to be removed
   */
  contextKind: string;
  /**
   * A unique key used to represent the context to be removed
   */
  contextKey: string;
  /**
   * A segment's target type, <code>included</code> or <code>excluded</code>. Included when expiring targets are updated on a segment.
   */
  targetType?: string | undefined;
  /**
   * A unique ID used to represent the flag variation. Included when expiring targets are updated on a feature flag.
   */
  variationId?: string | undefined;
  resourceId: ResourceId;
};

/** @internal */
export const ExpiringTarget$inboundSchema: z.ZodType<
  ExpiringTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _version: z.number().int(),
  expirationDate: z.number().int(),
  contextKind: z.string(),
  contextKey: z.string(),
  targetType: z.string().optional(),
  variationId: z.string().optional(),
  _resourceId: ResourceId$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_version": "version",
    "_resourceId": "resourceId",
  });
});

/** @internal */
export type ExpiringTarget$Outbound = {
  _id: string;
  _version: number;
  expirationDate: number;
  contextKind: string;
  contextKey: string;
  targetType?: string | undefined;
  variationId?: string | undefined;
  _resourceId: ResourceId$Outbound;
};

/** @internal */
export const ExpiringTarget$outboundSchema: z.ZodType<
  ExpiringTarget$Outbound,
  z.ZodTypeDef,
  ExpiringTarget
> = z.object({
  id: z.string(),
  version: z.number().int(),
  expirationDate: z.number().int(),
  contextKind: z.string(),
  contextKey: z.string(),
  targetType: z.string().optional(),
  variationId: z.string().optional(),
  resourceId: ResourceId$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    version: "_version",
    resourceId: "_resourceId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringTarget$ {
  /** @deprecated use `ExpiringTarget$inboundSchema` instead. */
  export const inboundSchema = ExpiringTarget$inboundSchema;
  /** @deprecated use `ExpiringTarget$outboundSchema` instead. */
  export const outboundSchema = ExpiringTarget$outboundSchema;
  /** @deprecated use `ExpiringTarget$Outbound` instead. */
  export type Outbound = ExpiringTarget$Outbound;
}

export function expiringTargetToJSON(expiringTarget: ExpiringTarget): string {
  return JSON.stringify(ExpiringTarget$outboundSchema.parse(expiringTarget));
}

export function expiringTargetFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringTarget' from JSON`,
  );
}
