/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  MemberTeamSummaryRep,
  MemberTeamSummaryRep$inboundSchema,
  MemberTeamSummaryRep$Outbound,
  MemberTeamSummaryRep$outboundSchema,
} from "./memberteamsummaryrep.js";

export type MaintainerRep = {
  member?: MemberSummary | undefined;
  team?: MemberTeamSummaryRep | undefined;
};

/** @internal */
export const MaintainerRep$inboundSchema: z.ZodType<
  MaintainerRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  member: MemberSummary$inboundSchema.optional(),
  team: MemberTeamSummaryRep$inboundSchema.optional(),
});

/** @internal */
export type MaintainerRep$Outbound = {
  member?: MemberSummary$Outbound | undefined;
  team?: MemberTeamSummaryRep$Outbound | undefined;
};

/** @internal */
export const MaintainerRep$outboundSchema: z.ZodType<
  MaintainerRep$Outbound,
  z.ZodTypeDef,
  MaintainerRep
> = z.object({
  member: MemberSummary$outboundSchema.optional(),
  team: MemberTeamSummaryRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaintainerRep$ {
  /** @deprecated use `MaintainerRep$inboundSchema` instead. */
  export const inboundSchema = MaintainerRep$inboundSchema;
  /** @deprecated use `MaintainerRep$outboundSchema` instead. */
  export const outboundSchema = MaintainerRep$outboundSchema;
  /** @deprecated use `MaintainerRep$Outbound` instead. */
  export type Outbound = MaintainerRep$Outbound;
}

export function maintainerRepToJSON(maintainerRep: MaintainerRep): string {
  return JSON.stringify(MaintainerRep$outboundSchema.parse(maintainerRep));
}

export function maintainerRepFromJSON(
  jsonString: string,
): SafeParseResult<MaintainerRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaintainerRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaintainerRep' from JSON`,
  );
}
