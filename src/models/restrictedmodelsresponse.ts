/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RestrictedModelError,
  RestrictedModelError$inboundSchema,
  RestrictedModelError$Outbound,
  RestrictedModelError$outboundSchema,
} from "./restrictedmodelerror.js";

export type RestrictedModelsResponse = {
  successes: Array<string>;
  errors: Array<RestrictedModelError>;
};

/** @internal */
export const RestrictedModelsResponse$inboundSchema: z.ZodType<
  RestrictedModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  successes: z.array(z.string()),
  errors: z.array(RestrictedModelError$inboundSchema),
});

/** @internal */
export type RestrictedModelsResponse$Outbound = {
  successes: Array<string>;
  errors: Array<RestrictedModelError$Outbound>;
};

/** @internal */
export const RestrictedModelsResponse$outboundSchema: z.ZodType<
  RestrictedModelsResponse$Outbound,
  z.ZodTypeDef,
  RestrictedModelsResponse
> = z.object({
  successes: z.array(z.string()),
  errors: z.array(RestrictedModelError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestrictedModelsResponse$ {
  /** @deprecated use `RestrictedModelsResponse$inboundSchema` instead. */
  export const inboundSchema = RestrictedModelsResponse$inboundSchema;
  /** @deprecated use `RestrictedModelsResponse$outboundSchema` instead. */
  export const outboundSchema = RestrictedModelsResponse$outboundSchema;
  /** @deprecated use `RestrictedModelsResponse$Outbound` instead. */
  export type Outbound = RestrictedModelsResponse$Outbound;
}

export function restrictedModelsResponseToJSON(
  restrictedModelsResponse: RestrictedModelsResponse,
): string {
  return JSON.stringify(
    RestrictedModelsResponse$outboundSchema.parse(restrictedModelsResponse),
  );
}

export function restrictedModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<RestrictedModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestrictedModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestrictedModelsResponse' from JSON`,
  );
}
