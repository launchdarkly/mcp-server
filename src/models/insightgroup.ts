/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$Outbound,
  Environment$outboundSchema,
} from "./environment.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InsightGroupCollectionScoreMetadata,
  InsightGroupCollectionScoreMetadata$inboundSchema,
  InsightGroupCollectionScoreMetadata$Outbound,
  InsightGroupCollectionScoreMetadata$outboundSchema,
} from "./insightgroupcollectionscoremetadata.js";
import {
  InsightGroupScores,
  InsightGroupScores$inboundSchema,
  InsightGroupScores$Outbound,
  InsightGroupScores$outboundSchema,
} from "./insightgroupscores.js";

export type InsightGroup = {
  environment?: Environment | undefined;
  scores?: InsightGroupScores | undefined;
  scoreMetadata?: InsightGroupCollectionScoreMetadata | undefined;
  /**
   * The insight group key
   */
  key: string;
  /**
   * The insight group name
   */
  name: string;
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The application keys
   */
  applicationKeys?: Array<string> | undefined;
  createdAt: number;
};

/** @internal */
export const InsightGroup$inboundSchema: z.ZodType<
  InsightGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  environment: Environment$inboundSchema.optional(),
  scores: InsightGroupScores$inboundSchema.optional(),
  scoreMetadata: InsightGroupCollectionScoreMetadata$inboundSchema.optional(),
  key: z.string(),
  name: z.string(),
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKeys: z.array(z.string()).optional(),
  createdAt: z.number().int(),
});

/** @internal */
export type InsightGroup$Outbound = {
  environment?: Environment$Outbound | undefined;
  scores?: InsightGroupScores$Outbound | undefined;
  scoreMetadata?: InsightGroupCollectionScoreMetadata$Outbound | undefined;
  key: string;
  name: string;
  projectKey: string;
  environmentKey: string;
  applicationKeys?: Array<string> | undefined;
  createdAt: number;
};

/** @internal */
export const InsightGroup$outboundSchema: z.ZodType<
  InsightGroup$Outbound,
  z.ZodTypeDef,
  InsightGroup
> = z.object({
  environment: Environment$outboundSchema.optional(),
  scores: InsightGroupScores$outboundSchema.optional(),
  scoreMetadata: InsightGroupCollectionScoreMetadata$outboundSchema.optional(),
  key: z.string(),
  name: z.string(),
  projectKey: z.string(),
  environmentKey: z.string(),
  applicationKeys: z.array(z.string()).optional(),
  createdAt: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightGroup$ {
  /** @deprecated use `InsightGroup$inboundSchema` instead. */
  export const inboundSchema = InsightGroup$inboundSchema;
  /** @deprecated use `InsightGroup$outboundSchema` instead. */
  export const outboundSchema = InsightGroup$outboundSchema;
  /** @deprecated use `InsightGroup$Outbound` instead. */
  export type Outbound = InsightGroup$Outbound;
}

export function insightGroupToJSON(insightGroup: InsightGroup): string {
  return JSON.stringify(InsightGroup$outboundSchema.parse(insightGroup));
}

export function insightGroupFromJSON(
  jsonString: string,
): SafeParseResult<InsightGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightGroup' from JSON`,
  );
}
