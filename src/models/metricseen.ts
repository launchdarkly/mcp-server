/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MetricSeen = {
  /**
   * Whether the metric has received an event for this iteration
   */
  ever?: boolean | undefined;
  /**
   * Timestamp of when the metric most recently received an event for this iteration
   */
  timestamp?: number | undefined;
};

/** @internal */
export const MetricSeen$inboundSchema: z.ZodType<
  MetricSeen,
  z.ZodTypeDef,
  unknown
> = z.object({
  ever: z.boolean().optional(),
  timestamp: z.number().int().optional(),
});

/** @internal */
export type MetricSeen$Outbound = {
  ever?: boolean | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const MetricSeen$outboundSchema: z.ZodType<
  MetricSeen$Outbound,
  z.ZodTypeDef,
  MetricSeen
> = z.object({
  ever: z.boolean().optional(),
  timestamp: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricSeen$ {
  /** @deprecated use `MetricSeen$inboundSchema` instead. */
  export const inboundSchema = MetricSeen$inboundSchema;
  /** @deprecated use `MetricSeen$outboundSchema` instead. */
  export const outboundSchema = MetricSeen$outboundSchema;
  /** @deprecated use `MetricSeen$Outbound` instead. */
  export type Outbound = MetricSeen$Outbound;
}

export function metricSeenToJSON(metricSeen: MetricSeen): string {
  return JSON.stringify(MetricSeen$outboundSchema.parse(metricSeen));
}

export function metricSeenFromJSON(
  jsonString: string,
): SafeParseResult<MetricSeen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricSeen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricSeen' from JSON`,
  );
}
