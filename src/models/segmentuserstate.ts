/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SegmentUserList,
  SegmentUserList$inboundSchema,
  SegmentUserList$Outbound,
  SegmentUserList$outboundSchema,
} from "./segmentuserlist.js";

export type SegmentUserState = {
  included?: SegmentUserList | undefined;
  excluded?: SegmentUserList | undefined;
};

/** @internal */
export const SegmentUserState$inboundSchema: z.ZodType<
  SegmentUserState,
  z.ZodTypeDef,
  unknown
> = z.object({
  included: SegmentUserList$inboundSchema.optional(),
  excluded: SegmentUserList$inboundSchema.optional(),
});

/** @internal */
export type SegmentUserState$Outbound = {
  included?: SegmentUserList$Outbound | undefined;
  excluded?: SegmentUserList$Outbound | undefined;
};

/** @internal */
export const SegmentUserState$outboundSchema: z.ZodType<
  SegmentUserState$Outbound,
  z.ZodTypeDef,
  SegmentUserState
> = z.object({
  included: SegmentUserList$outboundSchema.optional(),
  excluded: SegmentUserList$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SegmentUserState$ {
  /** @deprecated use `SegmentUserState$inboundSchema` instead. */
  export const inboundSchema = SegmentUserState$inboundSchema;
  /** @deprecated use `SegmentUserState$outboundSchema` instead. */
  export const outboundSchema = SegmentUserState$outboundSchema;
  /** @deprecated use `SegmentUserState$Outbound` instead. */
  export type Outbound = SegmentUserState$Outbound;
}

export function segmentUserStateToJSON(
  segmentUserState: SegmentUserState,
): string {
  return JSON.stringify(
    SegmentUserState$outboundSchema.parse(segmentUserState),
  );
}

export function segmentUserStateFromJSON(
  jsonString: string,
): SafeParseResult<SegmentUserState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SegmentUserState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SegmentUserState' from JSON`,
  );
}
