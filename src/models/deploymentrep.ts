/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagReferenceCollectionRep,
  FlagReferenceCollectionRep$inboundSchema,
  FlagReferenceCollectionRep$Outbound,
  FlagReferenceCollectionRep$outboundSchema,
} from "./flagreferencecollectionrep.js";
import {
  LeadTimeStagesRep,
  LeadTimeStagesRep$inboundSchema,
  LeadTimeStagesRep$Outbound,
  LeadTimeStagesRep$outboundSchema,
} from "./leadtimestagesrep.js";
import {
  PullRequestCollectionRep,
  PullRequestCollectionRep$inboundSchema,
  PullRequestCollectionRep$Outbound,
  PullRequestCollectionRep$outboundSchema,
} from "./pullrequestcollectionrep.js";

export type DeploymentRep = {
  /**
   * The deployment ID
   */
  id: string;
  /**
   * The application key
   */
  applicationKey: string;
  /**
   * The application version
   */
  applicationVersion: string;
  startedAt: number;
  endedAt?: number | undefined;
  /**
   * The duration of the deployment in milliseconds
   */
  durationMs?: number | undefined;
  status: string;
  kind: string;
  /**
   * Whether the deployment is active
   */
  active: boolean;
  /**
   * The metadata associated with the deployment
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * Whether the deployment is archived
   */
  archived: boolean;
  /**
   * The environment key
   */
  environmentKey: string;
  /**
   * The number of contributors
   */
  numberOfContributors: number;
  /**
   * The number of pull requests
   */
  numberOfPullRequests: number;
  /**
   * The number of lines added
   */
  linesAdded: number;
  /**
   * The number of lines deleted
   */
  linesDeleted: number;
  /**
   * The total lead time from first commit to deployment end in milliseconds
   */
  leadTime: number;
  pullRequests?: PullRequestCollectionRep | undefined;
  flagReferences?: FlagReferenceCollectionRep | undefined;
  leadTimeStages?: LeadTimeStagesRep | undefined;
};

/** @internal */
export const DeploymentRep$inboundSchema: z.ZodType<
  DeploymentRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  applicationKey: z.string(),
  applicationVersion: z.string(),
  startedAt: z.number().int(),
  endedAt: z.number().int().optional(),
  durationMs: z.number().int().optional(),
  status: z.string(),
  kind: z.string(),
  active: z.boolean(),
  metadata: z.record(z.any()).optional(),
  archived: z.boolean(),
  environmentKey: z.string(),
  numberOfContributors: z.number().int(),
  numberOfPullRequests: z.number().int(),
  linesAdded: z.number().int(),
  linesDeleted: z.number().int(),
  leadTime: z.number().int(),
  pullRequests: z.lazy(() => PullRequestCollectionRep$inboundSchema).optional(),
  flagReferences: FlagReferenceCollectionRep$inboundSchema.optional(),
  leadTimeStages: LeadTimeStagesRep$inboundSchema.optional(),
});

/** @internal */
export type DeploymentRep$Outbound = {
  id: string;
  applicationKey: string;
  applicationVersion: string;
  startedAt: number;
  endedAt?: number | undefined;
  durationMs?: number | undefined;
  status: string;
  kind: string;
  active: boolean;
  metadata?: { [k: string]: any } | undefined;
  archived: boolean;
  environmentKey: string;
  numberOfContributors: number;
  numberOfPullRequests: number;
  linesAdded: number;
  linesDeleted: number;
  leadTime: number;
  pullRequests?: PullRequestCollectionRep$Outbound | undefined;
  flagReferences?: FlagReferenceCollectionRep$Outbound | undefined;
  leadTimeStages?: LeadTimeStagesRep$Outbound | undefined;
};

/** @internal */
export const DeploymentRep$outboundSchema: z.ZodType<
  DeploymentRep$Outbound,
  z.ZodTypeDef,
  DeploymentRep
> = z.object({
  id: z.string(),
  applicationKey: z.string(),
  applicationVersion: z.string(),
  startedAt: z.number().int(),
  endedAt: z.number().int().optional(),
  durationMs: z.number().int().optional(),
  status: z.string(),
  kind: z.string(),
  active: z.boolean(),
  metadata: z.record(z.any()).optional(),
  archived: z.boolean(),
  environmentKey: z.string(),
  numberOfContributors: z.number().int(),
  numberOfPullRequests: z.number().int(),
  linesAdded: z.number().int(),
  linesDeleted: z.number().int(),
  leadTime: z.number().int(),
  pullRequests: z.lazy(() => PullRequestCollectionRep$outboundSchema)
    .optional(),
  flagReferences: FlagReferenceCollectionRep$outboundSchema.optional(),
  leadTimeStages: LeadTimeStagesRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentRep$ {
  /** @deprecated use `DeploymentRep$inboundSchema` instead. */
  export const inboundSchema = DeploymentRep$inboundSchema;
  /** @deprecated use `DeploymentRep$outboundSchema` instead. */
  export const outboundSchema = DeploymentRep$outboundSchema;
  /** @deprecated use `DeploymentRep$Outbound` instead. */
  export type Outbound = DeploymentRep$Outbound;
}

export function deploymentRepToJSON(deploymentRep: DeploymentRep): string {
  return JSON.stringify(DeploymentRep$outboundSchema.parse(deploymentRep));
}

export function deploymentRepFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentRep' from JSON`,
  );
}
