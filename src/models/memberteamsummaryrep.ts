/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type MemberTeamSummaryRep = {
  /**
   * A list of keys of the custom roles this team has access to
   */
  customRoleKeys: Array<string>;
  /**
   * The team key
   */
  key: string;
  links?: { [k: string]: Link } | undefined;
  /**
   * The team name
   */
  name: string;
};

/** @internal */
export const MemberTeamSummaryRep$inboundSchema: z.ZodType<
  MemberTeamSummaryRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  customRoleKeys: z.array(z.string()),
  key: z.string(),
  _links: z.record(Link$inboundSchema).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type MemberTeamSummaryRep$Outbound = {
  customRoleKeys: Array<string>;
  key: string;
  _links?: { [k: string]: Link$Outbound } | undefined;
  name: string;
};

/** @internal */
export const MemberTeamSummaryRep$outboundSchema: z.ZodType<
  MemberTeamSummaryRep$Outbound,
  z.ZodTypeDef,
  MemberTeamSummaryRep
> = z.object({
  customRoleKeys: z.array(z.string()),
  key: z.string(),
  links: z.record(Link$outboundSchema).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MemberTeamSummaryRep$ {
  /** @deprecated use `MemberTeamSummaryRep$inboundSchema` instead. */
  export const inboundSchema = MemberTeamSummaryRep$inboundSchema;
  /** @deprecated use `MemberTeamSummaryRep$outboundSchema` instead. */
  export const outboundSchema = MemberTeamSummaryRep$outboundSchema;
  /** @deprecated use `MemberTeamSummaryRep$Outbound` instead. */
  export type Outbound = MemberTeamSummaryRep$Outbound;
}

export function memberTeamSummaryRepToJSON(
  memberTeamSummaryRep: MemberTeamSummaryRep,
): string {
  return JSON.stringify(
    MemberTeamSummaryRep$outboundSchema.parse(memberTeamSummaryRep),
  );
}

export function memberTeamSummaryRepFromJSON(
  jsonString: string,
): SafeParseResult<MemberTeamSummaryRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MemberTeamSummaryRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MemberTeamSummaryRep' from JSON`,
  );
}
