/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ClientSideAvailability,
  ClientSideAvailability$inboundSchema,
  ClientSideAvailability$Outbound,
  ClientSideAvailability$outboundSchema,
} from "./clientsideavailability.js";
import {
  CustomProperty,
  CustomProperty$inboundSchema,
  CustomProperty$Outbound,
  CustomProperty$outboundSchema,
} from "./customproperty.js";
import {
  Defaults,
  Defaults$inboundSchema,
  Defaults$Outbound,
  Defaults$outboundSchema,
} from "./defaults.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  Variation,
  Variation$inboundSchema,
  Variation$Outbound,
  Variation$outboundSchema,
} from "./variation.js";

/**
 * Kind of feature flag
 */
export const ExpandedFlagRepKind = {
  Boolean: "boolean",
  Multivariate: "multivariate",
} as const;
/**
 * Kind of feature flag
 */
export type ExpandedFlagRepKind = ClosedEnum<typeof ExpandedFlagRepKind>;

export type ExpandedFlagRep = {
  /**
   * A human-friendly name for the feature flag
   */
  name: string;
  /**
   * Kind of feature flag
   */
  kind: ExpandedFlagRepKind;
  /**
   * Description of the feature flag
   */
  description?: string | undefined;
  /**
   * A unique key used to reference the flag in your code
   */
  key: string;
  /**
   * Version of the feature flag
   */
  version: number;
  creationDate: number;
  /**
   * Deprecated, use <code>clientSideAvailability</code>. Whether this flag should be made available to the client-side JavaScript SDK
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  includeInSnippet?: boolean | undefined;
  clientSideAvailability?: ClientSideAvailability | undefined;
  /**
   * An array of possible variations for the flag
   */
  variations: Array<Variation>;
  /**
   * Whether the flag is a temporary flag
   */
  temporary: boolean;
  /**
   * Tags for the feature flag
   */
  tags: Array<string>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The ID of the member who maintains the flag
   */
  maintainerId?: string | undefined;
  maintainer?: MemberSummary | undefined;
  customProperties: { [k: string]: CustomProperty };
  /**
   * Boolean indicating if the feature flag is archived
   */
  archived: boolean;
  archivedDate?: number | undefined;
  defaults?: Defaults | undefined;
};

/** @internal */
export const ExpandedFlagRepKind$inboundSchema: z.ZodNativeEnum<
  typeof ExpandedFlagRepKind
> = z.nativeEnum(ExpandedFlagRepKind);

/** @internal */
export const ExpandedFlagRepKind$outboundSchema: z.ZodNativeEnum<
  typeof ExpandedFlagRepKind
> = ExpandedFlagRepKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpandedFlagRepKind$ {
  /** @deprecated use `ExpandedFlagRepKind$inboundSchema` instead. */
  export const inboundSchema = ExpandedFlagRepKind$inboundSchema;
  /** @deprecated use `ExpandedFlagRepKind$outboundSchema` instead. */
  export const outboundSchema = ExpandedFlagRepKind$outboundSchema;
}

/** @internal */
export const ExpandedFlagRep$inboundSchema: z.ZodType<
  ExpandedFlagRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  kind: ExpandedFlagRepKind$inboundSchema,
  description: z.string().optional(),
  key: z.string(),
  _version: z.number().int(),
  creationDate: z.number().int(),
  includeInSnippet: z.boolean().optional(),
  clientSideAvailability: ClientSideAvailability$inboundSchema.optional(),
  variations: z.array(Variation$inboundSchema),
  temporary: z.boolean(),
  tags: z.array(z.string()),
  _links: z.record(Link$inboundSchema),
  maintainerId: z.string().optional(),
  _maintainer: MemberSummary$inboundSchema.optional(),
  customProperties: z.record(CustomProperty$inboundSchema),
  archived: z.boolean(),
  archivedDate: z.number().int().optional(),
  defaults: Defaults$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_version": "version",
    "_links": "links",
    "_maintainer": "maintainer",
  });
});

/** @internal */
export type ExpandedFlagRep$Outbound = {
  name: string;
  kind: string;
  description?: string | undefined;
  key: string;
  _version: number;
  creationDate: number;
  includeInSnippet?: boolean | undefined;
  clientSideAvailability?: ClientSideAvailability$Outbound | undefined;
  variations: Array<Variation$Outbound>;
  temporary: boolean;
  tags: Array<string>;
  _links: { [k: string]: Link$Outbound };
  maintainerId?: string | undefined;
  _maintainer?: MemberSummary$Outbound | undefined;
  customProperties: { [k: string]: CustomProperty$Outbound };
  archived: boolean;
  archivedDate?: number | undefined;
  defaults?: Defaults$Outbound | undefined;
};

/** @internal */
export const ExpandedFlagRep$outboundSchema: z.ZodType<
  ExpandedFlagRep$Outbound,
  z.ZodTypeDef,
  ExpandedFlagRep
> = z.object({
  name: z.string(),
  kind: ExpandedFlagRepKind$outboundSchema,
  description: z.string().optional(),
  key: z.string(),
  version: z.number().int(),
  creationDate: z.number().int(),
  includeInSnippet: z.boolean().optional(),
  clientSideAvailability: ClientSideAvailability$outboundSchema.optional(),
  variations: z.array(Variation$outboundSchema),
  temporary: z.boolean(),
  tags: z.array(z.string()),
  links: z.record(Link$outboundSchema),
  maintainerId: z.string().optional(),
  maintainer: MemberSummary$outboundSchema.optional(),
  customProperties: z.record(CustomProperty$outboundSchema),
  archived: z.boolean(),
  archivedDate: z.number().int().optional(),
  defaults: Defaults$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    version: "_version",
    links: "_links",
    maintainer: "_maintainer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpandedFlagRep$ {
  /** @deprecated use `ExpandedFlagRep$inboundSchema` instead. */
  export const inboundSchema = ExpandedFlagRep$inboundSchema;
  /** @deprecated use `ExpandedFlagRep$outboundSchema` instead. */
  export const outboundSchema = ExpandedFlagRep$outboundSchema;
  /** @deprecated use `ExpandedFlagRep$Outbound` instead. */
  export type Outbound = ExpandedFlagRep$Outbound;
}

export function expandedFlagRepToJSON(
  expandedFlagRep: ExpandedFlagRep,
): string {
  return JSON.stringify(ExpandedFlagRep$outboundSchema.parse(expandedFlagRep));
}

export function expandedFlagRepFromJSON(
  jsonString: string,
): SafeParseResult<ExpandedFlagRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpandedFlagRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpandedFlagRep' from JSON`,
  );
}
