/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ConditionInput = {
  scheduleKind?: string | undefined;
  executionDate?: number | undefined;
  /**
   * For workflow stages whose scheduled execution is relative, how far in the future the stage should start.
   */
  waitDuration?: number | undefined;
  waitDurationUnit?: string | undefined;
  /**
   * Whether the workflow stage should be executed immediately
   */
  executeNow?: boolean | undefined;
  /**
   * A description of the approval required for this stage
   */
  description?: string | undefined;
  /**
   * A list of member IDs for the members to request approval from for this stage
   */
  notifyMemberIds?: Array<string> | undefined;
  /**
   * A list of team keys for the teams to request approval from for this stage
   */
  notifyTeamKeys?: Array<string> | undefined;
  kind?: string | undefined;
};

/** @internal */
export const ConditionInput$inboundSchema: z.ZodType<
  ConditionInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduleKind: z.string().optional(),
  executionDate: z.number().int().optional(),
  waitDuration: z.number().int().optional(),
  waitDurationUnit: z.string().optional(),
  executeNow: z.boolean().optional(),
  description: z.string().optional(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  kind: z.string().optional(),
});

/** @internal */
export type ConditionInput$Outbound = {
  scheduleKind?: string | undefined;
  executionDate?: number | undefined;
  waitDuration?: number | undefined;
  waitDurationUnit?: string | undefined;
  executeNow?: boolean | undefined;
  description?: string | undefined;
  notifyMemberIds?: Array<string> | undefined;
  notifyTeamKeys?: Array<string> | undefined;
  kind?: string | undefined;
};

/** @internal */
export const ConditionInput$outboundSchema: z.ZodType<
  ConditionInput$Outbound,
  z.ZodTypeDef,
  ConditionInput
> = z.object({
  scheduleKind: z.string().optional(),
  executionDate: z.number().int().optional(),
  waitDuration: z.number().int().optional(),
  waitDurationUnit: z.string().optional(),
  executeNow: z.boolean().optional(),
  description: z.string().optional(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  kind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConditionInput$ {
  /** @deprecated use `ConditionInput$inboundSchema` instead. */
  export const inboundSchema = ConditionInput$inboundSchema;
  /** @deprecated use `ConditionInput$outboundSchema` instead. */
  export const outboundSchema = ConditionInput$outboundSchema;
  /** @deprecated use `ConditionInput$Outbound` instead. */
  export type Outbound = ConditionInput$Outbound;
}

export function conditionInputToJSON(conditionInput: ConditionInput): string {
  return JSON.stringify(ConditionInput$outboundSchema.parse(conditionInput));
}

export function conditionInputFromJSON(
  jsonString: string,
): SafeParseResult<ConditionInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConditionInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConditionInput' from JSON`,
  );
}
