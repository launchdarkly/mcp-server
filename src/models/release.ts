/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ReleasePhase,
  ReleasePhase$inboundSchema,
  ReleasePhase$Outbound,
  ReleasePhase$outboundSchema,
} from "./releasephase.js";

export type Release = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The release pipeline name
   */
  name: string;
  /**
   * The release pipeline key
   */
  releasePipelineKey: string;
  /**
   * The release pipeline description
   */
  releasePipelineDescription: string;
  /**
   * An ordered list of the release pipeline phases
   */
  phases: Array<ReleasePhase>;
  /**
   * The release version
   */
  version: number;
  /**
   * The chosen release variation ID to use across all phases of a release
   */
  releaseVariationId?: string | undefined;
  canceledAt?: number | undefined;
};

/** @internal */
export const Release$inboundSchema: z.ZodType<Release, z.ZodTypeDef, unknown> =
  z.object({
    _links: z.record(Link$inboundSchema).optional(),
    name: z.string(),
    releasePipelineKey: z.string(),
    releasePipelineDescription: z.string(),
    phases: z.array(ReleasePhase$inboundSchema),
    _version: z.number().int(),
    _releaseVariationId: z.string().optional(),
    _canceledAt: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_version": "version",
      "_releaseVariationId": "releaseVariationId",
      "_canceledAt": "canceledAt",
    });
  });

/** @internal */
export type Release$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  name: string;
  releasePipelineKey: string;
  releasePipelineDescription: string;
  phases: Array<ReleasePhase$Outbound>;
  _version: number;
  _releaseVariationId?: string | undefined;
  _canceledAt?: number | undefined;
};

/** @internal */
export const Release$outboundSchema: z.ZodType<
  Release$Outbound,
  z.ZodTypeDef,
  Release
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  name: z.string(),
  releasePipelineKey: z.string(),
  releasePipelineDescription: z.string(),
  phases: z.array(ReleasePhase$outboundSchema),
  version: z.number().int(),
  releaseVariationId: z.string().optional(),
  canceledAt: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    version: "_version",
    releaseVariationId: "_releaseVariationId",
    canceledAt: "_canceledAt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Release$ {
  /** @deprecated use `Release$inboundSchema` instead. */
  export const inboundSchema = Release$inboundSchema;
  /** @deprecated use `Release$outboundSchema` instead. */
  export const outboundSchema = Release$outboundSchema;
  /** @deprecated use `Release$Outbound` instead. */
  export type Outbound = Release$Outbound;
}

export function releaseToJSON(release: Release): string {
  return JSON.stringify(Release$outboundSchema.parse(release));
}

export function releaseFromJSON(
  jsonString: string,
): SafeParseResult<Release, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Release$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Release' from JSON`,
  );
}
