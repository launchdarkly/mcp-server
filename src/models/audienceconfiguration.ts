/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReleaseGuardianConfiguration,
  ReleaseGuardianConfiguration$inboundSchema,
  ReleaseGuardianConfiguration$Outbound,
  ReleaseGuardianConfiguration$outboundSchema,
} from "./releaseguardianconfiguration.js";

export type AudienceConfiguration = {
  releaseStrategy: string;
  /**
   * Whether or not the audience requires approval
   */
  requireApproval: boolean;
  /**
   * An array of member IDs. These members are notified to review the approval request.
   */
  notifyMemberIds?: Array<string> | undefined;
  /**
   * An array of team keys. The members of these teams are notified to review the approval request.
   */
  notifyTeamKeys?: Array<string> | undefined;
  releaseGuardianConfiguration?: ReleaseGuardianConfiguration | undefined;
};

/** @internal */
export const AudienceConfiguration$inboundSchema: z.ZodType<
  AudienceConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  releaseStrategy: z.string(),
  requireApproval: z.boolean(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  releaseGuardianConfiguration: ReleaseGuardianConfiguration$inboundSchema
    .optional(),
});

/** @internal */
export type AudienceConfiguration$Outbound = {
  releaseStrategy: string;
  requireApproval: boolean;
  notifyMemberIds?: Array<string> | undefined;
  notifyTeamKeys?: Array<string> | undefined;
  releaseGuardianConfiguration?:
    | ReleaseGuardianConfiguration$Outbound
    | undefined;
};

/** @internal */
export const AudienceConfiguration$outboundSchema: z.ZodType<
  AudienceConfiguration$Outbound,
  z.ZodTypeDef,
  AudienceConfiguration
> = z.object({
  releaseStrategy: z.string(),
  requireApproval: z.boolean(),
  notifyMemberIds: z.array(z.string()).optional(),
  notifyTeamKeys: z.array(z.string()).optional(),
  releaseGuardianConfiguration: ReleaseGuardianConfiguration$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AudienceConfiguration$ {
  /** @deprecated use `AudienceConfiguration$inboundSchema` instead. */
  export const inboundSchema = AudienceConfiguration$inboundSchema;
  /** @deprecated use `AudienceConfiguration$outboundSchema` instead. */
  export const outboundSchema = AudienceConfiguration$outboundSchema;
  /** @deprecated use `AudienceConfiguration$Outbound` instead. */
  export type Outbound = AudienceConfiguration$Outbound;
}

export function audienceConfigurationToJSON(
  audienceConfiguration: AudienceConfiguration,
): string {
  return JSON.stringify(
    AudienceConfiguration$outboundSchema.parse(audienceConfiguration),
  );
}

export function audienceConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<AudienceConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AudienceConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AudienceConfiguration' from JSON`,
  );
}
