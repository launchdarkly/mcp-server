/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MetricSeen,
  MetricSeen$inboundSchema,
  MetricSeen$Outbound,
  MetricSeen$outboundSchema,
} from "./metricseen.js";
import {
  SlicedResultsRep,
  SlicedResultsRep$inboundSchema,
  SlicedResultsRep$Outbound,
  SlicedResultsRep$outboundSchema,
} from "./slicedresultsrep.js";
import {
  TreatmentResultRep,
  TreatmentResultRep$inboundSchema,
  TreatmentResultRep$Outbound,
  TreatmentResultRep$outboundSchema,
} from "./treatmentresultrep.js";

export type ExperimentBayesianResultsRep = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * Deprecated, use <code>results</code> instead. Only populated when response does not contain results sliced by multiple attributes.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  treatmentResults?: Array<TreatmentResultRep> | undefined;
  metricSeen?: MetricSeen | undefined;
  /**
   * The probability of a Sample Ratio Mismatch
   */
  probabilityOfMismatch?: number | undefined;
  /**
   * A list of attribute values and their corresponding treatment results
   */
  results?: Array<SlicedResultsRep> | undefined;
};

/** @internal */
export const ExperimentBayesianResultsRep$inboundSchema: z.ZodType<
  ExperimentBayesianResultsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  treatmentResults: z.array(TreatmentResultRep$inboundSchema).optional(),
  metricSeen: MetricSeen$inboundSchema.optional(),
  probabilityOfMismatch: z.number().optional(),
  results: z.array(SlicedResultsRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ExperimentBayesianResultsRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  treatmentResults?: Array<TreatmentResultRep$Outbound> | undefined;
  metricSeen?: MetricSeen$Outbound | undefined;
  probabilityOfMismatch?: number | undefined;
  results?: Array<SlicedResultsRep$Outbound> | undefined;
};

/** @internal */
export const ExperimentBayesianResultsRep$outboundSchema: z.ZodType<
  ExperimentBayesianResultsRep$Outbound,
  z.ZodTypeDef,
  ExperimentBayesianResultsRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  treatmentResults: z.array(TreatmentResultRep$outboundSchema).optional(),
  metricSeen: MetricSeen$outboundSchema.optional(),
  probabilityOfMismatch: z.number().optional(),
  results: z.array(SlicedResultsRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentBayesianResultsRep$ {
  /** @deprecated use `ExperimentBayesianResultsRep$inboundSchema` instead. */
  export const inboundSchema = ExperimentBayesianResultsRep$inboundSchema;
  /** @deprecated use `ExperimentBayesianResultsRep$outboundSchema` instead. */
  export const outboundSchema = ExperimentBayesianResultsRep$outboundSchema;
  /** @deprecated use `ExperimentBayesianResultsRep$Outbound` instead. */
  export type Outbound = ExperimentBayesianResultsRep$Outbound;
}

export function experimentBayesianResultsRepToJSON(
  experimentBayesianResultsRep: ExperimentBayesianResultsRep,
): string {
  return JSON.stringify(
    ExperimentBayesianResultsRep$outboundSchema.parse(
      experimentBayesianResultsRep,
    ),
  );
}

export function experimentBayesianResultsRepFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentBayesianResultsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentBayesianResultsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentBayesianResultsRep' from JSON`,
  );
}
