/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SDKVersionRep,
  SDKVersionRep$inboundSchema,
  SDKVersionRep$Outbound,
  SDKVersionRep$outboundSchema,
} from "./sdkversionrep.js";

export type SDKVersionListRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: any };
  /**
   * The list of SDK names and versions
   */
  sdkVersions: Array<SDKVersionRep>;
};

/** @internal */
export const SDKVersionListRep$inboundSchema: z.ZodType<
  SDKVersionListRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(z.any()),
  sdkVersions: z.array(SDKVersionRep$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SDKVersionListRep$Outbound = {
  _links: { [k: string]: any };
  sdkVersions: Array<SDKVersionRep$Outbound>;
};

/** @internal */
export const SDKVersionListRep$outboundSchema: z.ZodType<
  SDKVersionListRep$Outbound,
  z.ZodTypeDef,
  SDKVersionListRep
> = z.object({
  links: z.record(z.any()),
  sdkVersions: z.array(SDKVersionRep$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SDKVersionListRep$ {
  /** @deprecated use `SDKVersionListRep$inboundSchema` instead. */
  export const inboundSchema = SDKVersionListRep$inboundSchema;
  /** @deprecated use `SDKVersionListRep$outboundSchema` instead. */
  export const outboundSchema = SDKVersionListRep$outboundSchema;
  /** @deprecated use `SDKVersionListRep$Outbound` instead. */
  export type Outbound = SDKVersionListRep$Outbound;
}

export function sdkVersionListRepToJSON(
  sdkVersionListRep: SDKVersionListRep,
): string {
  return JSON.stringify(
    SDKVersionListRep$outboundSchema.parse(sdkVersionListRep),
  );
}

export function sdkVersionListRepFromJSON(
  jsonString: string,
): SafeParseResult<SDKVersionListRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SDKVersionListRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SDKVersionListRep' from JSON`,
  );
}
