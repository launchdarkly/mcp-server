/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ActionOutput = {
  /**
   * The type of action for this stage
   */
  kind: string;
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const ActionOutput$inboundSchema: z.ZodType<
  ActionOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string(),
  instructions: z.array(z.record(z.any())),
});

/** @internal */
export type ActionOutput$Outbound = {
  kind: string;
  instructions: Array<{ [k: string]: any }>;
};

/** @internal */
export const ActionOutput$outboundSchema: z.ZodType<
  ActionOutput$Outbound,
  z.ZodTypeDef,
  ActionOutput
> = z.object({
  kind: z.string(),
  instructions: z.array(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionOutput$ {
  /** @deprecated use `ActionOutput$inboundSchema` instead. */
  export const inboundSchema = ActionOutput$inboundSchema;
  /** @deprecated use `ActionOutput$outboundSchema` instead. */
  export const outboundSchema = ActionOutput$outboundSchema;
  /** @deprecated use `ActionOutput$Outbound` instead. */
  export type Outbound = ActionOutput$Outbound;
}

export function actionOutputToJSON(actionOutput: ActionOutput): string {
  return JSON.stringify(ActionOutput$outboundSchema.parse(actionOutput));
}

export function actionOutputFromJSON(
  jsonString: string,
): SafeParseResult<ActionOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionOutput' from JSON`,
  );
}
