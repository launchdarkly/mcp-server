/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  MetricInGroupResultsRep,
  MetricInGroupResultsRep$inboundSchema,
  MetricInGroupResultsRep$Outbound,
  MetricInGroupResultsRep$outboundSchema,
} from "./metricingroupresultsrep.js";

export type MetricGroupResultsRep = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * An ordered list of the metrics in this metric group, and each of their results
   */
  metrics: Array<MetricInGroupResultsRep>;
};

/** @internal */
export const MetricGroupResultsRep$inboundSchema: z.ZodType<
  MetricGroupResultsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema),
  metrics: z.array(MetricInGroupResultsRep$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type MetricGroupResultsRep$Outbound = {
  _links: { [k: string]: Link$Outbound };
  metrics: Array<MetricInGroupResultsRep$Outbound>;
};

/** @internal */
export const MetricGroupResultsRep$outboundSchema: z.ZodType<
  MetricGroupResultsRep$Outbound,
  z.ZodTypeDef,
  MetricGroupResultsRep
> = z.object({
  links: z.record(Link$outboundSchema),
  metrics: z.array(MetricInGroupResultsRep$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricGroupResultsRep$ {
  /** @deprecated use `MetricGroupResultsRep$inboundSchema` instead. */
  export const inboundSchema = MetricGroupResultsRep$inboundSchema;
  /** @deprecated use `MetricGroupResultsRep$outboundSchema` instead. */
  export const outboundSchema = MetricGroupResultsRep$outboundSchema;
  /** @deprecated use `MetricGroupResultsRep$Outbound` instead. */
  export type Outbound = MetricGroupResultsRep$Outbound;
}

export function metricGroupResultsRepToJSON(
  metricGroupResultsRep: MetricGroupResultsRep,
): string {
  return JSON.stringify(
    MetricGroupResultsRep$outboundSchema.parse(metricGroupResultsRep),
  );
}

export function metricGroupResultsRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricGroupResultsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricGroupResultsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricGroupResultsRep' from JSON`,
  );
}
