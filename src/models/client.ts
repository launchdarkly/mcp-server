/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type Client = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * Client name
   */
  name: string;
  /**
   * Client description
   */
  description?: string | undefined;
  /**
   * The account ID the client is registered under
   */
  accountId: string;
  /**
   * The client's unique ID
   */
  clientId: string;
  /**
   * The client secret. This will only be shown upon creation.
   */
  clientSecret?: string | undefined;
  /**
   * The client's redirect URI
   */
  redirectUri: string;
  creationDate: number;
};

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z
  .object({
    _links: z.record(Link$inboundSchema),
    name: z.string(),
    description: z.string().optional(),
    _accountId: z.string(),
    _clientId: z.string(),
    _clientSecret: z.string().optional(),
    redirectUri: z.string(),
    _creationDate: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_accountId": "accountId",
      "_clientId": "clientId",
      "_clientSecret": "clientSecret",
      "_creationDate": "creationDate",
    });
  });

/** @internal */
export type Client$Outbound = {
  _links: { [k: string]: Link$Outbound };
  name: string;
  description?: string | undefined;
  _accountId: string;
  _clientId: string;
  _clientSecret?: string | undefined;
  redirectUri: string;
  _creationDate: number;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<
  Client$Outbound,
  z.ZodTypeDef,
  Client
> = z.object({
  links: z.record(Link$outboundSchema),
  name: z.string(),
  description: z.string().optional(),
  accountId: z.string(),
  clientId: z.string(),
  clientSecret: z.string().optional(),
  redirectUri: z.string(),
  creationDate: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    accountId: "_accountId",
    clientId: "_clientId",
    clientSecret: "_clientSecret",
    creationDate: "_creationDate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
  /** @deprecated use `Client$inboundSchema` instead. */
  export const inboundSchema = Client$inboundSchema;
  /** @deprecated use `Client$outboundSchema` instead. */
  export const outboundSchema = Client$outboundSchema;
  /** @deprecated use `Client$Outbound` instead. */
  export type Outbound = Client$Outbound;
}

export function clientToJSON(client: Client): string {
  return JSON.stringify(Client$outboundSchema.parse(client));
}

export function clientFromJSON(
  jsonString: string,
): SafeParseResult<Client, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Client$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Client' from JSON`,
  );
}
