/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  StageOutput,
  StageOutput$inboundSchema,
  StageOutput$Outbound,
  StageOutput$outboundSchema,
} from "./stageoutput.js";

export type WorkflowTemplateOutput = {
  id: string;
  key: string;
  name?: string | undefined;
  creationDate: number;
  ownerId: string;
  maintainerId: string;
  links: { [k: string]: Link };
  description?: string | undefined;
  stages?: Array<StageOutput> | undefined;
};

/** @internal */
export const WorkflowTemplateOutput$inboundSchema: z.ZodType<
  WorkflowTemplateOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _key: z.string(),
  name: z.string().optional(),
  _creationDate: z.number().int(),
  _ownerId: z.string(),
  _maintainerId: z.string(),
  _links: z.record(Link$inboundSchema),
  description: z.string().optional(),
  stages: z.array(StageOutput$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_key": "key",
    "_creationDate": "creationDate",
    "_ownerId": "ownerId",
    "_maintainerId": "maintainerId",
    "_links": "links",
  });
});

/** @internal */
export type WorkflowTemplateOutput$Outbound = {
  _id: string;
  _key: string;
  name?: string | undefined;
  _creationDate: number;
  _ownerId: string;
  _maintainerId: string;
  _links: { [k: string]: Link$Outbound };
  description?: string | undefined;
  stages?: Array<StageOutput$Outbound> | undefined;
};

/** @internal */
export const WorkflowTemplateOutput$outboundSchema: z.ZodType<
  WorkflowTemplateOutput$Outbound,
  z.ZodTypeDef,
  WorkflowTemplateOutput
> = z.object({
  id: z.string(),
  key: z.string(),
  name: z.string().optional(),
  creationDate: z.number().int(),
  ownerId: z.string(),
  maintainerId: z.string(),
  links: z.record(Link$outboundSchema),
  description: z.string().optional(),
  stages: z.array(StageOutput$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    key: "_key",
    creationDate: "_creationDate",
    ownerId: "_ownerId",
    maintainerId: "_maintainerId",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowTemplateOutput$ {
  /** @deprecated use `WorkflowTemplateOutput$inboundSchema` instead. */
  export const inboundSchema = WorkflowTemplateOutput$inboundSchema;
  /** @deprecated use `WorkflowTemplateOutput$outboundSchema` instead. */
  export const outboundSchema = WorkflowTemplateOutput$outboundSchema;
  /** @deprecated use `WorkflowTemplateOutput$Outbound` instead. */
  export type Outbound = WorkflowTemplateOutput$Outbound;
}

export function workflowTemplateOutputToJSON(
  workflowTemplateOutput: WorkflowTemplateOutput,
): string {
  return JSON.stringify(
    WorkflowTemplateOutput$outboundSchema.parse(workflowTemplateOutput),
  );
}

export function workflowTemplateOutputFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowTemplateOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowTemplateOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowTemplateOutput' from JSON`,
  );
}
