/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Experiment,
  Experiment$inboundSchema,
  Experiment$Outbound,
  Experiment$outboundSchema,
} from "./experiment.js";
import {
  RelatedExperimentRep,
  RelatedExperimentRep$inboundSchema,
  RelatedExperimentRep$Outbound,
  RelatedExperimentRep$outboundSchema,
} from "./relatedexperimentrep.js";

export const HoldoutRepStatus = {
  Created: "created",
  Enabled: "enabled",
  Running: "running",
  Ended: "ended",
} as const;
export type HoldoutRepStatus = ClosedEnum<typeof HoldoutRepStatus>;

export type HoldoutRep = {
  id: string;
  status: HoldoutRepStatus;
  description?: string | undefined;
  /**
   * The percentage of traffic allocated to this holdout.
   */
  holdoutAmount: string;
  createdAt: number;
  updatedAt: number;
  baseExperiment: Experiment;
  experiments?: Array<RelatedExperimentRep> | undefined;
};

/** @internal */
export const HoldoutRepStatus$inboundSchema: z.ZodNativeEnum<
  typeof HoldoutRepStatus
> = z.nativeEnum(HoldoutRepStatus);

/** @internal */
export const HoldoutRepStatus$outboundSchema: z.ZodNativeEnum<
  typeof HoldoutRepStatus
> = HoldoutRepStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutRepStatus$ {
  /** @deprecated use `HoldoutRepStatus$inboundSchema` instead. */
  export const inboundSchema = HoldoutRepStatus$inboundSchema;
  /** @deprecated use `HoldoutRepStatus$outboundSchema` instead. */
  export const outboundSchema = HoldoutRepStatus$outboundSchema;
}

/** @internal */
export const HoldoutRep$inboundSchema: z.ZodType<
  HoldoutRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  status: HoldoutRepStatus$inboundSchema,
  description: z.string().optional(),
  holdoutAmount: z.string(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  baseExperiment: Experiment$inboundSchema,
  experiments: z.array(RelatedExperimentRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type HoldoutRep$Outbound = {
  _id: string;
  status: string;
  description?: string | undefined;
  holdoutAmount: string;
  createdAt: number;
  updatedAt: number;
  baseExperiment: Experiment$Outbound;
  experiments?: Array<RelatedExperimentRep$Outbound> | undefined;
};

/** @internal */
export const HoldoutRep$outboundSchema: z.ZodType<
  HoldoutRep$Outbound,
  z.ZodTypeDef,
  HoldoutRep
> = z.object({
  id: z.string(),
  status: HoldoutRepStatus$outboundSchema,
  description: z.string().optional(),
  holdoutAmount: z.string(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  baseExperiment: Experiment$outboundSchema,
  experiments: z.array(RelatedExperimentRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HoldoutRep$ {
  /** @deprecated use `HoldoutRep$inboundSchema` instead. */
  export const inboundSchema = HoldoutRep$inboundSchema;
  /** @deprecated use `HoldoutRep$outboundSchema` instead. */
  export const outboundSchema = HoldoutRep$outboundSchema;
  /** @deprecated use `HoldoutRep$Outbound` instead. */
  export type Outbound = HoldoutRep$Outbound;
}

export function holdoutRepToJSON(holdoutRep: HoldoutRep): string {
  return JSON.stringify(HoldoutRep$outboundSchema.parse(holdoutRep));
}

export function holdoutRepFromJSON(
  jsonString: string,
): SafeParseResult<HoldoutRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HoldoutRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HoldoutRep' from JSON`,
  );
}
