/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IntegrationDeliveryConfigurationLinks,
  IntegrationDeliveryConfigurationLinks$inboundSchema,
  IntegrationDeliveryConfigurationLinks$Outbound,
  IntegrationDeliveryConfigurationLinks$outboundSchema,
} from "./integrationdeliveryconfigurationlinks.js";

export type IntegrationDeliveryConfiguration = {
  links: IntegrationDeliveryConfigurationLinks;
  /**
   * The integration ID
   */
  id: string;
  /**
   * The integration key
   */
  integrationKey: string;
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The environment key
   */
  environmentKey: string;
  config: { [k: string]: any };
  /**
   * Whether the configuration is turned on
   */
  on: boolean;
  /**
   * List of tags for this configuration
   */
  tags: Array<string>;
  /**
   * Name of the configuration
   */
  name: string;
  /**
   * Version of the current configuration
   */
  version: number;
  access?: Access | undefined;
};

/** @internal */
export const IntegrationDeliveryConfiguration$inboundSchema: z.ZodType<
  IntegrationDeliveryConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: IntegrationDeliveryConfigurationLinks$inboundSchema,
  _id: z.string(),
  integrationKey: z.string(),
  projectKey: z.string(),
  environmentKey: z.string(),
  config: z.record(z.any()),
  on: z.boolean(),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  _access: Access$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
    "_access": "access",
  });
});

/** @internal */
export type IntegrationDeliveryConfiguration$Outbound = {
  _links: IntegrationDeliveryConfigurationLinks$Outbound;
  _id: string;
  integrationKey: string;
  projectKey: string;
  environmentKey: string;
  config: { [k: string]: any };
  on: boolean;
  tags: Array<string>;
  name: string;
  version: number;
  _access?: Access$Outbound | undefined;
};

/** @internal */
export const IntegrationDeliveryConfiguration$outboundSchema: z.ZodType<
  IntegrationDeliveryConfiguration$Outbound,
  z.ZodTypeDef,
  IntegrationDeliveryConfiguration
> = z.object({
  links: IntegrationDeliveryConfigurationLinks$outboundSchema,
  id: z.string(),
  integrationKey: z.string(),
  projectKey: z.string(),
  environmentKey: z.string(),
  config: z.record(z.any()),
  on: z.boolean(),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  access: Access$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationDeliveryConfiguration$ {
  /** @deprecated use `IntegrationDeliveryConfiguration$inboundSchema` instead. */
  export const inboundSchema = IntegrationDeliveryConfiguration$inboundSchema;
  /** @deprecated use `IntegrationDeliveryConfiguration$outboundSchema` instead. */
  export const outboundSchema = IntegrationDeliveryConfiguration$outboundSchema;
  /** @deprecated use `IntegrationDeliveryConfiguration$Outbound` instead. */
  export type Outbound = IntegrationDeliveryConfiguration$Outbound;
}

export function integrationDeliveryConfigurationToJSON(
  integrationDeliveryConfiguration: IntegrationDeliveryConfiguration,
): string {
  return JSON.stringify(
    IntegrationDeliveryConfiguration$outboundSchema.parse(
      integrationDeliveryConfiguration,
    ),
  );
}

export function integrationDeliveryConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationDeliveryConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationDeliveryConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationDeliveryConfiguration' from JSON`,
  );
}
