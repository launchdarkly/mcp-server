/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ApplicationVersionRep = {
  access?: Access | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * Version of the application version
   */
  version?: number | undefined;
  /**
   * Whether the application version was automatically created, because it was included in a context when a LaunchDarkly SDK evaluated a feature flag, or if the application version was created through the LaunchDarkly UI or REST API.
   */
  autoAdded: boolean;
  creationDate?: number | undefined;
  /**
   * The unique identifier of this application version
   */
  key: string;
  /**
   * The name of this version
   */
  name: string;
  /**
   * Whether this version is supported. Only applicable if the application <code>kind</code> is <code>mobile</code>.
   */
  supported?: boolean | undefined;
};

/** @internal */
export const ApplicationVersionRep$inboundSchema: z.ZodType<
  ApplicationVersionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _access: Access$inboundSchema.optional(),
  _links: z.record(Link$inboundSchema).optional(),
  _version: z.number().int().optional(),
  autoAdded: z.boolean(),
  creationDate: z.number().int().optional(),
  key: z.string(),
  name: z.string(),
  supported: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_access": "access",
    "_links": "links",
    "_version": "version",
  });
});

/** @internal */
export type ApplicationVersionRep$Outbound = {
  _access?: Access$Outbound | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _version?: number | undefined;
  autoAdded: boolean;
  creationDate?: number | undefined;
  key: string;
  name: string;
  supported?: boolean | undefined;
};

/** @internal */
export const ApplicationVersionRep$outboundSchema: z.ZodType<
  ApplicationVersionRep$Outbound,
  z.ZodTypeDef,
  ApplicationVersionRep
> = z.object({
  access: Access$outboundSchema.optional(),
  links: z.record(Link$outboundSchema).optional(),
  version: z.number().int().optional(),
  autoAdded: z.boolean(),
  creationDate: z.number().int().optional(),
  key: z.string(),
  name: z.string(),
  supported: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    access: "_access",
    links: "_links",
    version: "_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationVersionRep$ {
  /** @deprecated use `ApplicationVersionRep$inboundSchema` instead. */
  export const inboundSchema = ApplicationVersionRep$inboundSchema;
  /** @deprecated use `ApplicationVersionRep$outboundSchema` instead. */
  export const outboundSchema = ApplicationVersionRep$outboundSchema;
  /** @deprecated use `ApplicationVersionRep$Outbound` instead. */
  export type Outbound = ApplicationVersionRep$Outbound;
}

export function applicationVersionRepToJSON(
  applicationVersionRep: ApplicationVersionRep,
): string {
  return JSON.stringify(
    ApplicationVersionRep$outboundSchema.parse(applicationVersionRep),
  );
}

export function applicationVersionRepFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationVersionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationVersionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationVersionRep' from JSON`,
  );
}
