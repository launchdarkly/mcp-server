/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import {
  ClientSideAvailability,
  ClientSideAvailability$inboundSchema,
  ClientSideAvailability$Outbound,
  ClientSideAvailability$outboundSchema,
} from "./clientsideavailability.js";
import {
  Environments,
  Environments$inboundSchema,
  Environments$Outbound,
  Environments$outboundSchema,
} from "./environments.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type Project = {
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The ID of this project
   */
  id: string;
  /**
   * The key of this project
   */
  key: string;
  /**
   * Whether or not flags created in this project are made available to the client-side JavaScript SDK by default
   */
  includeInSnippetByDefault: boolean;
  defaultClientSideAvailability?: ClientSideAvailability | undefined;
  /**
   * A human-friendly name for the project
   */
  name: string;
  access?: Access | undefined;
  /**
   * A list of tags for the project
   */
  tags: Array<string>;
  /**
   * The key of the default release pipeline for this project
   */
  defaultReleasePipelineKey?: string | undefined;
  environments?: Environments | undefined;
};

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> =
  z.object({
    _links: z.record(Link$inboundSchema),
    _id: z.string(),
    key: z.string(),
    includeInSnippetByDefault: z.boolean(),
    defaultClientSideAvailability: ClientSideAvailability$inboundSchema
      .optional(),
    name: z.string(),
    _access: Access$inboundSchema.optional(),
    tags: z.array(z.string()),
    defaultReleasePipelineKey: z.string().optional(),
    environments: Environments$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
      "_id": "id",
      "_access": "access",
    });
  });

/** @internal */
export type Project$Outbound = {
  _links: { [k: string]: Link$Outbound };
  _id: string;
  key: string;
  includeInSnippetByDefault: boolean;
  defaultClientSideAvailability?: ClientSideAvailability$Outbound | undefined;
  name: string;
  _access?: Access$Outbound | undefined;
  tags: Array<string>;
  defaultReleasePipelineKey?: string | undefined;
  environments?: Environments$Outbound | undefined;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<
  Project$Outbound,
  z.ZodTypeDef,
  Project
> = z.object({
  links: z.record(Link$outboundSchema),
  id: z.string(),
  key: z.string(),
  includeInSnippetByDefault: z.boolean(),
  defaultClientSideAvailability: ClientSideAvailability$outboundSchema
    .optional(),
  name: z.string(),
  access: Access$outboundSchema.optional(),
  tags: z.array(z.string()),
  defaultReleasePipelineKey: z.string().optional(),
  environments: Environments$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
  /** @deprecated use `Project$inboundSchema` instead. */
  export const inboundSchema = Project$inboundSchema;
  /** @deprecated use `Project$outboundSchema` instead. */
  export const outboundSchema = Project$outboundSchema;
  /** @deprecated use `Project$Outbound` instead. */
  export type Outbound = Project$Outbound;
}

export function projectToJSON(project: Project): string {
  return JSON.stringify(Project$outboundSchema.parse(project));
}

export function projectFromJSON(
  jsonString: string,
): SafeParseResult<Project, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Project$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Project' from JSON`,
  );
}
