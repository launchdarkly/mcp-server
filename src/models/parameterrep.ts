/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ParameterRep = {
  variationId?: string | undefined;
  flagKey?: string | undefined;
};

/** @internal */
export const ParameterRep$inboundSchema: z.ZodType<
  ParameterRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  variationId: z.string().optional(),
  flagKey: z.string().optional(),
});

/** @internal */
export type ParameterRep$Outbound = {
  variationId?: string | undefined;
  flagKey?: string | undefined;
};

/** @internal */
export const ParameterRep$outboundSchema: z.ZodType<
  ParameterRep$Outbound,
  z.ZodTypeDef,
  ParameterRep
> = z.object({
  variationId: z.string().optional(),
  flagKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParameterRep$ {
  /** @deprecated use `ParameterRep$inboundSchema` instead. */
  export const inboundSchema = ParameterRep$inboundSchema;
  /** @deprecated use `ParameterRep$outboundSchema` instead. */
  export const outboundSchema = ParameterRep$outboundSchema;
  /** @deprecated use `ParameterRep$Outbound` instead. */
  export type Outbound = ParameterRep$Outbound;
}

export function parameterRepToJSON(parameterRep: ParameterRep): string {
  return JSON.stringify(ParameterRep$outboundSchema.parse(parameterRep));
}

export function parameterRepFromJSON(
  jsonString: string,
): SafeParseResult<ParameterRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParameterRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParameterRep' from JSON`,
  );
}
