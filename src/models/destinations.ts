/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Destination,
  Destination$inboundSchema,
  Destination$Outbound,
  Destination$outboundSchema,
} from "./destination.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type Destinations = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * An array of Data Export destinations
   */
  items?: Array<Destination> | undefined;
};

/** @internal */
export const Destinations$inboundSchema: z.ZodType<
  Destinations,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  items: z.array(Destination$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type Destinations$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  items?: Array<Destination$Outbound> | undefined;
};

/** @internal */
export const Destinations$outboundSchema: z.ZodType<
  Destinations$Outbound,
  z.ZodTypeDef,
  Destinations
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  items: z.array(Destination$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Destinations$ {
  /** @deprecated use `Destinations$inboundSchema` instead. */
  export const inboundSchema = Destinations$inboundSchema;
  /** @deprecated use `Destinations$outboundSchema` instead. */
  export const outboundSchema = Destinations$outboundSchema;
  /** @deprecated use `Destinations$Outbound` instead. */
  export type Outbound = Destinations$Outbound;
}

export function destinationsToJSON(destinations: Destinations): string {
  return JSON.stringify(Destinations$outboundSchema.parse(destinations));
}

export function destinationsFromJSON(
  jsonString: string,
): SafeParseResult<Destinations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Destinations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Destinations' from JSON`,
  );
}
