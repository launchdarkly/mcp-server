/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The type of repository
 */
export const StatisticRepType = {
  Bitbucket: "bitbucket",
  Custom: "custom",
  Github: "github",
  Gitlab: "gitlab",
} as const;
/**
 * The type of repository
 */
export type StatisticRepType = ClosedEnum<typeof StatisticRepType>;

export type StatisticRep = {
  /**
   * The repository name
   */
  name: string;
  /**
   * The type of repository
   */
  type: StatisticRepType;
  /**
   * A URL to access the repository
   */
  sourceLink: string;
  /**
   * The repository's default branch
   */
  defaultBranch: string;
  /**
   * Whether or not a repository is enabled for code reference scanning
   */
  enabled: boolean;
  /**
   * The version of the repository's saved information
   */
  version: number;
  /**
   * The number of code reference hunks in which the flag appears in this repository
   */
  hunkCount: number;
  /**
   * The number of files in which the flag appears in this repository
   */
  fileCount: number;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  latestCommitTime?: number | undefined;
};

/** @internal */
export const StatisticRepType$inboundSchema: z.ZodNativeEnum<
  typeof StatisticRepType
> = z.nativeEnum(StatisticRepType);

/** @internal */
export const StatisticRepType$outboundSchema: z.ZodNativeEnum<
  typeof StatisticRepType
> = StatisticRepType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatisticRepType$ {
  /** @deprecated use `StatisticRepType$inboundSchema` instead. */
  export const inboundSchema = StatisticRepType$inboundSchema;
  /** @deprecated use `StatisticRepType$outboundSchema` instead. */
  export const outboundSchema = StatisticRepType$outboundSchema;
}

/** @internal */
export const StatisticRep$inboundSchema: z.ZodType<
  StatisticRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: StatisticRepType$inboundSchema,
  sourceLink: z.string(),
  defaultBranch: z.string(),
  enabled: z.boolean(),
  version: z.number().int(),
  hunkCount: z.number().int(),
  fileCount: z.number().int(),
  _links: z.record(Link$inboundSchema),
  latestCommitTime: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type StatisticRep$Outbound = {
  name: string;
  type: string;
  sourceLink: string;
  defaultBranch: string;
  enabled: boolean;
  version: number;
  hunkCount: number;
  fileCount: number;
  _links: { [k: string]: Link$Outbound };
  latestCommitTime?: number | undefined;
};

/** @internal */
export const StatisticRep$outboundSchema: z.ZodType<
  StatisticRep$Outbound,
  z.ZodTypeDef,
  StatisticRep
> = z.object({
  name: z.string(),
  type: StatisticRepType$outboundSchema,
  sourceLink: z.string(),
  defaultBranch: z.string(),
  enabled: z.boolean(),
  version: z.number().int(),
  hunkCount: z.number().int(),
  fileCount: z.number().int(),
  links: z.record(Link$outboundSchema),
  latestCommitTime: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatisticRep$ {
  /** @deprecated use `StatisticRep$inboundSchema` instead. */
  export const inboundSchema = StatisticRep$inboundSchema;
  /** @deprecated use `StatisticRep$outboundSchema` instead. */
  export const outboundSchema = StatisticRep$outboundSchema;
  /** @deprecated use `StatisticRep$Outbound` instead. */
  export type Outbound = StatisticRep$Outbound;
}

export function statisticRepToJSON(statisticRep: StatisticRep): string {
  return JSON.stringify(StatisticRep$outboundSchema.parse(statisticRep));
}

export function statisticRepFromJSON(
  jsonString: string,
): SafeParseResult<StatisticRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatisticRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatisticRep' from JSON`,
  );
}
