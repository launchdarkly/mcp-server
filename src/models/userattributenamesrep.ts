/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserAttributeNamesRep = {
  /**
   * private attributes
   */
  private?: Array<string> | undefined;
  /**
   * custom attributes
   */
  custom?: Array<string> | undefined;
  /**
   * standard attributes
   */
  standard?: Array<string> | undefined;
};

/** @internal */
export const UserAttributeNamesRep$inboundSchema: z.ZodType<
  UserAttributeNamesRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  private: z.array(z.string()).optional(),
  custom: z.array(z.string()).optional(),
  standard: z.array(z.string()).optional(),
});

/** @internal */
export type UserAttributeNamesRep$Outbound = {
  private?: Array<string> | undefined;
  custom?: Array<string> | undefined;
  standard?: Array<string> | undefined;
};

/** @internal */
export const UserAttributeNamesRep$outboundSchema: z.ZodType<
  UserAttributeNamesRep$Outbound,
  z.ZodTypeDef,
  UserAttributeNamesRep
> = z.object({
  private: z.array(z.string()).optional(),
  custom: z.array(z.string()).optional(),
  standard: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAttributeNamesRep$ {
  /** @deprecated use `UserAttributeNamesRep$inboundSchema` instead. */
  export const inboundSchema = UserAttributeNamesRep$inboundSchema;
  /** @deprecated use `UserAttributeNamesRep$outboundSchema` instead. */
  export const outboundSchema = UserAttributeNamesRep$outboundSchema;
  /** @deprecated use `UserAttributeNamesRep$Outbound` instead. */
  export type Outbound = UserAttributeNamesRep$Outbound;
}

export function userAttributeNamesRepToJSON(
  userAttributeNamesRep: UserAttributeNamesRep,
): string {
  return JSON.stringify(
    UserAttributeNamesRep$outboundSchema.parse(userAttributeNamesRep),
  );
}

export function userAttributeNamesRepFromJSON(
  jsonString: string,
): SafeParseResult<UserAttributeNamesRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAttributeNamesRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAttributeNamesRep' from JSON`,
  );
}
