/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IterationInput,
  IterationInput$inboundSchema,
  IterationInput$Outbound,
  IterationInput$outboundSchema,
} from "./iterationinput.js";

export type ExperimentPost = {
  /**
   * The experiment name
   */
  name: string;
  /**
   * The experiment description
   */
  description?: string | undefined;
  /**
   * The ID of the member who maintains this experiment
   */
  maintainerId?: string | undefined;
  /**
   * The experiment key
   */
  key: string;
  iteration: IterationInput;
  /**
   * The ID of the holdout
   */
  holdoutId?: string | undefined;
};

/** @internal */
export const ExperimentPost$inboundSchema: z.ZodType<
  ExperimentPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  maintainerId: z.string().optional(),
  key: z.string(),
  iteration: IterationInput$inboundSchema,
  holdoutId: z.string().optional(),
});

/** @internal */
export type ExperimentPost$Outbound = {
  name: string;
  description?: string | undefined;
  maintainerId?: string | undefined;
  key: string;
  iteration: IterationInput$Outbound;
  holdoutId?: string | undefined;
};

/** @internal */
export const ExperimentPost$outboundSchema: z.ZodType<
  ExperimentPost$Outbound,
  z.ZodTypeDef,
  ExperimentPost
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  maintainerId: z.string().optional(),
  key: z.string(),
  iteration: IterationInput$outboundSchema,
  holdoutId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentPost$ {
  /** @deprecated use `ExperimentPost$inboundSchema` instead. */
  export const inboundSchema = ExperimentPost$inboundSchema;
  /** @deprecated use `ExperimentPost$outboundSchema` instead. */
  export const outboundSchema = ExperimentPost$outboundSchema;
  /** @deprecated use `ExperimentPost$Outbound` instead. */
  export type Outbound = ExperimentPost$Outbound;
}

export function experimentPostToJSON(experimentPost: ExperimentPost): string {
  return JSON.stringify(ExperimentPost$outboundSchema.parse(experimentPost));
}

export function experimentPostFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentPost' from JSON`,
  );
}
