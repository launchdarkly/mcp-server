/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExperimentBayesianResultsRep,
  ExperimentBayesianResultsRep$inboundSchema,
  ExperimentBayesianResultsRep$Outbound,
  ExperimentBayesianResultsRep$outboundSchema,
} from "./experimentbayesianresultsrep.js";
import {
  MetricInGroupRep,
  MetricInGroupRep$inboundSchema,
  MetricInGroupRep$Outbound,
  MetricInGroupRep$outboundSchema,
} from "./metricingrouprep.js";

export type MetricInGroupResultsRep = {
  metric: MetricInGroupRep;
  results: ExperimentBayesianResultsRep;
};

/** @internal */
export const MetricInGroupResultsRep$inboundSchema: z.ZodType<
  MetricInGroupResultsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: MetricInGroupRep$inboundSchema,
  results: ExperimentBayesianResultsRep$inboundSchema,
});

/** @internal */
export type MetricInGroupResultsRep$Outbound = {
  metric: MetricInGroupRep$Outbound;
  results: ExperimentBayesianResultsRep$Outbound;
};

/** @internal */
export const MetricInGroupResultsRep$outboundSchema: z.ZodType<
  MetricInGroupResultsRep$Outbound,
  z.ZodTypeDef,
  MetricInGroupResultsRep
> = z.object({
  metric: MetricInGroupRep$outboundSchema,
  results: ExperimentBayesianResultsRep$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricInGroupResultsRep$ {
  /** @deprecated use `MetricInGroupResultsRep$inboundSchema` instead. */
  export const inboundSchema = MetricInGroupResultsRep$inboundSchema;
  /** @deprecated use `MetricInGroupResultsRep$outboundSchema` instead. */
  export const outboundSchema = MetricInGroupResultsRep$outboundSchema;
  /** @deprecated use `MetricInGroupResultsRep$Outbound` instead. */
  export type Outbound = MetricInGroupResultsRep$Outbound;
}

export function metricInGroupResultsRepToJSON(
  metricInGroupResultsRep: MetricInGroupResultsRep,
): string {
  return JSON.stringify(
    MetricInGroupResultsRep$outboundSchema.parse(metricInGroupResultsRep),
  );
}

export function metricInGroupResultsRepFromJSON(
  jsonString: string,
): SafeParseResult<MetricInGroupResultsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricInGroupResultsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricInGroupResultsRep' from JSON`,
  );
}
