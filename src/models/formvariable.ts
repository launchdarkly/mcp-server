/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DynamicOptions,
  DynamicOptions$inboundSchema,
  DynamicOptions$Outbound,
  DynamicOptions$outboundSchema,
} from "./dynamicoptions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FormVariable = {
  key?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  description?: string | undefined;
  placeholder?: string | undefined;
  isOptional?: boolean | undefined;
  defaultValue?: any | undefined;
  allowedValues?: Array<string> | undefined;
  dynamicOptions?: DynamicOptions | undefined;
};

/** @internal */
export const FormVariable$inboundSchema: z.ZodType<
  FormVariable,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  description: z.string().optional(),
  placeholder: z.string().optional(),
  isOptional: z.boolean().optional(),
  defaultValue: z.any().optional(),
  allowedValues: z.array(z.string()).optional(),
  dynamicOptions: DynamicOptions$inboundSchema.optional(),
});

/** @internal */
export type FormVariable$Outbound = {
  key?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  description?: string | undefined;
  placeholder?: string | undefined;
  isOptional?: boolean | undefined;
  defaultValue?: any | undefined;
  allowedValues?: Array<string> | undefined;
  dynamicOptions?: DynamicOptions$Outbound | undefined;
};

/** @internal */
export const FormVariable$outboundSchema: z.ZodType<
  FormVariable$Outbound,
  z.ZodTypeDef,
  FormVariable
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  type: z.string().optional(),
  description: z.string().optional(),
  placeholder: z.string().optional(),
  isOptional: z.boolean().optional(),
  defaultValue: z.any().optional(),
  allowedValues: z.array(z.string()).optional(),
  dynamicOptions: DynamicOptions$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormVariable$ {
  /** @deprecated use `FormVariable$inboundSchema` instead. */
  export const inboundSchema = FormVariable$inboundSchema;
  /** @deprecated use `FormVariable$outboundSchema` instead. */
  export const outboundSchema = FormVariable$outboundSchema;
  /** @deprecated use `FormVariable$Outbound` instead. */
  export type Outbound = FormVariable$Outbound;
}

export function formVariableToJSON(formVariable: FormVariable): string {
  return JSON.stringify(FormVariable$outboundSchema.parse(formVariable));
}

export function formVariableFromJSON(
  jsonString: string,
): SafeParseResult<FormVariable, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormVariable$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormVariable' from JSON`,
  );
}
