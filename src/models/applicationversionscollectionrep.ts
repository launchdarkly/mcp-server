/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ApplicationVersionRep,
  ApplicationVersionRep$inboundSchema,
  ApplicationVersionRep$Outbound,
  ApplicationVersionRep$outboundSchema,
} from "./applicationversionrep.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ApplicationVersionsCollectionRep = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * A list of the versions for this application
   */
  items?: Array<ApplicationVersionRep> | undefined;
  /**
   * The number of versions for this application
   */
  totalCount?: number | undefined;
};

/** @internal */
export const ApplicationVersionsCollectionRep$inboundSchema: z.ZodType<
  ApplicationVersionsCollectionRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  items: z.array(ApplicationVersionRep$inboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ApplicationVersionsCollectionRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  items?: Array<ApplicationVersionRep$Outbound> | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const ApplicationVersionsCollectionRep$outboundSchema: z.ZodType<
  ApplicationVersionsCollectionRep$Outbound,
  z.ZodTypeDef,
  ApplicationVersionsCollectionRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  items: z.array(ApplicationVersionRep$outboundSchema).optional(),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationVersionsCollectionRep$ {
  /** @deprecated use `ApplicationVersionsCollectionRep$inboundSchema` instead. */
  export const inboundSchema = ApplicationVersionsCollectionRep$inboundSchema;
  /** @deprecated use `ApplicationVersionsCollectionRep$outboundSchema` instead. */
  export const outboundSchema = ApplicationVersionsCollectionRep$outboundSchema;
  /** @deprecated use `ApplicationVersionsCollectionRep$Outbound` instead. */
  export type Outbound = ApplicationVersionsCollectionRep$Outbound;
}

export function applicationVersionsCollectionRepToJSON(
  applicationVersionsCollectionRep: ApplicationVersionsCollectionRep,
): string {
  return JSON.stringify(
    ApplicationVersionsCollectionRep$outboundSchema.parse(
      applicationVersionsCollectionRep,
    ),
  );
}

export function applicationVersionsCollectionRepFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationVersionsCollectionRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationVersionsCollectionRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationVersionsCollectionRep' from JSON`,
  );
}
