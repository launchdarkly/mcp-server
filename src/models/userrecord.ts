/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

export type UserRecord = {
  /**
   * Timestamp of the last time this user was seen
   */
  lastPing?: Date | undefined;
  environmentId?: string | undefined;
  ownerId?: string | undefined;
  user?: User | undefined;
  /**
   * If this record is returned as part of a list, the value used to sort the list. This is only included when the <code>sort</code> query parameter is specified. It is a time, in Unix milliseconds, if the sort is by <code>lastSeen</code>. It is a user key if the sort is by <code>userKey</code>.
   */
  sortValue?: any | undefined;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  access?: Access | undefined;
};

/** @internal */
export const UserRecord$inboundSchema: z.ZodType<
  UserRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastPing: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  environmentId: z.string().optional(),
  ownerId: z.string().optional(),
  user: User$inboundSchema.optional(),
  sortValue: z.any().optional(),
  _links: z.record(Link$inboundSchema).optional(),
  _access: Access$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_access": "access",
  });
});

/** @internal */
export type UserRecord$Outbound = {
  lastPing?: string | undefined;
  environmentId?: string | undefined;
  ownerId?: string | undefined;
  user?: User$Outbound | undefined;
  sortValue?: any | undefined;
  _links?: { [k: string]: Link$Outbound } | undefined;
  _access?: Access$Outbound | undefined;
};

/** @internal */
export const UserRecord$outboundSchema: z.ZodType<
  UserRecord$Outbound,
  z.ZodTypeDef,
  UserRecord
> = z.object({
  lastPing: z.date().transform(v => v.toISOString()).optional(),
  environmentId: z.string().optional(),
  ownerId: z.string().optional(),
  user: User$outboundSchema.optional(),
  sortValue: z.any().optional(),
  links: z.record(Link$outboundSchema).optional(),
  access: Access$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRecord$ {
  /** @deprecated use `UserRecord$inboundSchema` instead. */
  export const inboundSchema = UserRecord$inboundSchema;
  /** @deprecated use `UserRecord$outboundSchema` instead. */
  export const outboundSchema = UserRecord$outboundSchema;
  /** @deprecated use `UserRecord$Outbound` instead. */
  export type Outbound = UserRecord$Outbound;
}

export function userRecordToJSON(userRecord: UserRecord): string {
  return JSON.stringify(UserRecord$outboundSchema.parse(userRecord));
}

export function userRecordFromJSON(
  jsonString: string,
): SafeParseResult<UserRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserRecord' from JSON`,
  );
}
