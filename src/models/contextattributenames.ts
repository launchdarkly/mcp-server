/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ContextAttributeName,
  ContextAttributeName$inboundSchema,
  ContextAttributeName$Outbound,
  ContextAttributeName$outboundSchema,
} from "./contextattributename.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ContextAttributeNames = {
  /**
   * The kind associated with this collection of context attribute names.
   */
  kind: string;
  /**
   * A collection of context attribute names.
   */
  names: Array<ContextAttributeName>;
};

/** @internal */
export const ContextAttributeNames$inboundSchema: z.ZodType<
  ContextAttributeNames,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string(),
  names: z.array(ContextAttributeName$inboundSchema),
});

/** @internal */
export type ContextAttributeNames$Outbound = {
  kind: string;
  names: Array<ContextAttributeName$Outbound>;
};

/** @internal */
export const ContextAttributeNames$outboundSchema: z.ZodType<
  ContextAttributeNames$Outbound,
  z.ZodTypeDef,
  ContextAttributeNames
> = z.object({
  kind: z.string(),
  names: z.array(ContextAttributeName$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextAttributeNames$ {
  /** @deprecated use `ContextAttributeNames$inboundSchema` instead. */
  export const inboundSchema = ContextAttributeNames$inboundSchema;
  /** @deprecated use `ContextAttributeNames$outboundSchema` instead. */
  export const outboundSchema = ContextAttributeNames$outboundSchema;
  /** @deprecated use `ContextAttributeNames$Outbound` instead. */
  export type Outbound = ContextAttributeNames$Outbound;
}

export function contextAttributeNamesToJSON(
  contextAttributeNames: ContextAttributeNames,
): string {
  return JSON.stringify(
    ContextAttributeNames$outboundSchema.parse(contextAttributeNames),
  );
}

export function contextAttributeNamesFromJSON(
  jsonString: string,
): SafeParseResult<ContextAttributeNames, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContextAttributeNames$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextAttributeNames' from JSON`,
  );
}
