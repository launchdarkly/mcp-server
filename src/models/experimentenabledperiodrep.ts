/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExperimentEnabledPeriodRep = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
};

/** @internal */
export const ExperimentEnabledPeriodRep$inboundSchema: z.ZodType<
  ExperimentEnabledPeriodRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
});

/** @internal */
export type ExperimentEnabledPeriodRep$Outbound = {
  startDate?: number | undefined;
  stopDate?: number | undefined;
};

/** @internal */
export const ExperimentEnabledPeriodRep$outboundSchema: z.ZodType<
  ExperimentEnabledPeriodRep$Outbound,
  z.ZodTypeDef,
  ExperimentEnabledPeriodRep
> = z.object({
  startDate: z.number().int().optional(),
  stopDate: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperimentEnabledPeriodRep$ {
  /** @deprecated use `ExperimentEnabledPeriodRep$inboundSchema` instead. */
  export const inboundSchema = ExperimentEnabledPeriodRep$inboundSchema;
  /** @deprecated use `ExperimentEnabledPeriodRep$outboundSchema` instead. */
  export const outboundSchema = ExperimentEnabledPeriodRep$outboundSchema;
  /** @deprecated use `ExperimentEnabledPeriodRep$Outbound` instead. */
  export type Outbound = ExperimentEnabledPeriodRep$Outbound;
}

export function experimentEnabledPeriodRepToJSON(
  experimentEnabledPeriodRep: ExperimentEnabledPeriodRep,
): string {
  return JSON.stringify(
    ExperimentEnabledPeriodRep$outboundSchema.parse(experimentEnabledPeriodRep),
  );
}

export function experimentEnabledPeriodRepFromJSON(
  jsonString: string,
): SafeParseResult<ExperimentEnabledPeriodRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExperimentEnabledPeriodRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExperimentEnabledPeriodRep' from JSON`,
  );
}
