/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RelatedExperimentRep,
  RelatedExperimentRep$inboundSchema,
  RelatedExperimentRep$Outbound,
  RelatedExperimentRep$outboundSchema,
} from "./relatedexperimentrep.js";

export type SimpleHoldoutRep = {
  id?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  experiments?: Array<RelatedExperimentRep> | undefined;
};

/** @internal */
export const SimpleHoldoutRep$inboundSchema: z.ZodType<
  SimpleHoldoutRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.number().int().optional(),
  updatedAt: z.number().int().optional(),
  experiments: z.array(RelatedExperimentRep$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type SimpleHoldoutRep$Outbound = {
  _id?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  experiments?: Array<RelatedExperimentRep$Outbound> | undefined;
};

/** @internal */
export const SimpleHoldoutRep$outboundSchema: z.ZodType<
  SimpleHoldoutRep$Outbound,
  z.ZodTypeDef,
  SimpleHoldoutRep
> = z.object({
  id: z.string().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.number().int().optional(),
  updatedAt: z.number().int().optional(),
  experiments: z.array(RelatedExperimentRep$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleHoldoutRep$ {
  /** @deprecated use `SimpleHoldoutRep$inboundSchema` instead. */
  export const inboundSchema = SimpleHoldoutRep$inboundSchema;
  /** @deprecated use `SimpleHoldoutRep$outboundSchema` instead. */
  export const outboundSchema = SimpleHoldoutRep$outboundSchema;
  /** @deprecated use `SimpleHoldoutRep$Outbound` instead. */
  export type Outbound = SimpleHoldoutRep$Outbound;
}

export function simpleHoldoutRepToJSON(
  simpleHoldoutRep: SimpleHoldoutRep,
): string {
  return JSON.stringify(
    SimpleHoldoutRep$outboundSchema.parse(simpleHoldoutRep),
  );
}

export function simpleHoldoutRepFromJSON(
  jsonString: string,
): SafeParseResult<SimpleHoldoutRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SimpleHoldoutRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SimpleHoldoutRep' from JSON`,
  );
}
