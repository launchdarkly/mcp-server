/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FlagReferenceRep = {
  /**
   * The project key
   */
  projectKey: string;
  /**
   * The flag key
   */
  flagKey: string;
  /**
   * The number of references added
   */
  referencesAdded: number;
  /**
   * The number of references removed
   */
  referencesRemoved: number;
};

/** @internal */
export const FlagReferenceRep$inboundSchema: z.ZodType<
  FlagReferenceRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  referencesAdded: z.number().int(),
  referencesRemoved: z.number().int(),
});

/** @internal */
export type FlagReferenceRep$Outbound = {
  projectKey: string;
  flagKey: string;
  referencesAdded: number;
  referencesRemoved: number;
};

/** @internal */
export const FlagReferenceRep$outboundSchema: z.ZodType<
  FlagReferenceRep$Outbound,
  z.ZodTypeDef,
  FlagReferenceRep
> = z.object({
  projectKey: z.string(),
  flagKey: z.string(),
  referencesAdded: z.number().int(),
  referencesRemoved: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagReferenceRep$ {
  /** @deprecated use `FlagReferenceRep$inboundSchema` instead. */
  export const inboundSchema = FlagReferenceRep$inboundSchema;
  /** @deprecated use `FlagReferenceRep$outboundSchema` instead. */
  export const outboundSchema = FlagReferenceRep$outboundSchema;
  /** @deprecated use `FlagReferenceRep$Outbound` instead. */
  export type Outbound = FlagReferenceRep$Outbound;
}

export function flagReferenceRepToJSON(
  flagReferenceRep: FlagReferenceRep,
): string {
  return JSON.stringify(
    FlagReferenceRep$outboundSchema.parse(flagReferenceRep),
  );
}

export function flagReferenceRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagReferenceRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagReferenceRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagReferenceRep' from JSON`,
  );
}
