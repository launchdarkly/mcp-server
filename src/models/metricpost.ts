/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MetricEventDefaultRep,
  MetricEventDefaultRep$inboundSchema,
  MetricEventDefaultRep$Outbound,
  MetricEventDefaultRep$outboundSchema,
} from "./metriceventdefaultrep.js";
import {
  UrlPost,
  UrlPost$inboundSchema,
  UrlPost$Outbound,
  UrlPost$outboundSchema,
} from "./urlpost.js";

/**
 * The kind of event your metric will track
 */
export const MetricPostKind = {
  Pageview: "pageview",
  Click: "click",
  Custom: "custom",
} as const;
/**
 * The kind of event your metric will track
 */
export type MetricPostKind = ClosedEnum<typeof MetricPostKind>;

/**
 * Success criteria. Required for custom numeric metrics, optional for custom conversion metrics.
 */
export const MetricPostSuccessCriteria = {
  HigherThanBaseline: "HigherThanBaseline",
  LowerThanBaseline: "LowerThanBaseline",
} as const;
/**
 * Success criteria. Required for custom numeric metrics, optional for custom conversion metrics.
 */
export type MetricPostSuccessCriteria = ClosedEnum<
  typeof MetricPostSuccessCriteria
>;

/**
 * The method by which multiple unit event values are aggregated
 */
export const MetricPostUnitAggregationType = {
  Average: "average",
  Sum: "sum",
} as const;
/**
 * The method by which multiple unit event values are aggregated
 */
export type MetricPostUnitAggregationType = ClosedEnum<
  typeof MetricPostUnitAggregationType
>;

export type MetricPost = {
  /**
   * A unique key to reference the metric
   */
  key: string;
  /**
   * A human-friendly name for the metric
   */
  name?: string | undefined;
  /**
   * Description of the metric
   */
  description?: string | undefined;
  /**
   * The kind of event your metric will track
   */
  kind: MetricPostKind;
  /**
   * One or more CSS selectors. Required for click metrics only.
   */
  selector?: string | undefined;
  /**
   * One or more target URLs. Required for click and pageview metrics only.
   */
  urls?: Array<UrlPost> | undefined;
  /**
   * Whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>). Required for custom metrics only.
   */
  isNumeric?: boolean | undefined;
  /**
   * The unit of measure. Applicable for numeric custom metrics only.
   */
  unit?: string | undefined;
  /**
   * The event key to use in your code. Required for custom conversion/binary and custom numeric metrics only.
   */
  eventKey?: string | undefined;
  /**
   * Success criteria. Required for custom numeric metrics, optional for custom conversion metrics.
   */
  successCriteria?: MetricPostSuccessCriteria | undefined;
  /**
   * Tags for the metric
   */
  tags?: Array<string> | undefined;
  /**
   * An array of randomization units allowed for this metric
   */
  randomizationUnits?: Array<string> | undefined;
  /**
   * The ID of the member who maintains this metric
   */
  maintainerId?: string | undefined;
  /**
   * The method by which multiple unit event values are aggregated
   */
  unitAggregationType?: MetricPostUnitAggregationType | undefined;
  /**
   * The method for analyzing metric events
   */
  analysisType?: string | undefined;
  /**
   * The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>.
   */
  percentileValue?: number | undefined;
  eventDefault?: MetricEventDefaultRep | undefined;
};

/** @internal */
export const MetricPostKind$inboundSchema: z.ZodNativeEnum<
  typeof MetricPostKind
> = z.nativeEnum(MetricPostKind);

/** @internal */
export const MetricPostKind$outboundSchema: z.ZodNativeEnum<
  typeof MetricPostKind
> = MetricPostKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricPostKind$ {
  /** @deprecated use `MetricPostKind$inboundSchema` instead. */
  export const inboundSchema = MetricPostKind$inboundSchema;
  /** @deprecated use `MetricPostKind$outboundSchema` instead. */
  export const outboundSchema = MetricPostKind$outboundSchema;
}

/** @internal */
export const MetricPostSuccessCriteria$inboundSchema: z.ZodNativeEnum<
  typeof MetricPostSuccessCriteria
> = z.nativeEnum(MetricPostSuccessCriteria);

/** @internal */
export const MetricPostSuccessCriteria$outboundSchema: z.ZodNativeEnum<
  typeof MetricPostSuccessCriteria
> = MetricPostSuccessCriteria$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricPostSuccessCriteria$ {
  /** @deprecated use `MetricPostSuccessCriteria$inboundSchema` instead. */
  export const inboundSchema = MetricPostSuccessCriteria$inboundSchema;
  /** @deprecated use `MetricPostSuccessCriteria$outboundSchema` instead. */
  export const outboundSchema = MetricPostSuccessCriteria$outboundSchema;
}

/** @internal */
export const MetricPostUnitAggregationType$inboundSchema: z.ZodNativeEnum<
  typeof MetricPostUnitAggregationType
> = z.nativeEnum(MetricPostUnitAggregationType);

/** @internal */
export const MetricPostUnitAggregationType$outboundSchema: z.ZodNativeEnum<
  typeof MetricPostUnitAggregationType
> = MetricPostUnitAggregationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricPostUnitAggregationType$ {
  /** @deprecated use `MetricPostUnitAggregationType$inboundSchema` instead. */
  export const inboundSchema = MetricPostUnitAggregationType$inboundSchema;
  /** @deprecated use `MetricPostUnitAggregationType$outboundSchema` instead. */
  export const outboundSchema = MetricPostUnitAggregationType$outboundSchema;
}

/** @internal */
export const MetricPost$inboundSchema: z.ZodType<
  MetricPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  kind: MetricPostKind$inboundSchema,
  selector: z.string().optional(),
  urls: z.array(UrlPost$inboundSchema).optional(),
  isNumeric: z.boolean().optional(),
  unit: z.string().optional(),
  eventKey: z.string().optional(),
  successCriteria: MetricPostSuccessCriteria$inboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  randomizationUnits: z.array(z.string()).optional(),
  maintainerId: z.string().optional(),
  unitAggregationType: MetricPostUnitAggregationType$inboundSchema.optional(),
  analysisType: z.string().optional(),
  percentileValue: z.number().int().optional(),
  eventDefault: MetricEventDefaultRep$inboundSchema.optional(),
});

/** @internal */
export type MetricPost$Outbound = {
  key: string;
  name?: string | undefined;
  description?: string | undefined;
  kind: string;
  selector?: string | undefined;
  urls?: Array<UrlPost$Outbound> | undefined;
  isNumeric?: boolean | undefined;
  unit?: string | undefined;
  eventKey?: string | undefined;
  successCriteria?: string | undefined;
  tags?: Array<string> | undefined;
  randomizationUnits?: Array<string> | undefined;
  maintainerId?: string | undefined;
  unitAggregationType?: string | undefined;
  analysisType?: string | undefined;
  percentileValue?: number | undefined;
  eventDefault?: MetricEventDefaultRep$Outbound | undefined;
};

/** @internal */
export const MetricPost$outboundSchema: z.ZodType<
  MetricPost$Outbound,
  z.ZodTypeDef,
  MetricPost
> = z.object({
  key: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  kind: MetricPostKind$outboundSchema,
  selector: z.string().optional(),
  urls: z.array(UrlPost$outboundSchema).optional(),
  isNumeric: z.boolean().optional(),
  unit: z.string().optional(),
  eventKey: z.string().optional(),
  successCriteria: MetricPostSuccessCriteria$outboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  randomizationUnits: z.array(z.string()).optional(),
  maintainerId: z.string().optional(),
  unitAggregationType: MetricPostUnitAggregationType$outboundSchema.optional(),
  analysisType: z.string().optional(),
  percentileValue: z.number().int().optional(),
  eventDefault: MetricEventDefaultRep$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricPost$ {
  /** @deprecated use `MetricPost$inboundSchema` instead. */
  export const inboundSchema = MetricPost$inboundSchema;
  /** @deprecated use `MetricPost$outboundSchema` instead. */
  export const outboundSchema = MetricPost$outboundSchema;
  /** @deprecated use `MetricPost$Outbound` instead. */
  export type Outbound = MetricPost$Outbound;
}

export function metricPostToJSON(metricPost: MetricPost): string {
  return JSON.stringify(MetricPost$outboundSchema.parse(metricPost));
}

export function metricPostFromJSON(
  jsonString: string,
): SafeParseResult<MetricPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricPost' from JSON`,
  );
}
