/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Conflict = {
  instruction?: { [k: string]: any } | undefined;
  /**
   * Reason why the conflict exists
   */
  reason?: string | undefined;
};

/** @internal */
export const Conflict$inboundSchema: z.ZodType<
  Conflict,
  z.ZodTypeDef,
  unknown
> = z.object({
  instruction: z.record(z.any()).optional(),
  reason: z.string().optional(),
});

/** @internal */
export type Conflict$Outbound = {
  instruction?: { [k: string]: any } | undefined;
  reason?: string | undefined;
};

/** @internal */
export const Conflict$outboundSchema: z.ZodType<
  Conflict$Outbound,
  z.ZodTypeDef,
  Conflict
> = z.object({
  instruction: z.record(z.any()).optional(),
  reason: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conflict$ {
  /** @deprecated use `Conflict$inboundSchema` instead. */
  export const inboundSchema = Conflict$inboundSchema;
  /** @deprecated use `Conflict$outboundSchema` instead. */
  export const outboundSchema = Conflict$outboundSchema;
  /** @deprecated use `Conflict$Outbound` instead. */
  export type Outbound = Conflict$Outbound;
}

export function conflictToJSON(conflict: Conflict): string {
  return JSON.stringify(Conflict$outboundSchema.parse(conflict));
}

export function conflictFromJSON(
  jsonString: string,
): SafeParseResult<Conflict, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conflict$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conflict' from JSON`,
  );
}
