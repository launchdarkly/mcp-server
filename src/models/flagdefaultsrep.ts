/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BooleanDefaults,
  BooleanDefaults$inboundSchema,
  BooleanDefaults$Outbound,
  BooleanDefaults$outboundSchema,
} from "./booleandefaults.js";
import {
  ClientSideAvailability,
  ClientSideAvailability$inboundSchema,
  ClientSideAvailability$Outbound,
  ClientSideAvailability$outboundSchema,
} from "./clientsideavailability.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FlagDefaultsRep = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * A unique key for the flag default
   */
  key?: string | undefined;
  /**
   * A list of default tags for each flag
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the flag should be temporary by default
   */
  temporary?: boolean | undefined;
  defaultClientSideAvailability?: ClientSideAvailability | undefined;
  booleanDefaults?: BooleanDefaults | undefined;
};

/** @internal */
export const FlagDefaultsRep$inboundSchema: z.ZodType<
  FlagDefaultsRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  key: z.string().optional(),
  tags: z.array(z.string()).optional(),
  temporary: z.boolean().optional(),
  defaultClientSideAvailability: ClientSideAvailability$inboundSchema
    .optional(),
  booleanDefaults: BooleanDefaults$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FlagDefaultsRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  key?: string | undefined;
  tags?: Array<string> | undefined;
  temporary?: boolean | undefined;
  defaultClientSideAvailability?: ClientSideAvailability$Outbound | undefined;
  booleanDefaults?: BooleanDefaults$Outbound | undefined;
};

/** @internal */
export const FlagDefaultsRep$outboundSchema: z.ZodType<
  FlagDefaultsRep$Outbound,
  z.ZodTypeDef,
  FlagDefaultsRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  key: z.string().optional(),
  tags: z.array(z.string()).optional(),
  temporary: z.boolean().optional(),
  defaultClientSideAvailability: ClientSideAvailability$outboundSchema
    .optional(),
  booleanDefaults: BooleanDefaults$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagDefaultsRep$ {
  /** @deprecated use `FlagDefaultsRep$inboundSchema` instead. */
  export const inboundSchema = FlagDefaultsRep$inboundSchema;
  /** @deprecated use `FlagDefaultsRep$outboundSchema` instead. */
  export const outboundSchema = FlagDefaultsRep$outboundSchema;
  /** @deprecated use `FlagDefaultsRep$Outbound` instead. */
  export type Outbound = FlagDefaultsRep$Outbound;
}

export function flagDefaultsRepToJSON(
  flagDefaultsRep: FlagDefaultsRep,
): string {
  return JSON.stringify(FlagDefaultsRep$outboundSchema.parse(flagDefaultsRep));
}

export function flagDefaultsRepFromJSON(
  jsonString: string,
): SafeParseResult<FlagDefaultsRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagDefaultsRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagDefaultsRep' from JSON`,
  );
}
