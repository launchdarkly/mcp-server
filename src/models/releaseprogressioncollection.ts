/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  PhaseInfo,
  PhaseInfo$inboundSchema,
  PhaseInfo$Outbound,
  PhaseInfo$outboundSchema,
} from "./phaseinfo.js";
import {
  ReleaseProgression,
  ReleaseProgression$inboundSchema,
  ReleaseProgression$Outbound,
  ReleaseProgression$outboundSchema,
} from "./releaseprogression.js";

export type ReleaseProgressionCollection = {
  /**
   * The number of active releases
   */
  activeCount: number;
  /**
   * The number of completed releases
   */
  completedCount: number;
  /**
   * A list of details for each release, across all flags, for this release pipeline
   */
  items: Array<ReleaseProgression>;
  /**
   * A list of details for each phase, across all releases, for this release pipeline
   */
  phases: Array<PhaseInfo>;
  /**
   * The total number of releases for this release pipeline
   */
  totalCount: number;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
};

/** @internal */
export const ReleaseProgressionCollection$inboundSchema: z.ZodType<
  ReleaseProgressionCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  activeCount: z.number().int(),
  completedCount: z.number().int(),
  items: z.array(ReleaseProgression$inboundSchema),
  phases: z.array(PhaseInfo$inboundSchema),
  totalCount: z.number().int(),
  _links: z.record(Link$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ReleaseProgressionCollection$Outbound = {
  activeCount: number;
  completedCount: number;
  items: Array<ReleaseProgression$Outbound>;
  phases: Array<PhaseInfo$Outbound>;
  totalCount: number;
  _links: { [k: string]: Link$Outbound };
};

/** @internal */
export const ReleaseProgressionCollection$outboundSchema: z.ZodType<
  ReleaseProgressionCollection$Outbound,
  z.ZodTypeDef,
  ReleaseProgressionCollection
> = z.object({
  activeCount: z.number().int(),
  completedCount: z.number().int(),
  items: z.array(ReleaseProgression$outboundSchema),
  phases: z.array(PhaseInfo$outboundSchema),
  totalCount: z.number().int(),
  links: z.record(Link$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReleaseProgressionCollection$ {
  /** @deprecated use `ReleaseProgressionCollection$inboundSchema` instead. */
  export const inboundSchema = ReleaseProgressionCollection$inboundSchema;
  /** @deprecated use `ReleaseProgressionCollection$outboundSchema` instead. */
  export const outboundSchema = ReleaseProgressionCollection$outboundSchema;
  /** @deprecated use `ReleaseProgressionCollection$Outbound` instead. */
  export type Outbound = ReleaseProgressionCollection$Outbound;
}

export function releaseProgressionCollectionToJSON(
  releaseProgressionCollection: ReleaseProgressionCollection,
): string {
  return JSON.stringify(
    ReleaseProgressionCollection$outboundSchema.parse(
      releaseProgressionCollection,
    ),
  );
}

export function releaseProgressionCollectionFromJSON(
  jsonString: string,
): SafeParseResult<ReleaseProgressionCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReleaseProgressionCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReleaseProgressionCollection' from JSON`,
  );
}
