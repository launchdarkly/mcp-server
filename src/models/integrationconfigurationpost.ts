/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CapabilityConfigPost,
  CapabilityConfigPost$inboundSchema,
  CapabilityConfigPost$Outbound,
  CapabilityConfigPost$outboundSchema,
} from "./capabilityconfigpost.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IntegrationConfigurationPost = {
  /**
   * The name of the integration configuration
   */
  name: string;
  /**
   * Whether the integration configuration is enabled. If omitted, defaults to true
   */
  enabled?: boolean | undefined;
  /**
   * Tags for the integration
   */
  tags?: Array<string> | undefined;
  /**
   * The unique set of fields required to configure the integration. Refer to the <code>formVariables</code> field in the corresponding <code>manifest.json</code> at https://github.com/launchdarkly/integration-framework/tree/main/integrations for a full list of fields for the integration you wish to configure.
   */
  configValues: { [k: string]: any };
  capabilityConfig?: CapabilityConfigPost | undefined;
};

/** @internal */
export const IntegrationConfigurationPost$inboundSchema: z.ZodType<
  IntegrationConfigurationPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  enabled: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  configValues: z.record(z.any()),
  capabilityConfig: CapabilityConfigPost$inboundSchema.optional(),
});

/** @internal */
export type IntegrationConfigurationPost$Outbound = {
  name: string;
  enabled?: boolean | undefined;
  tags?: Array<string> | undefined;
  configValues: { [k: string]: any };
  capabilityConfig?: CapabilityConfigPost$Outbound | undefined;
};

/** @internal */
export const IntegrationConfigurationPost$outboundSchema: z.ZodType<
  IntegrationConfigurationPost$Outbound,
  z.ZodTypeDef,
  IntegrationConfigurationPost
> = z.object({
  name: z.string(),
  enabled: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
  configValues: z.record(z.any()),
  capabilityConfig: CapabilityConfigPost$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationConfigurationPost$ {
  /** @deprecated use `IntegrationConfigurationPost$inboundSchema` instead. */
  export const inboundSchema = IntegrationConfigurationPost$inboundSchema;
  /** @deprecated use `IntegrationConfigurationPost$outboundSchema` instead. */
  export const outboundSchema = IntegrationConfigurationPost$outboundSchema;
  /** @deprecated use `IntegrationConfigurationPost$Outbound` instead. */
  export type Outbound = IntegrationConfigurationPost$Outbound;
}

export function integrationConfigurationPostToJSON(
  integrationConfigurationPost: IntegrationConfigurationPost,
): string {
  return JSON.stringify(
    IntegrationConfigurationPost$outboundSchema.parse(
      integrationConfigurationPost,
    ),
  );
}

export function integrationConfigurationPostFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationConfigurationPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationConfigurationPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationConfigurationPost' from JSON`,
  );
}
