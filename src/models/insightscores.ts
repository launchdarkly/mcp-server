/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InsightGroupScores,
  InsightGroupScores$inboundSchema,
  InsightGroupScores$Outbound,
  InsightGroupScores$outboundSchema,
} from "./insightgroupscores.js";
import {
  InsightPeriod,
  InsightPeriod$inboundSchema,
  InsightPeriod$Outbound,
  InsightPeriod$outboundSchema,
} from "./insightperiod.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type InsightScores = {
  period: InsightPeriod;
  lastPeriod: InsightPeriod;
  scores: InsightGroupScores;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const InsightScores$inboundSchema: z.ZodType<
  InsightScores,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: InsightPeriod$inboundSchema,
  lastPeriod: InsightPeriod$inboundSchema,
  scores: InsightGroupScores$inboundSchema,
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InsightScores$Outbound = {
  period: InsightPeriod$Outbound;
  lastPeriod: InsightPeriod$Outbound;
  scores: InsightGroupScores$Outbound;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const InsightScores$outboundSchema: z.ZodType<
  InsightScores$Outbound,
  z.ZodTypeDef,
  InsightScores
> = z.object({
  period: InsightPeriod$outboundSchema,
  lastPeriod: InsightPeriod$outboundSchema,
  scores: InsightGroupScores$outboundSchema,
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightScores$ {
  /** @deprecated use `InsightScores$inboundSchema` instead. */
  export const inboundSchema = InsightScores$inboundSchema;
  /** @deprecated use `InsightScores$outboundSchema` instead. */
  export const outboundSchema = InsightScores$outboundSchema;
  /** @deprecated use `InsightScores$Outbound` instead. */
  export type Outbound = InsightScores$Outbound;
}

export function insightScoresToJSON(insightScores: InsightScores): string {
  return JSON.stringify(InsightScores$outboundSchema.parse(insightScores));
}

export function insightScoresFromJSON(
  jsonString: string,
): SafeParseResult<InsightScores, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightScores$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightScores' from JSON`,
  );
}
