/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of review action to take
 */
export const ReviewResponseKind = {
  Approve: "approve",
  Decline: "decline",
  Comment: "comment",
} as const;
/**
 * The type of review action to take
 */
export type ReviewResponseKind = ClosedEnum<typeof ReviewResponseKind>;

export type ReviewResponse = {
  /**
   * The approval request ID
   */
  id: string;
  /**
   * The type of review action to take
   */
  kind: ReviewResponseKind;
  creationDate?: number | undefined;
  /**
   * A comment describing the approval response
   */
  comment?: string | undefined;
  /**
   * ID of account member that reviewed request
   */
  memberId?: string | undefined;
  /**
   * ID of account service token that reviewed request
   */
  serviceTokenId?: string | undefined;
};

/** @internal */
export const ReviewResponseKind$inboundSchema: z.ZodNativeEnum<
  typeof ReviewResponseKind
> = z.nativeEnum(ReviewResponseKind);

/** @internal */
export const ReviewResponseKind$outboundSchema: z.ZodNativeEnum<
  typeof ReviewResponseKind
> = ReviewResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewResponseKind$ {
  /** @deprecated use `ReviewResponseKind$inboundSchema` instead. */
  export const inboundSchema = ReviewResponseKind$inboundSchema;
  /** @deprecated use `ReviewResponseKind$outboundSchema` instead. */
  export const outboundSchema = ReviewResponseKind$outboundSchema;
}

/** @internal */
export const ReviewResponse$inboundSchema: z.ZodType<
  ReviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  kind: ReviewResponseKind$inboundSchema,
  creationDate: z.number().int().optional(),
  comment: z.string().optional(),
  memberId: z.string().optional(),
  serviceTokenId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type ReviewResponse$Outbound = {
  _id: string;
  kind: string;
  creationDate?: number | undefined;
  comment?: string | undefined;
  memberId?: string | undefined;
  serviceTokenId?: string | undefined;
};

/** @internal */
export const ReviewResponse$outboundSchema: z.ZodType<
  ReviewResponse$Outbound,
  z.ZodTypeDef,
  ReviewResponse
> = z.object({
  id: z.string(),
  kind: ReviewResponseKind$outboundSchema,
  creationDate: z.number().int().optional(),
  comment: z.string().optional(),
  memberId: z.string().optional(),
  serviceTokenId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewResponse$ {
  /** @deprecated use `ReviewResponse$inboundSchema` instead. */
  export const inboundSchema = ReviewResponse$inboundSchema;
  /** @deprecated use `ReviewResponse$outboundSchema` instead. */
  export const outboundSchema = ReviewResponse$outboundSchema;
  /** @deprecated use `ReviewResponse$Outbound` instead. */
  export type Outbound = ReviewResponse$Outbound;
}

export function reviewResponseToJSON(reviewResponse: ReviewResponse): string {
  return JSON.stringify(ReviewResponse$outboundSchema.parse(reviewResponse));
}

export function reviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReviewResponse' from JSON`,
  );
}
