/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExecutionOutput = {
  /**
   * The status of the execution of this workflow stage
   */
  status: string;
  stopDate?: number | undefined;
};

/** @internal */
export const ExecutionOutput$inboundSchema: z.ZodType<
  ExecutionOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  stopDate: z.number().int().optional(),
});

/** @internal */
export type ExecutionOutput$Outbound = {
  status: string;
  stopDate?: number | undefined;
};

/** @internal */
export const ExecutionOutput$outboundSchema: z.ZodType<
  ExecutionOutput$Outbound,
  z.ZodTypeDef,
  ExecutionOutput
> = z.object({
  status: z.string(),
  stopDate: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutionOutput$ {
  /** @deprecated use `ExecutionOutput$inboundSchema` instead. */
  export const inboundSchema = ExecutionOutput$inboundSchema;
  /** @deprecated use `ExecutionOutput$outboundSchema` instead. */
  export const outboundSchema = ExecutionOutput$outboundSchema;
  /** @deprecated use `ExecutionOutput$Outbound` instead. */
  export type Outbound = ExecutionOutput$Outbound;
}

export function executionOutputToJSON(
  executionOutput: ExecutionOutput,
): string {
  return JSON.stringify(ExecutionOutput$outboundSchema.parse(executionOutput));
}

export function executionOutputFromJSON(
  jsonString: string,
): SafeParseResult<ExecutionOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecutionOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecutionOutput' from JSON`,
  );
}
