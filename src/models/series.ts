/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Series = {
  /**
   * The timestamp
   */
  time: number;
  /**
   * The value for the given timestamp
   */
  value: number;
};

/** @internal */
export const Series$inboundSchema: z.ZodType<Series, z.ZodTypeDef, unknown> = z
  .object({
    time: z.number().int(),
    value: z.number(),
  });

/** @internal */
export type Series$Outbound = {
  time: number;
  value: number;
};

/** @internal */
export const Series$outboundSchema: z.ZodType<
  Series$Outbound,
  z.ZodTypeDef,
  Series
> = z.object({
  time: z.number().int(),
  value: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Series$ {
  /** @deprecated use `Series$inboundSchema` instead. */
  export const inboundSchema = Series$inboundSchema;
  /** @deprecated use `Series$outboundSchema` instead. */
  export const outboundSchema = Series$outboundSchema;
  /** @deprecated use `Series$Outbound` instead. */
  export type Outbound = Series$Outbound;
}

export function seriesToJSON(series: Series): string {
  return JSON.stringify(Series$outboundSchema.parse(series));
}

export function seriesFromJSON(
  jsonString: string,
): SafeParseResult<Series, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Series$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Series' from JSON`,
  );
}
