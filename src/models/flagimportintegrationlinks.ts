/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FlagImportIntegrationLinks = {
  self: Link;
  parent: Link;
  project: Link;
};

/** @internal */
export const FlagImportIntegrationLinks$inboundSchema: z.ZodType<
  FlagImportIntegrationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: Link$inboundSchema,
  parent: Link$inboundSchema,
  project: Link$inboundSchema,
});

/** @internal */
export type FlagImportIntegrationLinks$Outbound = {
  self: Link$Outbound;
  parent: Link$Outbound;
  project: Link$Outbound;
};

/** @internal */
export const FlagImportIntegrationLinks$outboundSchema: z.ZodType<
  FlagImportIntegrationLinks$Outbound,
  z.ZodTypeDef,
  FlagImportIntegrationLinks
> = z.object({
  self: Link$outboundSchema,
  parent: Link$outboundSchema,
  project: Link$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportIntegrationLinks$ {
  /** @deprecated use `FlagImportIntegrationLinks$inboundSchema` instead. */
  export const inboundSchema = FlagImportIntegrationLinks$inboundSchema;
  /** @deprecated use `FlagImportIntegrationLinks$outboundSchema` instead. */
  export const outboundSchema = FlagImportIntegrationLinks$outboundSchema;
  /** @deprecated use `FlagImportIntegrationLinks$Outbound` instead. */
  export type Outbound = FlagImportIntegrationLinks$Outbound;
}

export function flagImportIntegrationLinksToJSON(
  flagImportIntegrationLinks: FlagImportIntegrationLinks,
): string {
  return JSON.stringify(
    FlagImportIntegrationLinks$outboundSchema.parse(flagImportIntegrationLinks),
  );
}

export function flagImportIntegrationLinksFromJSON(
  jsonString: string,
): SafeParseResult<FlagImportIntegrationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagImportIntegrationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagImportIntegrationLinks' from JSON`,
  );
}
