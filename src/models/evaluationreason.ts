/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EvaluationReason = {
  /**
   * Describes the general reason that LaunchDarkly selected this variation.
   */
  kind: string;
  /**
   * The positional index of the matching rule if the kind is 'RULE_MATCH'. The index is 0-based.
   */
  ruleIndex?: number | undefined;
  /**
   * The unique identifier of the matching rule if the kind is 'RULE_MATCH'.
   */
  ruleID?: string | undefined;
  /**
   * The key of the flag that failed if the kind is 'PREREQUISITE_FAILED'.
   */
  prerequisiteKey?: string | undefined;
  /**
   * Indicates whether the evaluation occurred as part of an experiment.
   */
  inExperiment?: boolean | undefined;
  /**
   * The specific error type if the kind is 'ERROR'.
   */
  errorKind?: string | undefined;
};

/** @internal */
export const EvaluationReason$inboundSchema: z.ZodType<
  EvaluationReason,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string(),
  ruleIndex: z.number().int().optional(),
  ruleID: z.string().optional(),
  prerequisiteKey: z.string().optional(),
  inExperiment: z.boolean().optional(),
  errorKind: z.string().optional(),
});

/** @internal */
export type EvaluationReason$Outbound = {
  kind: string;
  ruleIndex?: number | undefined;
  ruleID?: string | undefined;
  prerequisiteKey?: string | undefined;
  inExperiment?: boolean | undefined;
  errorKind?: string | undefined;
};

/** @internal */
export const EvaluationReason$outboundSchema: z.ZodType<
  EvaluationReason$Outbound,
  z.ZodTypeDef,
  EvaluationReason
> = z.object({
  kind: z.string(),
  ruleIndex: z.number().int().optional(),
  ruleID: z.string().optional(),
  prerequisiteKey: z.string().optional(),
  inExperiment: z.boolean().optional(),
  errorKind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluationReason$ {
  /** @deprecated use `EvaluationReason$inboundSchema` instead. */
  export const inboundSchema = EvaluationReason$inboundSchema;
  /** @deprecated use `EvaluationReason$outboundSchema` instead. */
  export const outboundSchema = EvaluationReason$outboundSchema;
  /** @deprecated use `EvaluationReason$Outbound` instead. */
  export type Outbound = EvaluationReason$Outbound;
}

export function evaluationReasonToJSON(
  evaluationReason: EvaluationReason,
): string {
  return JSON.stringify(
    EvaluationReason$outboundSchema.parse(evaluationReason),
  );
}

export function evaluationReasonFromJSON(
  jsonString: string,
): SafeParseResult<EvaluationReason, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvaluationReason$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvaluationReason' from JSON`,
  );
}
