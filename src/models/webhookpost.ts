/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  StatementPost,
  StatementPost$inboundSchema,
  StatementPost$Outbound,
  StatementPost$outboundSchema,
} from "./statementpost.js";

export type WebhookPost = {
  /**
   * A human-readable name for your webhook
   */
  name?: string | undefined;
  /**
   * The URL of the remote webhook
   */
  url: string;
  /**
   * If sign is true, and the secret attribute is omitted, LaunchDarkly automatically generates a secret for you.
   */
  secret?: string | undefined;
  statements?: Array<StatementPost> | undefined;
  /**
   * If sign is false, the webhook does not include a signature header, and the secret can be omitted.
   */
  sign: boolean;
  /**
   * Whether or not this webhook is enabled.
   */
  on: boolean;
  /**
   * List of tags for this webhook
   */
  tags?: Array<string> | undefined;
};

/** @internal */
export const WebhookPost$inboundSchema: z.ZodType<
  WebhookPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  secret: z.string().optional(),
  statements: z.array(StatementPost$inboundSchema).optional(),
  sign: z.boolean(),
  on: z.boolean(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type WebhookPost$Outbound = {
  name?: string | undefined;
  url: string;
  secret?: string | undefined;
  statements?: Array<StatementPost$Outbound> | undefined;
  sign: boolean;
  on: boolean;
  tags?: Array<string> | undefined;
};

/** @internal */
export const WebhookPost$outboundSchema: z.ZodType<
  WebhookPost$Outbound,
  z.ZodTypeDef,
  WebhookPost
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  secret: z.string().optional(),
  statements: z.array(StatementPost$outboundSchema).optional(),
  sign: z.boolean(),
  on: z.boolean(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookPost$ {
  /** @deprecated use `WebhookPost$inboundSchema` instead. */
  export const inboundSchema = WebhookPost$inboundSchema;
  /** @deprecated use `WebhookPost$outboundSchema` instead. */
  export const outboundSchema = WebhookPost$outboundSchema;
  /** @deprecated use `WebhookPost$Outbound` instead. */
  export type Outbound = WebhookPost$Outbound;
}

export function webhookPostToJSON(webhookPost: WebhookPost): string {
  return JSON.stringify(WebhookPost$outboundSchema.parse(webhookPost));
}

export function webhookPostFromJSON(
  jsonString: string,
): SafeParseResult<WebhookPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookPost' from JSON`,
  );
}
