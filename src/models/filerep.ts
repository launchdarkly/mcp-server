/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FileRep = {
  /**
   * The imported file name, including the extension
   */
  filename?: string | undefined;
  /**
   * The imported file status
   */
  status?: string | undefined;
};

/** @internal */
export const FileRep$inboundSchema: z.ZodType<FileRep, z.ZodTypeDef, unknown> =
  z.object({
    filename: z.string().optional(),
    status: z.string().optional(),
  });

/** @internal */
export type FileRep$Outbound = {
  filename?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const FileRep$outboundSchema: z.ZodType<
  FileRep$Outbound,
  z.ZodTypeDef,
  FileRep
> = z.object({
  filename: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileRep$ {
  /** @deprecated use `FileRep$inboundSchema` instead. */
  export const inboundSchema = FileRep$inboundSchema;
  /** @deprecated use `FileRep$outboundSchema` instead. */
  export const outboundSchema = FileRep$outboundSchema;
  /** @deprecated use `FileRep$Outbound` instead. */
  export type Outbound = FileRep$Outbound;
}

export function fileRepToJSON(fileRep: FileRep): string {
  return JSON.stringify(FileRep$outboundSchema.parse(fileRep));
}

export function fileRepFromJSON(
  jsonString: string,
): SafeParseResult<FileRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileRep' from JSON`,
  );
}
