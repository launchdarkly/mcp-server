/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IntegrationDeliveryConfigurationResponse = {
  /**
   * The status code returned by the validation
   */
  statusCode?: number | undefined;
  error?: string | undefined;
  timestamp?: number | undefined;
  /**
   * JSON response to the validation request
   */
  responseBody?: string | undefined;
};

/** @internal */
export const IntegrationDeliveryConfigurationResponse$inboundSchema: z.ZodType<
  IntegrationDeliveryConfigurationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number().int().optional(),
  error: z.string().optional(),
  timestamp: z.number().int().optional(),
  responseBody: z.string().optional(),
});

/** @internal */
export type IntegrationDeliveryConfigurationResponse$Outbound = {
  statusCode?: number | undefined;
  error?: string | undefined;
  timestamp?: number | undefined;
  responseBody?: string | undefined;
};

/** @internal */
export const IntegrationDeliveryConfigurationResponse$outboundSchema: z.ZodType<
  IntegrationDeliveryConfigurationResponse$Outbound,
  z.ZodTypeDef,
  IntegrationDeliveryConfigurationResponse
> = z.object({
  statusCode: z.number().int().optional(),
  error: z.string().optional(),
  timestamp: z.number().int().optional(),
  responseBody: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationDeliveryConfigurationResponse$ {
  /** @deprecated use `IntegrationDeliveryConfigurationResponse$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationDeliveryConfigurationResponse$inboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationResponse$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationDeliveryConfigurationResponse$outboundSchema;
  /** @deprecated use `IntegrationDeliveryConfigurationResponse$Outbound` instead. */
  export type Outbound = IntegrationDeliveryConfigurationResponse$Outbound;
}

export function integrationDeliveryConfigurationResponseToJSON(
  integrationDeliveryConfigurationResponse:
    IntegrationDeliveryConfigurationResponse,
): string {
  return JSON.stringify(
    IntegrationDeliveryConfigurationResponse$outboundSchema.parse(
      integrationDeliveryConfigurationResponse,
    ),
  );
}

export function integrationDeliveryConfigurationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationDeliveryConfigurationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationDeliveryConfigurationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IntegrationDeliveryConfigurationResponse' from JSON`,
  );
}
