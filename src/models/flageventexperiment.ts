/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagEventExperimentIteration,
  FlagEventExperimentIteration$inboundSchema,
  FlagEventExperimentIteration$Outbound,
  FlagEventExperimentIteration$outboundSchema,
} from "./flageventexperimentiteration.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type FlagEventExperiment = {
  /**
   * The experiment key
   */
  key: string;
  /**
   * The experiment name
   */
  name: string;
  iteration: FlagEventExperimentIteration;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
};

/** @internal */
export const FlagEventExperiment$inboundSchema: z.ZodType<
  FlagEventExperiment,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  name: z.string(),
  iteration: FlagEventExperimentIteration$inboundSchema,
  _links: z.record(Link$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FlagEventExperiment$Outbound = {
  key: string;
  name: string;
  iteration: FlagEventExperimentIteration$Outbound;
  _links?: { [k: string]: Link$Outbound } | undefined;
};

/** @internal */
export const FlagEventExperiment$outboundSchema: z.ZodType<
  FlagEventExperiment$Outbound,
  z.ZodTypeDef,
  FlagEventExperiment
> = z.object({
  key: z.string(),
  name: z.string(),
  iteration: FlagEventExperimentIteration$outboundSchema,
  links: z.record(Link$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagEventExperiment$ {
  /** @deprecated use `FlagEventExperiment$inboundSchema` instead. */
  export const inboundSchema = FlagEventExperiment$inboundSchema;
  /** @deprecated use `FlagEventExperiment$outboundSchema` instead. */
  export const outboundSchema = FlagEventExperiment$outboundSchema;
  /** @deprecated use `FlagEventExperiment$Outbound` instead. */
  export type Outbound = FlagEventExperiment$Outbound;
}

export function flagEventExperimentToJSON(
  flagEventExperiment: FlagEventExperiment,
): string {
  return JSON.stringify(
    FlagEventExperiment$outboundSchema.parse(flagEventExperiment),
  );
}

export function flagEventExperimentFromJSON(
  jsonString: string,
): SafeParseResult<FlagEventExperiment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagEventExperiment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagEventExperiment' from JSON`,
  );
}
