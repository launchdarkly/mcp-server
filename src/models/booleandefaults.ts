/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BooleanDefaults = {
  /**
   * The display name for the true variation, displayed in the LaunchDarkly user interface
   */
  trueDisplayName?: string | undefined;
  /**
   * The display name for the false variation, displayed in the LaunchDarkly user interface
   */
  falseDisplayName?: string | undefined;
  /**
   * The description for the true variation
   */
  trueDescription?: string | undefined;
  /**
   * The description for the false variation
   */
  falseDescription?: string | undefined;
  /**
   * The variation index of the flag variation to use for the default targeting behavior when a flag's targeting is on and the target did not match any rules
   */
  onVariation?: number | undefined;
  /**
   * The variation index of the flag variation to use for the default targeting behavior when a flag's targeting is off
   */
  offVariation?: number | undefined;
};

/** @internal */
export const BooleanDefaults$inboundSchema: z.ZodType<
  BooleanDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  trueDisplayName: z.string().optional(),
  falseDisplayName: z.string().optional(),
  trueDescription: z.string().optional(),
  falseDescription: z.string().optional(),
  onVariation: z.number().int().optional(),
  offVariation: z.number().int().optional(),
});

/** @internal */
export type BooleanDefaults$Outbound = {
  trueDisplayName?: string | undefined;
  falseDisplayName?: string | undefined;
  trueDescription?: string | undefined;
  falseDescription?: string | undefined;
  onVariation?: number | undefined;
  offVariation?: number | undefined;
};

/** @internal */
export const BooleanDefaults$outboundSchema: z.ZodType<
  BooleanDefaults$Outbound,
  z.ZodTypeDef,
  BooleanDefaults
> = z.object({
  trueDisplayName: z.string().optional(),
  falseDisplayName: z.string().optional(),
  trueDescription: z.string().optional(),
  falseDescription: z.string().optional(),
  onVariation: z.number().int().optional(),
  offVariation: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BooleanDefaults$ {
  /** @deprecated use `BooleanDefaults$inboundSchema` instead. */
  export const inboundSchema = BooleanDefaults$inboundSchema;
  /** @deprecated use `BooleanDefaults$outboundSchema` instead. */
  export const outboundSchema = BooleanDefaults$outboundSchema;
  /** @deprecated use `BooleanDefaults$Outbound` instead. */
  export type Outbound = BooleanDefaults$Outbound;
}

export function booleanDefaultsToJSON(
  booleanDefaults: BooleanDefaults,
): string {
  return JSON.stringify(BooleanDefaults$outboundSchema.parse(booleanDefaults));
}

export function booleanDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<BooleanDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BooleanDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BooleanDefaults' from JSON`,
  );
}
