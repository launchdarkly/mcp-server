/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ProjectSummary,
  ProjectSummary$inboundSchema,
  ProjectSummary$Outbound,
  ProjectSummary$outboundSchema,
} from "./projectsummary.js";

export type TeamProjects = {
  totalCount?: number | undefined;
  /**
   * Details on each project where team members have write privileges on at least one resource type (e.g. flags)
   */
  items?: Array<ProjectSummary> | undefined;
};

/** @internal */
export const TeamProjects$inboundSchema: z.ZodType<
  TeamProjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().int().optional(),
  items: z.array(ProjectSummary$inboundSchema).optional(),
});

/** @internal */
export type TeamProjects$Outbound = {
  totalCount?: number | undefined;
  items?: Array<ProjectSummary$Outbound> | undefined;
};

/** @internal */
export const TeamProjects$outboundSchema: z.ZodType<
  TeamProjects$Outbound,
  z.ZodTypeDef,
  TeamProjects
> = z.object({
  totalCount: z.number().int().optional(),
  items: z.array(ProjectSummary$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamProjects$ {
  /** @deprecated use `TeamProjects$inboundSchema` instead. */
  export const inboundSchema = TeamProjects$inboundSchema;
  /** @deprecated use `TeamProjects$outboundSchema` instead. */
  export const outboundSchema = TeamProjects$outboundSchema;
  /** @deprecated use `TeamProjects$Outbound` instead. */
  export type Outbound = TeamProjects$Outbound;
}

export function teamProjectsToJSON(teamProjects: TeamProjects): string {
  return JSON.stringify(TeamProjects$outboundSchema.parse(teamProjects));
}

export function teamProjectsFromJSON(
  jsonString: string,
): SafeParseResult<TeamProjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamProjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamProjects' from JSON`,
  );
}
