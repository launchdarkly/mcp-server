/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpsertContextKindPayload = {
  /**
   * The context kind name
   */
  name: string;
  /**
   * The context kind description
   */
  description?: string | undefined;
  /**
   * Alias for archived.
   */
  hideInTargeting?: boolean | undefined;
  /**
   * Whether the context kind is archived. Archived context kinds are unavailable for targeting.
   */
  archived?: boolean | undefined;
  /**
   * The context kind version. If not specified when the context kind is created, defaults to 1.
   */
  version?: number | undefined;
};

/** @internal */
export const UpsertContextKindPayload$inboundSchema: z.ZodType<
  UpsertContextKindPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  hideInTargeting: z.boolean().optional(),
  archived: z.boolean().optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type UpsertContextKindPayload$Outbound = {
  name: string;
  description?: string | undefined;
  hideInTargeting?: boolean | undefined;
  archived?: boolean | undefined;
  version?: number | undefined;
};

/** @internal */
export const UpsertContextKindPayload$outboundSchema: z.ZodType<
  UpsertContextKindPayload$Outbound,
  z.ZodTypeDef,
  UpsertContextKindPayload
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  hideInTargeting: z.boolean().optional(),
  archived: z.boolean().optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertContextKindPayload$ {
  /** @deprecated use `UpsertContextKindPayload$inboundSchema` instead. */
  export const inboundSchema = UpsertContextKindPayload$inboundSchema;
  /** @deprecated use `UpsertContextKindPayload$outboundSchema` instead. */
  export const outboundSchema = UpsertContextKindPayload$outboundSchema;
  /** @deprecated use `UpsertContextKindPayload$Outbound` instead. */
  export type Outbound = UpsertContextKindPayload$Outbound;
}

export function upsertContextKindPayloadToJSON(
  upsertContextKindPayload: UpsertContextKindPayload,
): string {
  return JSON.stringify(
    UpsertContextKindPayload$outboundSchema.parse(upsertContextKindPayload),
  );
}

export function upsertContextKindPayloadFromJSON(
  jsonString: string,
): SafeParseResult<UpsertContextKindPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertContextKindPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertContextKindPayload' from JSON`,
  );
}
