/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of change to make to the context's removal date from this segment
 */
export const PatchSegmentExpiringTargetInstructionKind = {
  AddExpiringTarget: "addExpiringTarget",
  UpdateExpiringTarget: "updateExpiringTarget",
  RemoveExpiringTarget: "removeExpiringTarget",
} as const;
/**
 * The type of change to make to the context's removal date from this segment
 */
export type PatchSegmentExpiringTargetInstructionKind = ClosedEnum<
  typeof PatchSegmentExpiringTargetInstructionKind
>;

/**
 * The segment's target type
 */
export const PatchSegmentExpiringTargetInstructionTargetType = {
  Included: "included",
  Excluded: "excluded",
} as const;
/**
 * The segment's target type
 */
export type PatchSegmentExpiringTargetInstructionTargetType = ClosedEnum<
  typeof PatchSegmentExpiringTargetInstructionTargetType
>;

export type PatchSegmentExpiringTargetInstruction = {
  /**
   * The type of change to make to the context's removal date from this segment
   */
  kind: PatchSegmentExpiringTargetInstructionKind;
  /**
   * A unique key used to represent the context
   */
  contextKey: string;
  /**
   * The kind of context
   */
  contextKind: string;
  /**
   * The segment's target type
   */
  targetType: PatchSegmentExpiringTargetInstructionTargetType;
  /**
   * The time, in Unix milliseconds, when the context should be removed from this segment. Required if <code>kind</code> is <code>addExpiringTarget</code> or <code>updateExpiringTarget</code>.
   */
  value?: number | undefined;
  /**
   * The version of the expiring target to update. Optional and only used if <code>kind</code> is <code>updateExpiringTarget</code>. If included, update will fail if version doesn't match current version of the expiring target.
   */
  version?: number | undefined;
};

/** @internal */
export const PatchSegmentExpiringTargetInstructionKind$inboundSchema:
  z.ZodNativeEnum<typeof PatchSegmentExpiringTargetInstructionKind> = z
    .nativeEnum(PatchSegmentExpiringTargetInstructionKind);

/** @internal */
export const PatchSegmentExpiringTargetInstructionKind$outboundSchema:
  z.ZodNativeEnum<typeof PatchSegmentExpiringTargetInstructionKind> =
    PatchSegmentExpiringTargetInstructionKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentExpiringTargetInstructionKind$ {
  /** @deprecated use `PatchSegmentExpiringTargetInstructionKind$inboundSchema` instead. */
  export const inboundSchema =
    PatchSegmentExpiringTargetInstructionKind$inboundSchema;
  /** @deprecated use `PatchSegmentExpiringTargetInstructionKind$outboundSchema` instead. */
  export const outboundSchema =
    PatchSegmentExpiringTargetInstructionKind$outboundSchema;
}

/** @internal */
export const PatchSegmentExpiringTargetInstructionTargetType$inboundSchema:
  z.ZodNativeEnum<typeof PatchSegmentExpiringTargetInstructionTargetType> = z
    .nativeEnum(PatchSegmentExpiringTargetInstructionTargetType);

/** @internal */
export const PatchSegmentExpiringTargetInstructionTargetType$outboundSchema:
  z.ZodNativeEnum<typeof PatchSegmentExpiringTargetInstructionTargetType> =
    PatchSegmentExpiringTargetInstructionTargetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentExpiringTargetInstructionTargetType$ {
  /** @deprecated use `PatchSegmentExpiringTargetInstructionTargetType$inboundSchema` instead. */
  export const inboundSchema =
    PatchSegmentExpiringTargetInstructionTargetType$inboundSchema;
  /** @deprecated use `PatchSegmentExpiringTargetInstructionTargetType$outboundSchema` instead. */
  export const outboundSchema =
    PatchSegmentExpiringTargetInstructionTargetType$outboundSchema;
}

/** @internal */
export const PatchSegmentExpiringTargetInstruction$inboundSchema: z.ZodType<
  PatchSegmentExpiringTargetInstruction,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: PatchSegmentExpiringTargetInstructionKind$inboundSchema,
  contextKey: z.string(),
  contextKind: z.string(),
  targetType: PatchSegmentExpiringTargetInstructionTargetType$inboundSchema,
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type PatchSegmentExpiringTargetInstruction$Outbound = {
  kind: string;
  contextKey: string;
  contextKind: string;
  targetType: string;
  value?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const PatchSegmentExpiringTargetInstruction$outboundSchema: z.ZodType<
  PatchSegmentExpiringTargetInstruction$Outbound,
  z.ZodTypeDef,
  PatchSegmentExpiringTargetInstruction
> = z.object({
  kind: PatchSegmentExpiringTargetInstructionKind$outboundSchema,
  contextKey: z.string(),
  contextKind: z.string(),
  targetType: PatchSegmentExpiringTargetInstructionTargetType$outboundSchema,
  value: z.number().int().optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSegmentExpiringTargetInstruction$ {
  /** @deprecated use `PatchSegmentExpiringTargetInstruction$inboundSchema` instead. */
  export const inboundSchema =
    PatchSegmentExpiringTargetInstruction$inboundSchema;
  /** @deprecated use `PatchSegmentExpiringTargetInstruction$outboundSchema` instead. */
  export const outboundSchema =
    PatchSegmentExpiringTargetInstruction$outboundSchema;
  /** @deprecated use `PatchSegmentExpiringTargetInstruction$Outbound` instead. */
  export type Outbound = PatchSegmentExpiringTargetInstruction$Outbound;
}

export function patchSegmentExpiringTargetInstructionToJSON(
  patchSegmentExpiringTargetInstruction: PatchSegmentExpiringTargetInstruction,
): string {
  return JSON.stringify(
    PatchSegmentExpiringTargetInstruction$outboundSchema.parse(
      patchSegmentExpiringTargetInstruction,
    ),
  );
}

export function patchSegmentExpiringTargetInstructionFromJSON(
  jsonString: string,
): SafeParseResult<PatchSegmentExpiringTargetInstruction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchSegmentExpiringTargetInstruction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSegmentExpiringTargetInstruction' from JSON`,
  );
}
