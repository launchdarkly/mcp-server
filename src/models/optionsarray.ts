/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OptionsArray = {
  label?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const OptionsArray$inboundSchema: z.ZodType<
  OptionsArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type OptionsArray$Outbound = {
  label?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const OptionsArray$outboundSchema: z.ZodType<
  OptionsArray$Outbound,
  z.ZodTypeDef,
  OptionsArray
> = z.object({
  label: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OptionsArray$ {
  /** @deprecated use `OptionsArray$inboundSchema` instead. */
  export const inboundSchema = OptionsArray$inboundSchema;
  /** @deprecated use `OptionsArray$outboundSchema` instead. */
  export const outboundSchema = OptionsArray$outboundSchema;
  /** @deprecated use `OptionsArray$Outbound` instead. */
  export type Outbound = OptionsArray$Outbound;
}

export function optionsArrayToJSON(optionsArray: OptionsArray): string {
  return JSON.stringify(OptionsArray$outboundSchema.parse(optionsArray));
}

export function optionsArrayFromJSON(
  jsonString: string,
): SafeParseResult<OptionsArray, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OptionsArray$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OptionsArray' from JSON`,
  );
}
