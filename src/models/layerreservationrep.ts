/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type LayerReservationRep = {
  /**
   * The key of the experiment
   */
  experimentKey: string;
  /**
   * The key of the flag
   */
  flagKey: string;
  /**
   * The percentage of traffic reserved for the experiment
   */
  reservationPercent: number;
};

/** @internal */
export const LayerReservationRep$inboundSchema: z.ZodType<
  LayerReservationRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentKey: z.string(),
  flagKey: z.string(),
  reservationPercent: z.number().int(),
});

/** @internal */
export type LayerReservationRep$Outbound = {
  experimentKey: string;
  flagKey: string;
  reservationPercent: number;
};

/** @internal */
export const LayerReservationRep$outboundSchema: z.ZodType<
  LayerReservationRep$Outbound,
  z.ZodTypeDef,
  LayerReservationRep
> = z.object({
  experimentKey: z.string(),
  flagKey: z.string(),
  reservationPercent: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayerReservationRep$ {
  /** @deprecated use `LayerReservationRep$inboundSchema` instead. */
  export const inboundSchema = LayerReservationRep$inboundSchema;
  /** @deprecated use `LayerReservationRep$outboundSchema` instead. */
  export const outboundSchema = LayerReservationRep$outboundSchema;
  /** @deprecated use `LayerReservationRep$Outbound` instead. */
  export type Outbound = LayerReservationRep$Outbound;
}

export function layerReservationRepToJSON(
  layerReservationRep: LayerReservationRep,
): string {
  return JSON.stringify(
    LayerReservationRep$outboundSchema.parse(layerReservationRep),
  );
}

export function layerReservationRepFromJSON(
  jsonString: string,
): SafeParseResult<LayerReservationRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayerReservationRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayerReservationRep' from JSON`,
  );
}
