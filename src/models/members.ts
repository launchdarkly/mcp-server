/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Member,
  Member$inboundSchema,
  Member$Outbound,
  Member$outboundSchema,
} from "./member.js";

export type Members = {
  /**
   * An array of members
   */
  items: Array<Member>;
  /**
   * The location and content type of related resources
   */
  links: { [k: string]: Link };
  /**
   * The number of members returned
   */
  totalCount?: number | undefined;
};

/** @internal */
export const Members$inboundSchema: z.ZodType<Members, z.ZodTypeDef, unknown> =
  z.object({
    items: z.array(Member$inboundSchema),
    _links: z.record(Link$inboundSchema),
    totalCount: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Members$Outbound = {
  items: Array<Member$Outbound>;
  _links: { [k: string]: Link$Outbound };
  totalCount?: number | undefined;
};

/** @internal */
export const Members$outboundSchema: z.ZodType<
  Members$Outbound,
  z.ZodTypeDef,
  Members
> = z.object({
  items: z.array(Member$outboundSchema),
  links: z.record(Link$outboundSchema),
  totalCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Members$ {
  /** @deprecated use `Members$inboundSchema` instead. */
  export const inboundSchema = Members$inboundSchema;
  /** @deprecated use `Members$outboundSchema` instead. */
  export const outboundSchema = Members$outboundSchema;
  /** @deprecated use `Members$Outbound` instead. */
  export type Outbound = Members$Outbound;
}

export function membersToJSON(members: Members): string {
  return JSON.stringify(Members$outboundSchema.parse(members));
}

export function membersFromJSON(
  jsonString: string,
): SafeParseResult<Members, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Members$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Members' from JSON`,
  );
}
