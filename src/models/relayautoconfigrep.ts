/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MemberSummary,
  MemberSummary$inboundSchema,
  MemberSummary$Outbound,
  MemberSummary$outboundSchema,
} from "./membersummary.js";
import {
  Statement,
  Statement$inboundSchema,
  Statement$Outbound,
  Statement$outboundSchema,
} from "./statement.js";

export type RelayAutoConfigRep = {
  id: string;
  creator?: MemberSummary | undefined;
  access?: Access | undefined;
  /**
   * A human-friendly name for the Relay Proxy configuration
   */
  name: string;
  /**
   * A description of what environments and projects the Relay Proxy should include or exclude
   */
  policy: Array<Statement>;
  /**
   * The Relay Proxy configuration key
   */
  fullKey: string;
  /**
   * The last few characters of the Relay Proxy configuration key, displayed in the LaunchDarkly UI
   */
  displayKey: string;
  creationDate: number;
  lastModified: number;
};

/** @internal */
export const RelayAutoConfigRep$inboundSchema: z.ZodType<
  RelayAutoConfigRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  _creator: MemberSummary$inboundSchema.optional(),
  _access: Access$inboundSchema.optional(),
  name: z.string(),
  policy: z.array(Statement$inboundSchema),
  fullKey: z.string(),
  displayKey: z.string(),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_creator": "creator",
    "_access": "access",
  });
});

/** @internal */
export type RelayAutoConfigRep$Outbound = {
  _id: string;
  _creator?: MemberSummary$Outbound | undefined;
  _access?: Access$Outbound | undefined;
  name: string;
  policy: Array<Statement$Outbound>;
  fullKey: string;
  displayKey: string;
  creationDate: number;
  lastModified: number;
};

/** @internal */
export const RelayAutoConfigRep$outboundSchema: z.ZodType<
  RelayAutoConfigRep$Outbound,
  z.ZodTypeDef,
  RelayAutoConfigRep
> = z.object({
  id: z.string(),
  creator: MemberSummary$outboundSchema.optional(),
  access: Access$outboundSchema.optional(),
  name: z.string(),
  policy: z.array(Statement$outboundSchema),
  fullKey: z.string(),
  displayKey: z.string(),
  creationDate: z.number().int(),
  lastModified: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    creator: "_creator",
    access: "_access",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelayAutoConfigRep$ {
  /** @deprecated use `RelayAutoConfigRep$inboundSchema` instead. */
  export const inboundSchema = RelayAutoConfigRep$inboundSchema;
  /** @deprecated use `RelayAutoConfigRep$outboundSchema` instead. */
  export const outboundSchema = RelayAutoConfigRep$outboundSchema;
  /** @deprecated use `RelayAutoConfigRep$Outbound` instead. */
  export type Outbound = RelayAutoConfigRep$Outbound;
}

export function relayAutoConfigRepToJSON(
  relayAutoConfigRep: RelayAutoConfigRep,
): string {
  return JSON.stringify(
    RelayAutoConfigRep$outboundSchema.parse(relayAutoConfigRep),
  );
}

export function relayAutoConfigRepFromJSON(
  jsonString: string,
): SafeParseResult<RelayAutoConfigRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelayAutoConfigRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelayAutoConfigRep' from JSON`,
  );
}
