/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The severity of the announcement
 */
export const CreateAnnouncementBodySeverity = {
  Info: "info",
  Warning: "warning",
  Critical: "critical",
} as const;
/**
 * The severity of the announcement
 */
export type CreateAnnouncementBodySeverity = ClosedEnum<
  typeof CreateAnnouncementBodySeverity
>;

/**
 * Create announcement request body
 */
export type CreateAnnouncementBody = {
  /**
   * true if the announcement is dismissible
   */
  isDismissible: boolean;
  /**
   * The title of the announcement
   */
  title: string;
  /**
   * The message of the announcement
   */
  message: string;
  /**
   * The start time of the announcement. This is a Unix timestamp in milliseconds.
   */
  startTime: number;
  /**
   * The end time of the announcement. This is a Unix timestamp in milliseconds.
   */
  endTime?: number | undefined;
  /**
   * The severity of the announcement
   */
  severity: CreateAnnouncementBodySeverity;
};

/** @internal */
export const CreateAnnouncementBodySeverity$inboundSchema: z.ZodNativeEnum<
  typeof CreateAnnouncementBodySeverity
> = z.nativeEnum(CreateAnnouncementBodySeverity);

/** @internal */
export const CreateAnnouncementBodySeverity$outboundSchema: z.ZodNativeEnum<
  typeof CreateAnnouncementBodySeverity
> = CreateAnnouncementBodySeverity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAnnouncementBodySeverity$ {
  /** @deprecated use `CreateAnnouncementBodySeverity$inboundSchema` instead. */
  export const inboundSchema = CreateAnnouncementBodySeverity$inboundSchema;
  /** @deprecated use `CreateAnnouncementBodySeverity$outboundSchema` instead. */
  export const outboundSchema = CreateAnnouncementBodySeverity$outboundSchema;
}

/** @internal */
export const CreateAnnouncementBody$inboundSchema: z.ZodType<
  CreateAnnouncementBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  isDismissible: z.boolean(),
  title: z.string(),
  message: z.string(),
  startTime: z.number().int(),
  endTime: z.number().int().optional(),
  severity: CreateAnnouncementBodySeverity$inboundSchema,
});

/** @internal */
export type CreateAnnouncementBody$Outbound = {
  isDismissible: boolean;
  title: string;
  message: string;
  startTime: number;
  endTime?: number | undefined;
  severity: string;
};

/** @internal */
export const CreateAnnouncementBody$outboundSchema: z.ZodType<
  CreateAnnouncementBody$Outbound,
  z.ZodTypeDef,
  CreateAnnouncementBody
> = z.object({
  isDismissible: z.boolean(),
  title: z.string(),
  message: z.string(),
  startTime: z.number().int(),
  endTime: z.number().int().optional(),
  severity: CreateAnnouncementBodySeverity$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAnnouncementBody$ {
  /** @deprecated use `CreateAnnouncementBody$inboundSchema` instead. */
  export const inboundSchema = CreateAnnouncementBody$inboundSchema;
  /** @deprecated use `CreateAnnouncementBody$outboundSchema` instead. */
  export const outboundSchema = CreateAnnouncementBody$outboundSchema;
  /** @deprecated use `CreateAnnouncementBody$Outbound` instead. */
  export type Outbound = CreateAnnouncementBody$Outbound;
}

export function createAnnouncementBodyToJSON(
  createAnnouncementBody: CreateAnnouncementBody,
): string {
  return JSON.stringify(
    CreateAnnouncementBody$outboundSchema.parse(createAnnouncementBody),
  );
}

export function createAnnouncementBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAnnouncementBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAnnouncementBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAnnouncementBody' from JSON`,
  );
}
