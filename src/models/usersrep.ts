/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  UserRecord,
  UserRecord$inboundSchema,
  UserRecord$Outbound,
  UserRecord$outboundSchema,
} from "./userrecord.js";

export type UsersRep = {
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The total number of users in the environment
   */
  totalCount: number;
  /**
   * Details on the users
   */
  items: Array<UserRecord>;
};

/** @internal */
export const UsersRep$inboundSchema: z.ZodType<
  UsersRep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(Link$inboundSchema).optional(),
  totalCount: z.number().int(),
  items: z.array(UserRecord$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type UsersRep$Outbound = {
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalCount: number;
  items: Array<UserRecord$Outbound>;
};

/** @internal */
export const UsersRep$outboundSchema: z.ZodType<
  UsersRep$Outbound,
  z.ZodTypeDef,
  UsersRep
> = z.object({
  links: z.record(Link$outboundSchema).optional(),
  totalCount: z.number().int(),
  items: z.array(UserRecord$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersRep$ {
  /** @deprecated use `UsersRep$inboundSchema` instead. */
  export const inboundSchema = UsersRep$inboundSchema;
  /** @deprecated use `UsersRep$outboundSchema` instead. */
  export const outboundSchema = UsersRep$outboundSchema;
  /** @deprecated use `UsersRep$Outbound` instead. */
  export type Outbound = UsersRep$Outbound;
}

export function usersRepToJSON(usersRep: UsersRep): string {
  return JSON.stringify(UsersRep$outboundSchema.parse(usersRep));
}

export function usersRepFromJSON(
  jsonString: string,
): SafeParseResult<UsersRep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersRep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersRep' from JSON`,
  );
}
