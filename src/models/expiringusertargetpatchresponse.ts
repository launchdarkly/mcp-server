/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExpiringTargetError,
  ExpiringTargetError$inboundSchema,
  ExpiringTargetError$Outbound,
  ExpiringTargetError$outboundSchema,
} from "./expiringtargeterror.js";
import {
  ExpiringUserTargetItem,
  ExpiringUserTargetItem$inboundSchema,
  ExpiringUserTargetItem$Outbound,
  ExpiringUserTargetItem$outboundSchema,
} from "./expiringusertargetitem.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type ExpiringUserTargetPatchResponse = {
  /**
   * An array of expiring user targets
   */
  items: Array<ExpiringUserTargetItem>;
  /**
   * The location and content type of related resources
   */
  links?: { [k: string]: Link } | undefined;
  /**
   * The total count of instructions sent in the PATCH request
   */
  totalInstructions?: number | undefined;
  /**
   * The total count of successful instructions sent in the PATCH request
   */
  successfulInstructions?: number | undefined;
  /**
   * The total count of the failed instructions sent in the PATCH request
   */
  failedInstructions?: number | undefined;
  /**
   * An array of error messages for the failed instructions
   */
  errors?: Array<ExpiringTargetError> | undefined;
};

/** @internal */
export const ExpiringUserTargetPatchResponse$inboundSchema: z.ZodType<
  ExpiringUserTargetPatchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(ExpiringUserTargetItem$inboundSchema),
  _links: z.record(Link$inboundSchema).optional(),
  totalInstructions: z.number().int().optional(),
  successfulInstructions: z.number().int().optional(),
  failedInstructions: z.number().int().optional(),
  errors: z.array(ExpiringTargetError$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type ExpiringUserTargetPatchResponse$Outbound = {
  items: Array<ExpiringUserTargetItem$Outbound>;
  _links?: { [k: string]: Link$Outbound } | undefined;
  totalInstructions?: number | undefined;
  successfulInstructions?: number | undefined;
  failedInstructions?: number | undefined;
  errors?: Array<ExpiringTargetError$Outbound> | undefined;
};

/** @internal */
export const ExpiringUserTargetPatchResponse$outboundSchema: z.ZodType<
  ExpiringUserTargetPatchResponse$Outbound,
  z.ZodTypeDef,
  ExpiringUserTargetPatchResponse
> = z.object({
  items: z.array(ExpiringUserTargetItem$outboundSchema),
  links: z.record(Link$outboundSchema).optional(),
  totalInstructions: z.number().int().optional(),
  successfulInstructions: z.number().int().optional(),
  failedInstructions: z.number().int().optional(),
  errors: z.array(ExpiringTargetError$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiringUserTargetPatchResponse$ {
  /** @deprecated use `ExpiringUserTargetPatchResponse$inboundSchema` instead. */
  export const inboundSchema = ExpiringUserTargetPatchResponse$inboundSchema;
  /** @deprecated use `ExpiringUserTargetPatchResponse$outboundSchema` instead. */
  export const outboundSchema = ExpiringUserTargetPatchResponse$outboundSchema;
  /** @deprecated use `ExpiringUserTargetPatchResponse$Outbound` instead. */
  export type Outbound = ExpiringUserTargetPatchResponse$Outbound;
}

export function expiringUserTargetPatchResponseToJSON(
  expiringUserTargetPatchResponse: ExpiringUserTargetPatchResponse,
): string {
  return JSON.stringify(
    ExpiringUserTargetPatchResponse$outboundSchema.parse(
      expiringUserTargetPatchResponse,
    ),
  );
}

export function expiringUserTargetPatchResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExpiringUserTargetPatchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiringUserTargetPatchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiringUserTargetPatchResponse' from JSON`,
  );
}
