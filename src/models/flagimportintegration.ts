/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Access,
  Access$inboundSchema,
  Access$Outbound,
  Access$outboundSchema,
} from "./access.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FlagImportIntegrationLinks,
  FlagImportIntegrationLinks$inboundSchema,
  FlagImportIntegrationLinks$Outbound,
  FlagImportIntegrationLinks$outboundSchema,
} from "./flagimportintegrationlinks.js";
import {
  FlagImportStatus,
  FlagImportStatus$inboundSchema,
  FlagImportStatus$Outbound,
  FlagImportStatus$outboundSchema,
} from "./flagimportstatus.js";

/**
 * The integration key
 */
export const FlagImportIntegrationIntegrationKey = {
  Split: "split",
  Unleash: "unleash",
} as const;
/**
 * The integration key
 */
export type FlagImportIntegrationIntegrationKey = ClosedEnum<
  typeof FlagImportIntegrationIntegrationKey
>;

export type FlagImportIntegration = {
  links: FlagImportIntegrationLinks;
  /**
   * The integration ID
   */
  id: string;
  /**
   * The integration key
   */
  integrationKey: FlagImportIntegrationIntegrationKey;
  /**
   * The project key
   */
  projectKey: string;
  config: { [k: string]: any };
  /**
   * List of tags for this configuration
   */
  tags: Array<string>;
  /**
   * Name of the configuration
   */
  name: string;
  /**
   * Version of the current configuration
   */
  version: number;
  access?: Access | undefined;
  status: FlagImportStatus;
};

/** @internal */
export const FlagImportIntegrationIntegrationKey$inboundSchema: z.ZodNativeEnum<
  typeof FlagImportIntegrationIntegrationKey
> = z.nativeEnum(FlagImportIntegrationIntegrationKey);

/** @internal */
export const FlagImportIntegrationIntegrationKey$outboundSchema:
  z.ZodNativeEnum<typeof FlagImportIntegrationIntegrationKey> =
    FlagImportIntegrationIntegrationKey$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportIntegrationIntegrationKey$ {
  /** @deprecated use `FlagImportIntegrationIntegrationKey$inboundSchema` instead. */
  export const inboundSchema =
    FlagImportIntegrationIntegrationKey$inboundSchema;
  /** @deprecated use `FlagImportIntegrationIntegrationKey$outboundSchema` instead. */
  export const outboundSchema =
    FlagImportIntegrationIntegrationKey$outboundSchema;
}

/** @internal */
export const FlagImportIntegration$inboundSchema: z.ZodType<
  FlagImportIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: FlagImportIntegrationLinks$inboundSchema,
  _id: z.string(),
  integrationKey: FlagImportIntegrationIntegrationKey$inboundSchema,
  projectKey: z.string(),
  config: z.record(z.any()),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  _access: Access$inboundSchema.optional(),
  _status: FlagImportStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_id": "id",
    "_access": "access",
    "_status": "status",
  });
});

/** @internal */
export type FlagImportIntegration$Outbound = {
  _links: FlagImportIntegrationLinks$Outbound;
  _id: string;
  integrationKey: string;
  projectKey: string;
  config: { [k: string]: any };
  tags: Array<string>;
  name: string;
  version: number;
  _access?: Access$Outbound | undefined;
  _status: FlagImportStatus$Outbound;
};

/** @internal */
export const FlagImportIntegration$outboundSchema: z.ZodType<
  FlagImportIntegration$Outbound,
  z.ZodTypeDef,
  FlagImportIntegration
> = z.object({
  links: FlagImportIntegrationLinks$outboundSchema,
  id: z.string(),
  integrationKey: FlagImportIntegrationIntegrationKey$outboundSchema,
  projectKey: z.string(),
  config: z.record(z.any()),
  tags: z.array(z.string()),
  name: z.string(),
  version: z.number().int(),
  access: Access$outboundSchema.optional(),
  status: FlagImportStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    id: "_id",
    access: "_access",
    status: "_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagImportIntegration$ {
  /** @deprecated use `FlagImportIntegration$inboundSchema` instead. */
  export const inboundSchema = FlagImportIntegration$inboundSchema;
  /** @deprecated use `FlagImportIntegration$outboundSchema` instead. */
  export const outboundSchema = FlagImportIntegration$outboundSchema;
  /** @deprecated use `FlagImportIntegration$Outbound` instead. */
  export type Outbound = FlagImportIntegration$Outbound;
}

export function flagImportIntegrationToJSON(
  flagImportIntegration: FlagImportIntegration,
): string {
  return JSON.stringify(
    FlagImportIntegration$outboundSchema.parse(flagImportIntegration),
  );
}

export function flagImportIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<FlagImportIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagImportIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagImportIntegration' from JSON`,
  );
}
