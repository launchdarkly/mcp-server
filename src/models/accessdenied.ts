/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccessDeniedReason,
  AccessDeniedReason$inboundSchema,
  AccessDeniedReason$Outbound,
  AccessDeniedReason$outboundSchema,
} from "./accessdeniedreason.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AccessDenied = {
  action: string;
  reason: AccessDeniedReason;
};

/** @internal */
export const AccessDenied$inboundSchema: z.ZodType<
  AccessDenied,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  reason: AccessDeniedReason$inboundSchema,
});

/** @internal */
export type AccessDenied$Outbound = {
  action: string;
  reason: AccessDeniedReason$Outbound;
};

/** @internal */
export const AccessDenied$outboundSchema: z.ZodType<
  AccessDenied$Outbound,
  z.ZodTypeDef,
  AccessDenied
> = z.object({
  action: z.string(),
  reason: AccessDeniedReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessDenied$ {
  /** @deprecated use `AccessDenied$inboundSchema` instead. */
  export const inboundSchema = AccessDenied$inboundSchema;
  /** @deprecated use `AccessDenied$outboundSchema` instead. */
  export const outboundSchema = AccessDenied$outboundSchema;
  /** @deprecated use `AccessDenied$Outbound` instead. */
  export type Outbound = AccessDenied$Outbound;
}

export function accessDeniedToJSON(accessDenied: AccessDenied): string {
  return JSON.stringify(AccessDenied$outboundSchema.parse(accessDenied));
}

export function accessDeniedFromJSON(
  jsonString: string,
): SafeParseResult<AccessDenied, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessDenied$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessDenied' from JSON`,
  );
}
