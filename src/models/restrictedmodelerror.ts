/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RestrictedModelError = {
  key: string;
  message: string;
  code: number;
};

/** @internal */
export const RestrictedModelError$inboundSchema: z.ZodType<
  RestrictedModelError,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  message: z.string(),
  code: z.number().int(),
});

/** @internal */
export type RestrictedModelError$Outbound = {
  key: string;
  message: string;
  code: number;
};

/** @internal */
export const RestrictedModelError$outboundSchema: z.ZodType<
  RestrictedModelError$Outbound,
  z.ZodTypeDef,
  RestrictedModelError
> = z.object({
  key: z.string(),
  message: z.string(),
  code: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestrictedModelError$ {
  /** @deprecated use `RestrictedModelError$inboundSchema` instead. */
  export const inboundSchema = RestrictedModelError$inboundSchema;
  /** @deprecated use `RestrictedModelError$outboundSchema` instead. */
  export const outboundSchema = RestrictedModelError$outboundSchema;
  /** @deprecated use `RestrictedModelError$Outbound` instead. */
  export type Outbound = RestrictedModelError$Outbound;
}

export function restrictedModelErrorToJSON(
  restrictedModelError: RestrictedModelError,
): string {
  return JSON.stringify(
    RestrictedModelError$outboundSchema.parse(restrictedModelError),
  );
}

export function restrictedModelErrorFromJSON(
  jsonString: string,
): SafeParseResult<RestrictedModelError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestrictedModelError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestrictedModelError' from JSON`,
  );
}
