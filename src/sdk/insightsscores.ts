/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsScoresCreateGroup } from "../funcs/insightsScoresCreateGroup.js";
import { insightsScoresDeleteGroup } from "../funcs/insightsScoresDeleteGroup.js";
import { insightsScoresGet } from "../funcs/insightsScoresGet.js";
import { insightsScoresGetGroup } from "../funcs/insightsScoresGetGroup.js";
import { insightsScoresList } from "../funcs/insightsScoresList.js";
import { insightsScoresUpdateGroup } from "../funcs/insightsScoresUpdateGroup.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class InsightsScores extends ClientSDK {
  /**
   * Create insight group
   *
   * @remarks
   * Create insight group
   */
  async createGroup(
    request: components.PostInsightGroupParams,
    options?: RequestOptions,
  ): Promise<components.InsightGroup> {
    return unwrapAsync(insightsScoresCreateGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * List insight groups
   *
   * @remarks
   * List groups for which you are collecting insights
   *
   * ### Expanding the insight groups collection response
   *
   * LaunchDarkly supports expanding the insight groups collection response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `scores` includes details on all of the scores used in the engineering insights metrics views for each group
   * * `environment` includes details on each environment associated with each group
   * * `metadata` includes counts of the number of insight groups with particular indicators, such as "excellent," "good," "fair," and so on.
   *
   * For example, use `?expand=scores` to include the `scores` field in the response. By default, this field is **not** included in the response.
   */
  async list(
    request: operations.GetInsightGroupsRequest,
    options?: RequestOptions,
  ): Promise<components.InsightGroupCollection> {
    return unwrapAsync(insightsScoresList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get insight group
   *
   * @remarks
   * Get insight group
   *
   * ### Expanding the insight group response
   *
   * LaunchDarkly supports expanding the insight group response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `scores` includes details on all of the scores used in the engineering insights metrics views for this group
   * * `environment` includes details on each environment associated with this group
   *
   * For example, use `?expand=scores` to include the `scores` field in the response. By default, this field is **not** included in the response.
   */
  async getGroup(
    request: operations.GetInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<components.InsightGroup> {
    return unwrapAsync(insightsScoresGetGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch insight group
   *
   * @remarks
   * Update an insight group. Updating an insight group uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async updateGroup(
    request: operations.PatchInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<components.InsightGroup> {
    return unwrapAsync(insightsScoresUpdateGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete insight group
   *
   * @remarks
   * Delete insight group
   */
  async deleteGroup(
    request: operations.DeleteInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(insightsScoresDeleteGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get insight scores
   *
   * @remarks
   * Return insights scores, based on the given parameters. This data is also used in engineering insights metrics views.
   */
  async get(
    request: operations.GetInsightsScoresRequest,
    options?: RequestOptions,
  ): Promise<components.InsightScores> {
    return unwrapAsync(insightsScoresGet(
      this,
      request,
      options,
    ));
  }
}
