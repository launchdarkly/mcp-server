/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsRepositoriesBetaAssociateRepositoriesAndProjects } from "../funcs/insightsRepositoriesBetaAssociateRepositoriesAndProjects.js";
import { insightsRepositoriesBetaDeleteRepositoryProject } from "../funcs/insightsRepositoriesBetaDeleteRepositoryProject.js";
import { insightsRepositoriesBetaGetInsightsRepositories } from "../funcs/insightsRepositoriesBetaGetInsightsRepositories.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class InsightsRepositoriesBeta extends ClientSDK {
  /**
   * List repositories
   *
   * @remarks
   * Get a list of repositories
   *
   * ### Expanding the repository collection response
   *
   * LaunchDarkly supports expanding the repository collection response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `projects` includes details on all of the LaunchDarkly projects associated with each repository
   *
   * For example, use `?expand=projects` to include the `projects` field in the response. By default, this field is **not** included in the response.
   */
  async getInsightsRepositories(
    request: operations.GetInsightsRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.InsightsRepositoryCollection> {
    return unwrapAsync(insightsRepositoriesBetaGetInsightsRepositories(
      this,
      request,
      options,
    ));
  }

  /**
   * Associate repositories with projects
   *
   * @remarks
   * Associate repositories with projects
   */
  async associateRepositoriesAndProjects(
    request: models.InsightsRepositoryProjectMappings,
    options?: RequestOptions,
  ): Promise<models.InsightsRepositoryProjectCollection> {
    return unwrapAsync(insightsRepositoriesBetaAssociateRepositoriesAndProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove repository project association
   *
   * @remarks
   * Remove repository project association
   */
  async deleteRepositoryProject(
    request: operations.DeleteRepositoryProjectRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(insightsRepositoriesBetaDeleteRepositoryProject(
      this,
      request,
      options,
    ));
  }
}
