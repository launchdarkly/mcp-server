/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flagTriggersCreateTriggerWorkflow } from "../funcs/flagTriggersCreateTriggerWorkflow.js";
import { flagTriggersDeleteTriggerWorkflow } from "../funcs/flagTriggersDeleteTriggerWorkflow.js";
import { flagTriggersGetTriggerWorkflowById } from "../funcs/flagTriggersGetTriggerWorkflowById.js";
import { flagTriggersGetTriggerWorkflows } from "../funcs/flagTriggersGetTriggerWorkflows.js";
import { flagTriggersPatchTriggerWorkflow } from "../funcs/flagTriggersPatchTriggerWorkflow.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FlagTriggers extends ClientSDK {
  /**
   * List flag triggers
   *
   * @remarks
   * Get a list of all flag triggers.
   */
  async getTriggerWorkflows(
    request: operations.GetTriggerWorkflowsRequest,
    options?: RequestOptions,
  ): Promise<models.TriggerWorkflowCollectionRep> {
    return unwrapAsync(flagTriggersGetTriggerWorkflows(
      this,
      request,
      options,
    ));
  }

  /**
   * Create flag trigger
   *
   * @remarks
   * Create a new flag trigger.
   */
  async createTriggerWorkflow(
    request: operations.CreateTriggerWorkflowRequest,
    options?: RequestOptions,
  ): Promise<models.TriggerWorkflowRep> {
    return unwrapAsync(flagTriggersCreateTriggerWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Get flag trigger by ID
   *
   * @remarks
   * Get a flag trigger by ID.
   */
  async getTriggerWorkflowById(
    request: operations.GetTriggerWorkflowByIdRequest,
    options?: RequestOptions,
  ): Promise<models.TriggerWorkflowRep> {
    return unwrapAsync(flagTriggersGetTriggerWorkflowById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete flag trigger
   *
   * @remarks
   * Delete a flag trigger by ID.
   */
  async deleteTriggerWorkflow(
    request: operations.DeleteTriggerWorkflowRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(flagTriggersDeleteTriggerWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag trigger
   *
   * @remarks
   * Update a flag trigger. Updating a flag trigger uses the semantic patch format.
   *
   * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instructions for updating flag triggers.
   *
   * <details>
   * <summary>Click to expand instructions for <strong>updating flag triggers</strong></summary>
   *
   * #### replaceTriggerActionInstructions
   *
   * Removes the existing trigger action and replaces it with the new instructions.
   *
   * ##### Parameters
   *
   * - `value`: An array of the new `kind`s of actions to perform when triggering. Supported flag actions are `turnFlagOn` and `turnFlagOff`.
   *
   * Here's an example that replaces the existing action with new instructions to turn flag targeting off:
   *
   * ```json
   * {
   *   "instructions": [
   *     {
   *       "kind": "replaceTriggerActionInstructions",
   *       "value": [ {"kind": "turnFlagOff"} ]
   *     }
   *   ]
   * }
   * ```
   *
   * #### cycleTriggerUrl
   *
   * Generates a new URL for this trigger. You must update any clients using the trigger to use this new URL.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{ "kind": "cycleTriggerUrl" }]
   * }
   * ```
   *
   * #### disableTrigger
   *
   * Disables the trigger. This saves the trigger configuration, but the trigger stops running. To re-enable, use `enableTrigger`.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{ "kind": "disableTrigger" }]
   * }
   * ```
   *
   * #### enableTrigger
   *
   * Enables the trigger. If you previously disabled the trigger, it begins running again.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{ "kind": "enableTrigger" }]
   * }
   * ```
   *
   * </details>
   */
  async patchTriggerWorkflow(
    request: operations.PatchTriggerWorkflowRequest,
    options?: RequestOptions,
  ): Promise<models.TriggerWorkflowRep> {
    return unwrapAsync(flagTriggersPatchTriggerWorkflow(
      this,
      request,
      options,
    ));
  }
}
