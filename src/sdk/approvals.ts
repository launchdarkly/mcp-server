/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { approvalsDeleteApprovalRequest } from "../funcs/approvalsDeleteApprovalRequest.js";
import { approvalsDeleteApprovalRequestForFlag } from "../funcs/approvalsDeleteApprovalRequestForFlag.js";
import { approvalsGetApprovalForFlag } from "../funcs/approvalsGetApprovalForFlag.js";
import { approvalsGetApprovalRequest } from "../funcs/approvalsGetApprovalRequest.js";
import { approvalsGetApprovalRequests } from "../funcs/approvalsGetApprovalRequests.js";
import { approvalsGetApprovalsForFlag } from "../funcs/approvalsGetApprovalsForFlag.js";
import { approvalsPostApprovalRequest } from "../funcs/approvalsPostApprovalRequest.js";
import { approvalsPostApprovalRequestApply } from "../funcs/approvalsPostApprovalRequestApply.js";
import { approvalsPostApprovalRequestApplyForFlag } from "../funcs/approvalsPostApprovalRequestApplyForFlag.js";
import { approvalsPostApprovalRequestForFlag } from "../funcs/approvalsPostApprovalRequestForFlag.js";
import { approvalsPostApprovalRequestReview } from "../funcs/approvalsPostApprovalRequestReview.js";
import { approvalsPostApprovalRequestReviewForFlag } from "../funcs/approvalsPostApprovalRequestReviewForFlag.js";
import { approvalsPostFlagCopyConfigApprovalRequest } from "../funcs/approvalsPostFlagCopyConfigApprovalRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Approvals extends ClientSDK {
  /**
   * List approval requests
   *
   * @remarks
   * Get all approval requests.
   *
   * ### Filtering approvals
   *
   * LaunchDarkly supports the `filter` query param for filtering, with the following fields:
   *
   * - `notifyMemberIds` filters for only approvals that are assigned to a member in the specified list. For example: `filter=notifyMemberIds anyOf ["memberId1", "memberId2"]`.
   * - `requestorId` filters for only approvals that correspond to the ID of the member who requested the approval. For example: `filter=requestorId equals 457034721476302714390214`.
   * - `resourceId` filters for only approvals that correspond to the the specified resource identifier. For example: `filter=resourceId equals proj/my-project:env/my-environment:flag/my-flag`.
   * - `resourceKind` filters for only approvals that correspond to the specified resource kind. For example: `filter=resourceKind equals flag`. Currently, `flag` and `segment` resource kinds are supported.
   * - `reviewStatus` filters for only approvals which correspond to the review status in the specified list. The possible values are `approved`, `declined`, and `pending`. For example: `filter=reviewStatus anyOf ["pending", "approved"]`.
   * - `status` filters for only approvals which correspond to the status in the specified list. The possible values are `pending`, `scheduled`, `failed`, and `completed`. For example: `filter=status anyOf ["pending", "scheduled"]`.
   *
   * You can also apply multiple filters at once. For example, setting `filter=projectKey equals my-project, reviewStatus anyOf ["pending","approved"]` matches approval requests which correspond to the `my-project` project key, and a review status of either `pending` or `approved`.
   *
   * ### Expanding approval response
   *
   * LaunchDarkly supports the `expand` query param to include additional fields in the response, with the following fields:
   *
   * - `flag` includes the flag the approval request belongs to
   * - `project` includes the project the approval request belongs to
   * - `environments` includes the environments the approval request relates to
   *
   * For example, `expand=project,flag` includes the `project` and `flag` fields in the response.
   */
  async getApprovalRequests(
    request: operations.GetApprovalRequestsRequest,
    options?: RequestOptions,
  ): Promise<models.ExpandableApprovalRequestsResponse> {
    return unwrapAsync(approvalsGetApprovalRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request
   *
   * @remarks
   * Create an approval request.
   *
   * This endpoint requires a list of `instructions`, in semantic patch format, that will be applied when the approval request is approved and applied.
   *
   * If you are creating an approval request for a flag, you can use the following `instructions`:
   *
   * - `addVariation`
   * - `removeVariation`
   * - `updateVariation`
   * - `updateDefaultVariation`
   *
   * For details on using these instructions, read [Update feature flag](https://launchdarkly.com/docs/api/feature-flags/patch-feature-flag).
   *
   * To create an approval for a flag specific to an environment, use [Create approval request for a flag](https://launchdarkly.com/docs/api/approvals/post-approval-request-for-flag).
   *
   * If you are creating an approval request for a segment, you can use the following read [Patch segment](https://launchdarkly.com/docs/api/segments/patch-segment) for details on the available `instructions`.
   */
  async postApprovalRequest(
    request: models.CreateApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<models.ApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get approval request
   *
   * @remarks
   * Get an approval request by approval request ID.
   *
   * ### Expanding approval response
   *
   * LaunchDarkly supports the `expand` query param to include additional fields in the response, with the following fields:
   *
   * - `environments` includes the environments the approval request relates to
   * - `flag` includes the flag the approval request belongs to
   * - `project` includes the project the approval request belongs to
   * - `resource` includes details on the resource (flag or segment) the approval request relates to
   *
   * For example, `expand=project,flag` includes the `project` and `flag` fields in the response.
   */
  async getApprovalRequest(
    request: operations.GetApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<models.ExpandableApprovalRequestResponse> {
    return unwrapAsync(approvalsGetApprovalRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete approval request
   *
   * @remarks
   * Delete an approval request.
   */
  async deleteApprovalRequest(
    request: operations.DeleteApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(approvalsDeleteApprovalRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Apply approval request
   *
   * @remarks
   * Apply an approval request that has been approved. This endpoint works with approval requests for either flag or segment changes.
   */
  async postApprovalRequestApply(
    request: operations.PostApprovalRequestApplyRequest,
    options?: RequestOptions,
  ): Promise<models.ApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequestApply(
      this,
      request,
      options,
    ));
  }

  /**
   * Review approval request
   *
   * @remarks
   * Review an approval request by approving or denying changes.
   */
  async postApprovalRequestReview(
    request: operations.PostApprovalRequestReviewRequest,
    options?: RequestOptions,
  ): Promise<models.ApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequestReview(
      this,
      request,
      options,
    ));
  }

  /**
   * List approval requests for a flag
   *
   * @remarks
   * Get all approval requests for a feature flag.
   */
  async getApprovalsForFlag(
    request: operations.GetApprovalsForFlagRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestsResponse> {
    return unwrapAsync(approvalsGetApprovalsForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request for a flag
   *
   * @remarks
   * Create an approval request for a feature flag.
   */
  async postApprovalRequestForFlag(
    request: operations.PostApprovalRequestForFlagRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequestForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request to copy flag configurations across environments
   *
   * @remarks
   * Create an approval request to copy a feature flag's configuration across environments.
   */
  async postFlagCopyConfigApprovalRequest(
    request: operations.PostFlagCopyConfigApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPostFlagCopyConfigApprovalRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get approval request for a flag
   *
   * @remarks
   * Get a single approval request for a feature flag.
   */
  async getApprovalForFlag(
    request: operations.GetApprovalForFlagRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsGetApprovalForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete approval request for a flag
   *
   * @remarks
   * Delete an approval request for a feature flag.
   */
  async deleteApprovalRequestForFlag(
    request: operations.DeleteApprovalRequestForFlagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(approvalsDeleteApprovalRequestForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Apply approval request for a flag
   *
   * @remarks
   * Apply an approval request that has been approved. This endpoint requires a feature flag key, and can only be used for applying approval requests on flags.
   */
  async postApprovalRequestApplyForFlag(
    request: operations.PostApprovalRequestApplyForFlagRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequestApplyForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Review approval request for a flag
   *
   * @remarks
   * Review an approval request by approving or denying changes.
   */
  async postApprovalRequestReviewForFlag(
    request: operations.PostApprovalRequestReviewForFlagRequest,
    options?: RequestOptions,
  ): Promise<models.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPostApprovalRequestReviewForFlag(
      this,
      request,
      options,
    ));
  }
}
