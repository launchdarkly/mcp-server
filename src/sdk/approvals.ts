/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { approvalsApply } from "../funcs/approvalsApply.js";
import { approvalsApplyRequest } from "../funcs/approvalsApplyRequest.js";
import { approvalsCreate } from "../funcs/approvalsCreate.js";
import { approvalsCreateCopyConfigRequest } from "../funcs/approvalsCreateCopyConfigRequest.js";
import { approvalsCreateRequest } from "../funcs/approvalsCreateRequest.js";
import { approvalsDeleteFlagRequest } from "../funcs/approvalsDeleteFlagRequest.js";
import { approvalsDeleteRequest } from "../funcs/approvalsDeleteRequest.js";
import { approvalsGetForFlag } from "../funcs/approvalsGetForFlag.js";
import { approvalsGetRequest } from "../funcs/approvalsGetRequest.js";
import { approvalsList } from "../funcs/approvalsList.js";
import { approvalsListForFlag } from "../funcs/approvalsListForFlag.js";
import { approvalsPatchFlagConfigApprovalRequest } from "../funcs/approvalsPatchFlagConfigApprovalRequest.js";
import { approvalsPatchRequest } from "../funcs/approvalsPatchRequest.js";
import { approvalsReviewFlagRequest } from "../funcs/approvalsReviewFlagRequest.js";
import { approvalsReviewRequest } from "../funcs/approvalsReviewRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Approvals extends ClientSDK {
  /**
   * List approval requests
   *
   * @remarks
   * Get all approval requests.
   *
   * ### Filtering approvals
   *
   * LaunchDarkly supports the `filter` query param for filtering, with the following fields:
   *
   * - `notifyMemberIds` filters for only approvals that are assigned to a member in the specified list. For example: `filter=notifyMemberIds anyOf ["memberId1", "memberId2"]`.
   * - `requestorId` filters for only approvals that correspond to the ID of the member who requested the approval. For example: `filter=requestorId equals 457034721476302714390214`.
   * - `resourceId` filters for only approvals that correspond to the the specified resource identifier. For example: `filter=resourceId equals proj/my-project:env/my-environment:flag/my-flag`.
   * - `resourceKind` filters for only approvals that correspond to the specified resource kind. For example: `filter=resourceKind equals flag`. Currently, `flag` and `segment` resource kinds are supported.
   * - `reviewStatus` filters for only approvals which correspond to the review status in the specified list. The possible values are `approved`, `declined`, and `pending`. For example: `filter=reviewStatus anyOf ["pending", "approved"]`.
   * - `status` filters for only approvals which correspond to the status in the specified list. The possible values are `pending`, `scheduled`, `failed`, and `completed`. For example: `filter=status anyOf ["pending", "scheduled"]`.
   *
   * You can also apply multiple filters at once. For example, setting `filter=projectKey equals my-project, reviewStatus anyOf ["pending","approved"]` matches approval requests which correspond to the `my-project` project key, and a review status of either `pending` or `approved`.
   *
   * ### Expanding approval response
   *
   * LaunchDarkly supports the `expand` query param to include additional fields in the response, with the following fields:
   *
   * - `flag` includes the flag the approval request belongs to
   * - `project` includes the project the approval request belongs to
   * - `environments` includes the environments the approval request relates to
   *
   * For example, `expand=project,flag` includes the `project` and `flag` fields in the response.
   */
  async list(
    request: operations.GetApprovalRequestsRequest,
    options?: RequestOptions,
  ): Promise<components.ExpandableApprovalRequestsResponse> {
    return unwrapAsync(approvalsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request
   *
   * @remarks
   * Create an approval request.
   *
   * This endpoint requires a list of `instructions`, in semantic patch format, that will be applied when the approval request is approved and applied.
   *
   * If you are creating an approval request for a flag, you can use the following `instructions`:
   *
   * - `addVariation`
   * - `removeVariation`
   * - `updateVariation`
   * - `updateDefaultVariation`
   *
   * For details on using these instructions, read [Update feature flag](https://launchdarkly.com/docs/api/feature-flags/patch-feature-flag).
   *
   * To create an approval for a flag specific to an environment, use [Create approval request for a flag](https://launchdarkly.com/docs/api/approvals/post-approval-request-for-flag).
   *
   * If you are creating an approval request for a segment, you can use the following read [Patch segment](https://launchdarkly.com/docs/api/segments/patch-segment) for details on the available `instructions`.
   */
  async create(
    request: components.CreateApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<components.ApprovalRequestResponse> {
    return unwrapAsync(approvalsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get approval request
   *
   * @remarks
   * Get an approval request by approval request ID.
   *
   * ### Expanding approval response
   *
   * LaunchDarkly supports the `expand` query param to include additional fields in the response, with the following fields:
   *
   * - `environments` includes the environments the approval request relates to
   * - `flag` includes the flag the approval request belongs to
   * - `project` includes the project the approval request belongs to
   * - `resource` includes details on the resource (flag or segment) the approval request relates to
   *
   * For example, `expand=project,flag` includes the `project` and `flag` fields in the response.
   */
  async getRequest(
    request: operations.GetApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<components.ExpandableApprovalRequestResponse> {
    return unwrapAsync(approvalsGetRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete approval request
   *
   * @remarks
   * Delete an approval request.
   */
  async deleteRequest(
    request: operations.DeleteApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(approvalsDeleteRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Apply approval request
   *
   * @remarks
   * Apply an approval request that has been approved. This endpoint works with approval requests for either flag or segment changes.
   */
  async apply(
    request: operations.PostApprovalRequestApplyRequest,
    options?: RequestOptions,
  ): Promise<components.ApprovalRequestResponse> {
    return unwrapAsync(approvalsApply(
      this,
      request,
      options,
    ));
  }

  /**
   * Review approval request
   *
   * @remarks
   * Review an approval request by approving or denying changes.
   */
  async reviewRequest(
    request: operations.PostApprovalRequestReviewRequest,
    options?: RequestOptions,
  ): Promise<components.ApprovalRequestResponse> {
    return unwrapAsync(approvalsReviewRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * List approval requests for a flag
   *
   * @remarks
   * Get all approval requests for a feature flag.
   */
  async listForFlag(
    request: operations.GetApprovalsForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestsResponse> {
    return unwrapAsync(approvalsListForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request for a flag
   *
   * @remarks
   * Create an approval request for a feature flag.
   */
  async createRequest(
    request: operations.PostApprovalRequestForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsCreateRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create approval request to copy flag configurations across environments
   *
   * @remarks
   * Create an approval request to copy a feature flag's configuration across environments.
   */
  async createCopyConfigRequest(
    request: operations.PostFlagCopyConfigApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsCreateCopyConfigRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get approval request for a flag
   *
   * @remarks
   * Get a single approval request for a feature flag.
   */
  async getForFlag(
    request: operations.GetApprovalForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsGetForFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete approval request for a flag
   *
   * @remarks
   * Delete an approval request for a feature flag.
   */
  async deleteFlagRequest(
    request: operations.DeleteApprovalRequestForFlagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(approvalsDeleteFlagRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Apply approval request for a flag
   *
   * @remarks
   * Apply an approval request that has been approved. This endpoint requires a feature flag key, and can only be used for applying approval requests on flags.
   */
  async applyRequest(
    request: operations.PostApprovalRequestApplyForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsApplyRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Review approval request for a flag
   *
   * @remarks
   * Review an approval request by approving or denying changes.
   */
  async reviewFlagRequest(
    request: operations.PostApprovalRequestReviewForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsReviewFlagRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update approval request
   *
   * @remarks
   * Perform a partial update to an approval request. Updating an approval request uses the semantic patch format. This endpoint works with approval requests for either flag or segment changes.
   *
   * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instruction for updating an approval request.
   *
   * #### addReviewers
   *
   * Adds the specified members and teams to the existing list of reviewers. You must include at least one of `notifyMemberIds` and `notifyTeamKeys`.
   *
   * ##### Parameters
   *
   * - `notifyMemberIds`: (Optional) List of member IDs.
   * - `notifyTeamKeys`: (Optional) List of team keys.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{
   *     "kind": "addReviewers",
   *     "notifyMemberIds": [ "user-key-123abc", "user-key-456def" ],
   *     "notifyTeamKeys": [ "team-key-789abc"]
   *   }]
   * }
   * ```
   */
  async patchRequest(
    request: operations.PatchApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPatchRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag approval request
   *
   * @remarks
   * Perform a partial update to an approval request. Updating an approval request uses the semantic patch format. This endpoint requires a feature flag key, and can only be used for updating approval requests for flags.
   *
   * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instruction for updating an approval request.
   *
   * #### addReviewers
   *
   * Adds the specified members and teams to the existing list of reviewers. You must include at least one of `notifyMemberIds` and `notifyTeamKeys`.
   *
   * ##### Parameters
   *
   * - `notifyMemberIds`: (Optional) List of member IDs.
   * - `notifyTeamKeys`: (Optional) List of team keys.
   */
  async patchFlagConfigApprovalRequest(
    request: operations.PatchFlagConfigApprovalRequestRequest,
    options?: RequestOptions,
  ): Promise<components.FlagConfigApprovalRequestResponse> {
    return unwrapAsync(approvalsPatchFlagConfigApprovalRequest(
      this,
      request,
      options,
    ));
  }
}
