/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { integrationsBetaCreateIntegrationConfiguration } from "../funcs/integrationsBetaCreateIntegrationConfiguration.js";
import { integrationsBetaDeleteIntegrationConfiguration } from "../funcs/integrationsBetaDeleteIntegrationConfiguration.js";
import { integrationsBetaGetAllIntegrationConfigurations } from "../funcs/integrationsBetaGetAllIntegrationConfigurations.js";
import { integrationsBetaGetIntegrationConfiguration } from "../funcs/integrationsBetaGetIntegrationConfiguration.js";
import { integrationsBetaUpdateIntegrationConfiguration } from "../funcs/integrationsBetaUpdateIntegrationConfiguration.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IntegrationsBeta extends ClientSDK {
  /**
   * Get all configurations for the integration
   *
   * @remarks
   * Get all integration configurations with the specified integration key. (Excludes [persistent store](https://launchdarkly.com/docs/api/persistent-store-integrations-beta) and [flag import configurations](https://launchdarkly.com/docs/api/flag-import-configurations-beta).).
   */
  async getAllIntegrationConfigurations(
    request: operations.GetAllIntegrationConfigurationsRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationConfigurationCollectionRep> {
    return unwrapAsync(integrationsBetaGetAllIntegrationConfigurations(
      this,
      request,
      options,
    ));
  }

  /**
   * Create integration configuration
   *
   * @remarks
   * Create a new integration configuration. (Excludes [persistent store](https://launchdarkly.com/docs/api/persistent-store-integrations-beta) and [flag import configurations](https://launchdarkly.com/docs/api/flag-import-configurations-beta).)
   */
  async createIntegrationConfiguration(
    request: operations.CreateIntegrationConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationConfigurationsRep> {
    return unwrapAsync(integrationsBetaCreateIntegrationConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an integration configuration
   *
   * @remarks
   * Get integration configuration with the specified ID. (Excludes [persistent store](https://launchdarkly.com/docs/api/persistent-store-integrations-beta) and [flag import configurations](https://launchdarkly.com/docs/api/flag-import-configurations-beta).)
   */
  async getIntegrationConfiguration(
    request: operations.GetIntegrationConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationConfigurationsRep> {
    return unwrapAsync(integrationsBetaGetIntegrationConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete integration configuration
   *
   * @remarks
   * Delete an integration configuration by ID. (Excludes [persistent store](https://launchdarkly.com/docs/api/persistent-store-integrations-beta) and [flag import configurations](https://launchdarkly.com/docs/api/flag-import-configurations-beta).)
   */
  async deleteIntegrationConfiguration(
    request: operations.DeleteIntegrationConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsBetaDeleteIntegrationConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Update integration configuration
   *
   * @remarks
   * Update an integration configuration. Updating an integration configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async updateIntegrationConfiguration(
    request: operations.UpdateIntegrationConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationConfigurationsRep> {
    return unwrapAsync(integrationsBetaUpdateIntegrationConfiguration(
      this,
      request,
      options,
    ));
  }
}
