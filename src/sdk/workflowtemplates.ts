/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowTemplatesCreateWorkflowTemplate } from "../funcs/workflowTemplatesCreateWorkflowTemplate.js";
import { workflowTemplatesDeleteWorkflowTemplate } from "../funcs/workflowTemplatesDeleteWorkflowTemplate.js";
import { workflowTemplatesGetWorkflowTemplates } from "../funcs/workflowTemplatesGetWorkflowTemplates.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WorkflowTemplates extends ClientSDK {
  /**
   * Get workflow templates
   *
   * @remarks
   * Get workflow templates belonging to an account, or can optionally return templates_endpoints.workflowTemplateSummariesListingOutputRep when summary query param is true
   */
  async getWorkflowTemplates(
    request: operations.GetWorkflowTemplatesRequest,
    options?: RequestOptions,
  ): Promise<models.WorkflowTemplatesListingOutputRep> {
    return unwrapAsync(workflowTemplatesGetWorkflowTemplates(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow template
   *
   * @remarks
   * Create a template for a feature flag workflow
   */
  async createWorkflowTemplate(
    request: models.CreateWorkflowTemplateInput,
    options?: RequestOptions,
  ): Promise<models.WorkflowTemplateOutput> {
    return unwrapAsync(workflowTemplatesCreateWorkflowTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete workflow template
   *
   * @remarks
   * Delete a workflow template
   */
  async deleteWorkflowTemplate(
    request: operations.DeleteWorkflowTemplateRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(workflowTemplatesDeleteWorkflowTemplate(
      this,
      request,
      options,
    ));
  }
}
