/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowTemplatesCreate } from "../funcs/workflowTemplatesCreate.js";
import { workflowTemplatesDelete } from "../funcs/workflowTemplatesDelete.js";
import { workflowTemplatesList } from "../funcs/workflowTemplatesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WorkflowTemplates extends ClientSDK {
  /**
   * Get workflow templates
   *
   * @remarks
   * Get workflow templates belonging to an account, or can optionally return templates_endpoints.workflowTemplateSummariesListingOutputRep when summary query param is true
   */
  async list(
    request: operations.GetWorkflowTemplatesRequest,
    options?: RequestOptions,
  ): Promise<components.WorkflowTemplatesListingOutputRep> {
    return unwrapAsync(workflowTemplatesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow template
   *
   * @remarks
   * Create a template for a feature flag workflow
   */
  async create(
    request: components.CreateWorkflowTemplateInput,
    options?: RequestOptions,
  ): Promise<components.WorkflowTemplateOutput> {
    return unwrapAsync(workflowTemplatesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete workflow template
   *
   * @remarks
   * Delete a workflow template
   */
  async delete(
    request: operations.DeleteWorkflowTemplateRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(workflowTemplatesDelete(
      this,
      request,
      options,
    ));
  }
}
