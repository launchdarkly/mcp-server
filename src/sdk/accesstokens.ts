/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accessTokensCreate } from "../funcs/accessTokensCreate.js";
import { accessTokensGet } from "../funcs/accessTokensGet.js";
import { accessTokensList } from "../funcs/accessTokensList.js";
import { accessTokensPatch } from "../funcs/accessTokensPatch.js";
import { accessTokensReset } from "../funcs/accessTokensReset.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AccessTokens extends ClientSDK {
  /**
   * List access tokens
   *
   * @remarks
   * Fetch a list of all access tokens.
   */
  async list(
    request: operations.GetTokensRequest,
    options?: RequestOptions,
  ): Promise<components.Tokens> {
    return unwrapAsync(accessTokensList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create access token
   *
   * @remarks
   * Create a new access token.
   */
  async create(
    request: components.AccessTokenPost,
    options?: RequestOptions,
  ): Promise<components.Token> {
    return unwrapAsync(accessTokensCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get access token
   *
   * @remarks
   * Get a single access token by ID.
   */
  async get(
    request: operations.GetTokenRequest,
    options?: RequestOptions,
  ): Promise<components.Token> {
    return unwrapAsync(accessTokensGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch access token
   *
   * @remarks
   * Update an access token's settings. Updating an access token uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patch(
    request: operations.PatchTokenRequest,
    options?: RequestOptions,
  ): Promise<components.Token> {
    return unwrapAsync(accessTokensPatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset access token
   *
   * @remarks
   * Reset an access token's secret key with an optional expiry time for the old key.
   */
  async reset(
    request: operations.ResetTokenRequest,
    options?: RequestOptions,
  ): Promise<components.Token> {
    return unwrapAsync(accessTokensReset(
      this,
      request,
      options,
    ));
  }
}
