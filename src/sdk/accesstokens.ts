/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accessTokensDeleteToken } from "../funcs/accessTokensDeleteToken.js";
import { accessTokensGetToken } from "../funcs/accessTokensGetToken.js";
import { accessTokensGetTokens } from "../funcs/accessTokensGetTokens.js";
import { accessTokensPatchToken } from "../funcs/accessTokensPatchToken.js";
import { accessTokensPostToken } from "../funcs/accessTokensPostToken.js";
import { accessTokensResetToken } from "../funcs/accessTokensResetToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AccessTokens extends ClientSDK {
  /**
   * List access tokens
   *
   * @remarks
   * Fetch a list of all access tokens.
   */
  async getTokens(
    request: operations.GetTokensRequest,
    options?: RequestOptions,
  ): Promise<models.Tokens> {
    return unwrapAsync(accessTokensGetTokens(
      this,
      request,
      options,
    ));
  }

  /**
   * Create access token
   *
   * @remarks
   * Create a new access token.
   */
  async postToken(
    request: models.AccessTokenPost,
    options?: RequestOptions,
  ): Promise<models.Token> {
    return unwrapAsync(accessTokensPostToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Get access token
   *
   * @remarks
   * Get a single access token by ID.
   */
  async getToken(
    request: operations.GetTokenRequest,
    options?: RequestOptions,
  ): Promise<models.Token> {
    return unwrapAsync(accessTokensGetToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete access token
   *
   * @remarks
   * Delete an access token by ID.
   */
  async deleteToken(
    request: operations.DeleteTokenRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(accessTokensDeleteToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch access token
   *
   * @remarks
   * Update an access token's settings. Updating an access token uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchToken(
    request: operations.PatchTokenRequest,
    options?: RequestOptions,
  ): Promise<models.Token> {
    return unwrapAsync(accessTokensPatchToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset access token
   *
   * @remarks
   * Reset an access token's secret key with an optional expiry time for the old key.
   */
  async resetToken(
    request: operations.ResetTokenRequest,
    options?: RequestOptions,
  ): Promise<models.Token> {
    return unwrapAsync(accessTokensResetToken(
      this,
      request,
      options,
    ));
  }
}
