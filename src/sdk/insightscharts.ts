/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsChartsGetDeploymentFrequencyChart } from "../funcs/insightsChartsGetDeploymentFrequencyChart.js";
import { insightsChartsGetFlagStatus } from "../funcs/insightsChartsGetFlagStatus.js";
import { insightsChartsGetLeadTime } from "../funcs/insightsChartsGetLeadTime.js";
import { insightsChartsGetReleaseFrequencyChart } from "../funcs/insightsChartsGetReleaseFrequencyChart.js";
import { insightsChartsGetStaleFlagsChart } from "../funcs/insightsChartsGetStaleFlagsChart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class InsightsCharts extends ClientSDK {
  /**
   * Get deployment frequency chart data
   *
   * @remarks
   * Get deployment frequency chart data. Engineering insights displays deployment frequency data in the [deployment frequency metric view](https://launchdarkly.com/docs/home/observability/deployments).
   *
   * ### Expanding the chart response
   *
   * LaunchDarkly supports expanding the chart response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `metrics` includes details on the metrics related to deployment frequency
   *
   * For example, use `?expand=metrics` to include the `metrics` field in the response. By default, this field is **not** included in the response.
   */
  async getDeploymentFrequencyChart(
    request: operations.GetDeploymentFrequencyChartRequest,
    options?: RequestOptions,
  ): Promise<components.InsightsChart> {
    return unwrapAsync(insightsChartsGetDeploymentFrequencyChart(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stale flags chart data
   *
   * @remarks
   * Get stale flags chart data. Engineering insights displays stale flags data in the [flag health metric view](https://launchdarkly.com/docs/home/observability/flag-health).
   *
   * ### Expanding the chart response
   *
   * LaunchDarkly supports expanding the chart response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `metrics` includes details on the metrics related to stale flags
   *
   * For example, use `?expand=metrics` to include the `metrics` field in the response. By default, this field is **not** included in the response.
   */
  async getStaleFlagsChart(
    request: operations.GetStaleFlagsChartRequest,
    options?: RequestOptions,
  ): Promise<components.InsightsChart> {
    return unwrapAsync(insightsChartsGetStaleFlagsChart(
      this,
      request,
      options,
    ));
  }

  /**
   * Get flag status chart data
   *
   * @remarks
   * Get flag status chart data. To learn more, read [Flag statuses](https://launchdarkly.com/docs/home/observability/flag-health#flag-statuses).
   */
  async getFlagStatus(
    request: operations.GetFlagStatusChartRequest,
    options?: RequestOptions,
  ): Promise<components.InsightsChart> {
    return unwrapAsync(insightsChartsGetFlagStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Get lead time chart data
   *
   * @remarks
   * Get lead time chart data. The engineering insights UI displays lead time data in the [lead time metric view](https://launchdarkly.com/docs/home/observability/lead-time).
   */
  async getLeadTime(
    request: operations.GetLeadTimeChartRequest,
    options?: RequestOptions,
  ): Promise<components.InsightsChart> {
    return unwrapAsync(insightsChartsGetLeadTime(
      this,
      request,
      options,
    ));
  }

  /**
   * Get release frequency chart data
   *
   * @remarks
   * Get release frequency chart data. Engineering insights displays release frequency data in the [release frequency metric view](https://launchdarkly.com/docs/home/observability/releases).
   */
  async getReleaseFrequencyChart(
    request: operations.GetReleaseFrequencyChartRequest,
    options?: RequestOptions,
  ): Promise<components.InsightsChart> {
    return unwrapAsync(insightsChartsGetReleaseFrequencyChart(
      this,
      request,
      options,
    ));
  }
}
