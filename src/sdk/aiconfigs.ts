/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aiConfigsAddRestrictedModels } from "../funcs/aiConfigsAddRestrictedModels.js";
import { aiConfigsCreate } from "../funcs/aiConfigsCreate.js";
import { aiConfigsCreateModelConfig } from "../funcs/aiConfigsCreateModelConfig.js";
import { aiConfigsCreateVariation } from "../funcs/aiConfigsCreateVariation.js";
import { aiConfigsDelete } from "../funcs/aiConfigsDelete.js";
import { aiConfigsDeleteModelConfig } from "../funcs/aiConfigsDeleteModelConfig.js";
import { aiConfigsDeleteRestrictedModels } from "../funcs/aiConfigsDeleteRestrictedModels.js";
import { aiConfigsDeleteVariation } from "../funcs/aiConfigsDeleteVariation.js";
import { aiConfigsGet } from "../funcs/aiConfigsGet.js";
import { aiConfigsGetMetrics } from "../funcs/aiConfigsGetMetrics.js";
import { aiConfigsGetMetricsByVariation } from "../funcs/aiConfigsGetMetricsByVariation.js";
import { aiConfigsGetModelConfig } from "../funcs/aiConfigsGetModelConfig.js";
import { aiConfigsGetVariation } from "../funcs/aiConfigsGetVariation.js";
import { aiConfigsList } from "../funcs/aiConfigsList.js";
import { aiConfigsListModels } from "../funcs/aiConfigsListModels.js";
import { aiConfigsUpdate } from "../funcs/aiConfigsUpdate.js";
import { aiConfigsUpdateVariation } from "../funcs/aiConfigsUpdateVariation.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AiConfigs extends ClientSDK {
  /**
   * List AI Configs
   *
   * @remarks
   * Get a list of all AI Configs in the given project.
   */
  async list(
    request: operations.GetAIConfigsRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfigs> {
    return unwrapAsync(aiConfigsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create new AI Config
   *
   * @remarks
   * Create a new AI Config within the given project.
   */
  async create(
    request: operations.PostAIConfigRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfig> {
    return unwrapAsync(aiConfigsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete AI Config
   *
   * @remarks
   * Delete an existing AI Config.
   */
  async delete(
    request: operations.DeleteAIConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config
   *
   * @remarks
   * Retrieve a specific AI Config by its key.
   */
  async get(
    request: operations.GetAIConfigRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfig> {
    return unwrapAsync(aiConfigsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update AI Config
   *
   * @remarks
   * Edit an existing AI Config.
   *
   * The request body must be a JSON object of the fields to update. The values you include replace the existing values for the fields.
   *
   * Here's an example:
   *   ```
   *     {
   *       "description": "Example updated description",
   *       "tags": ["new-tag"]
   *     }
   *   ```
   */
  async update(
    request: operations.PatchAIConfigRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfig> {
    return unwrapAsync(aiConfigsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create AI Config variation
   *
   * @remarks
   * Create a new variation for a given AI Config.
   *
   * The <code>model</code> in the request body requires a <code>modelName</code> and <code>parameters</code>, for example:
   *
   * ```
   *   "model": {
   *     "modelName": "claude-3-opus-20240229",
   *     "parameters": {
   *       "max_tokens": 1024
   *     }
   *   }
   * ```
   */
  async createVariation(
    request: operations.PostAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfigVariation> {
    return unwrapAsync(aiConfigsCreateVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete AI Config variation
   *
   * @remarks
   * Delete a specific variation of an AI Config by config key and variation key.
   */
  async deleteVariation(
    request: operations.DeleteAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsDeleteVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config variation
   *
   * @remarks
   * Get an AI Config variation by key. The response includes all variation versions for the given variation key.
   */
  async getVariation(
    request: operations.GetAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfigVariationsResponse> {
    return unwrapAsync(aiConfigsGetVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Update AI Config variation
   *
   * @remarks
   * Edit an existing variation of an AI Config. This creates a new version of the variation.
   *
   * The request body must be a JSON object of the fields to update. The values you include replace the existing values for the fields.
   *
   * Here's an example:
   * ```
   *   {
   *     "messages": [
   *       {
   *         "role": "system",
   *         "content": "The new message"
   *       }
   *     ]
   *   }
   * ```
   */
  async updateVariation(
    request: operations.PatchAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<components.AIConfigVariation> {
    return unwrapAsync(aiConfigsUpdateVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config metrics
   *
   * @remarks
   * Retrieve usage metrics for an AI Config by config key.
   */
  async getMetrics(
    request: operations.GetAIConfigMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.Metrics> {
    return unwrapAsync(aiConfigsGetMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config metrics by variation
   *
   * @remarks
   * Retrieve usage metrics for an AI Config by config key, with results split by variation.
   */
  async getMetricsByVariation(
    request: operations.GetAIConfigMetricsByVariationRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MetricByVariation>> {
    return unwrapAsync(aiConfigsGetMetricsByVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove AI models from the restricted list
   *
   * @remarks
   * Remove AI models, by key, from the restricted list.
   */
  async deleteRestrictedModels(
    request: operations.DeleteRestrictedModelsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsDeleteRestrictedModels(
      this,
      request,
      options,
    ));
  }

  /**
   * Add AI models to the restricted list
   *
   * @remarks
   * Add AI models, by key, to the restricted list. Keys are included in the response from the [List AI model configs](https://launchdarkly.com/docs/api/ai-configs-beta/list-model-configs) endpoint.
   */
  async addRestrictedModels(
    request: operations.PostRestrictedModelsRequest,
    options?: RequestOptions,
  ): Promise<components.RestrictedModelsResponse> {
    return unwrapAsync(aiConfigsAddRestrictedModels(
      this,
      request,
      options,
    ));
  }

  /**
   * List AI model configs
   *
   * @remarks
   * Get all AI model configs for a project.
   */
  async listModels(
    request: operations.ListModelConfigsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ModelConfig>> {
    return unwrapAsync(aiConfigsListModels(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an AI model config
   *
   * @remarks
   * Create an AI model config. You can use this in any variation for any AI Config in your project.
   */
  async createModelConfig(
    request: operations.PostModelConfigRequest,
    options?: RequestOptions,
  ): Promise<components.ModelConfig> {
    return unwrapAsync(aiConfigsCreateModelConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an AI model config
   *
   * @remarks
   * Delete an AI model config.
   */
  async deleteModelConfig(
    request: operations.DeleteModelConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsDeleteModelConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI model config
   *
   * @remarks
   * Get an AI model config by key.
   */
  async getModelConfig(
    request: operations.GetModelConfigRequest,
    options?: RequestOptions,
  ): Promise<components.ModelConfig> {
    return unwrapAsync(aiConfigsGetModelConfig(
      this,
      request,
      options,
    ));
  }
}
