/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { integrationDeliveryConfigurationsBetaCreateIntegrationDeliveryConfiguration } from "../funcs/integrationDeliveryConfigurationsBetaCreateIntegrationDeliveryConfiguration.js";
import { integrationDeliveryConfigurationsBetaDeleteIntegrationDeliveryConfiguration } from "../funcs/integrationDeliveryConfigurationsBetaDeleteIntegrationDeliveryConfiguration.js";
import {
  integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationByEnvironment,
} from "../funcs/integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationByEnvironment.js";
import { integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationById } from "../funcs/integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationById.js";
import { integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurations } from "../funcs/integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurations.js";
import { integrationDeliveryConfigurationsBetaPatchIntegrationDeliveryConfiguration } from "../funcs/integrationDeliveryConfigurationsBetaPatchIntegrationDeliveryConfiguration.js";
import { integrationDeliveryConfigurationsBetaValidateIntegrationDeliveryConfiguration } from "../funcs/integrationDeliveryConfigurationsBetaValidateIntegrationDeliveryConfiguration.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IntegrationDeliveryConfigurationsBeta extends ClientSDK {
  /**
   * List all delivery configurations
   *
   * @remarks
   * List all delivery configurations.
   */
  async getIntegrationDeliveryConfigurations(
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfigurationCollection> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurations(
        this,
        options,
      ),
    );
  }

  /**
   * Get delivery configurations by environment
   *
   * @remarks
   * Get delivery configurations by environment.
   */
  async getIntegrationDeliveryConfigurationByEnvironment(
    request: operations.GetIntegrationDeliveryConfigurationByEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfigurationCollection> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationByEnvironment(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create delivery configuration
   *
   * @remarks
   * Create a delivery configuration.
   */
  async createIntegrationDeliveryConfiguration(
    request: operations.CreateIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfiguration> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaCreateIntegrationDeliveryConfiguration(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get delivery configuration by ID
   *
   * @remarks
   * Get delivery configuration by ID.
   */
  async getIntegrationDeliveryConfigurationById(
    request: operations.GetIntegrationDeliveryConfigurationByIdRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfiguration> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaGetIntegrationDeliveryConfigurationById(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Delete delivery configuration
   *
   * @remarks
   * Delete a delivery configuration.
   */
  async deleteIntegrationDeliveryConfiguration(
    request: operations.DeleteIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaDeleteIntegrationDeliveryConfiguration(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update delivery configuration
   *
   * @remarks
   * Update an integration delivery configuration. Updating an integration delivery configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchIntegrationDeliveryConfiguration(
    request: operations.PatchIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfiguration> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaPatchIntegrationDeliveryConfiguration(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Validate delivery configuration
   *
   * @remarks
   * Validate the saved delivery configuration, using the `validationRequest` in the integration's `manifest.json` file.
   */
  async validateIntegrationDeliveryConfiguration(
    request: operations.ValidateIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.IntegrationDeliveryConfigurationResponse> {
    return unwrapAsync(
      integrationDeliveryConfigurationsBetaValidateIntegrationDeliveryConfiguration(
        this,
        request,
        options,
      ),
    );
  }
}
