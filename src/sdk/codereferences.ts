/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { codeReferencesDeleteBranches } from "../funcs/codeReferencesDeleteBranches.js";
import { codeReferencesDeleteRepository } from "../funcs/codeReferencesDeleteRepository.js";
import { codeReferencesGetBranch } from "../funcs/codeReferencesGetBranch.js";
import { codeReferencesGetBranches } from "../funcs/codeReferencesGetBranches.js";
import { codeReferencesGetExtinctions } from "../funcs/codeReferencesGetExtinctions.js";
import { codeReferencesGetRepositories } from "../funcs/codeReferencesGetRepositories.js";
import { codeReferencesGetRepository } from "../funcs/codeReferencesGetRepository.js";
import { codeReferencesGetRootStatistic } from "../funcs/codeReferencesGetRootStatistic.js";
import { codeReferencesGetStatistics } from "../funcs/codeReferencesGetStatistics.js";
import { codeReferencesPatchRepository } from "../funcs/codeReferencesPatchRepository.js";
import { codeReferencesPostExtinction } from "../funcs/codeReferencesPostExtinction.js";
import { codeReferencesPostRepository } from "../funcs/codeReferencesPostRepository.js";
import { codeReferencesPutBranch } from "../funcs/codeReferencesPutBranch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CodeReferences extends ClientSDK {
  /**
   * List extinctions
   *
   * @remarks
   * Get a list of all extinctions. LaunchDarkly creates an extinction event after you remove all code references to a flag. To learn more, read [About extinction events](https://launchdarkly.com/docs/home/observability/code-references#about-extinction-events).
   */
  async getExtinctions(
    request: operations.GetExtinctionsRequest,
    options?: RequestOptions,
  ): Promise<models.ExtinctionCollectionRep> {
    return unwrapAsync(codeReferencesGetExtinctions(
      this,
      request,
      options,
    ));
  }

  /**
   * List repositories
   *
   * @remarks
   * Get a list of connected repositories. Optionally, you can include branch metadata with the `withBranches` query parameter. Embed references for the default branch with `ReferencesForDefaultBranch`. You can also filter the list of code references by project key and flag key.
   */
  async getRepositories(
    request: operations.GetRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<models.RepositoryCollectionRep> {
    return unwrapAsync(codeReferencesGetRepositories(
      this,
      request,
      options,
    ));
  }

  /**
   * Create repository
   *
   * @remarks
   * Create a repository with the specified name.
   */
  async postRepository(
    request: models.RepositoryPost,
    options?: RequestOptions,
  ): Promise<models.RepositoryRep> {
    return unwrapAsync(codeReferencesPostRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Get repository
   *
   * @remarks
   * Get a single repository by name.
   */
  async getRepository(
    request: operations.GetRepositoryRequest,
    options?: RequestOptions,
  ): Promise<models.RepositoryRep> {
    return unwrapAsync(codeReferencesGetRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete repository
   *
   * @remarks
   * Delete a repository with the specified name.
   */
  async deleteRepository(
    request: operations.DeleteRepositoryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(codeReferencesDeleteRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Update repository
   *
   * @remarks
   * Update a repository's settings. Updating repository settings uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) or [JSON merge patch](https://datatracker.ietf.org/doc/html/rfc7386) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchRepository(
    request: operations.PatchRepositoryRequest,
    options?: RequestOptions,
  ): Promise<models.RepositoryRep> {
    return unwrapAsync(codeReferencesPatchRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete branches
   *
   * @remarks
   * Asynchronously delete a number of branches.
   */
  async deleteBranches(
    request: operations.DeleteBranchesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(codeReferencesDeleteBranches(
      this,
      request,
      options,
    ));
  }

  /**
   * List branches
   *
   * @remarks
   * Get a list of branches.
   */
  async getBranches(
    request: operations.GetBranchesRequest,
    options?: RequestOptions,
  ): Promise<models.BranchCollectionRep> {
    return unwrapAsync(codeReferencesGetBranches(
      this,
      request,
      options,
    ));
  }

  /**
   * Get branch
   *
   * @remarks
   * Get a specific branch in a repository.
   */
  async getBranch(
    request: operations.GetBranchRequest,
    options?: RequestOptions,
  ): Promise<models.BranchRep> {
    return unwrapAsync(codeReferencesGetBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Upsert branch
   *
   * @remarks
   * Create a new branch if it doesn't exist, or update the branch if it already exists.
   */
  async putBranch(
    request: operations.PutBranchRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(codeReferencesPutBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Create extinction
   *
   * @remarks
   * Create a new extinction.
   */
  async postExtinction(
    request: operations.PostExtinctionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(codeReferencesPostExtinction(
      this,
      request,
      options,
    ));
  }

  /**
   * Get links to code reference repositories for each project
   *
   * @remarks
   * Get links for all projects that have code references.
   */
  async getRootStatistic(
    options?: RequestOptions,
  ): Promise<models.StatisticsRoot> {
    return unwrapAsync(codeReferencesGetRootStatistic(
      this,
      options,
    ));
  }

  /**
   * Get code references statistics for flags
   *
   * @remarks
   * Get statistics about all the code references across repositories for all flags in your project that have code references in the default branch, for example, `main`. Optionally, you can include the `flagKey` query parameter to limit your request to statistics about code references for a single flag. This endpoint returns the number of references to your flag keys in your repositories, as well as a link to each repository.
   */
  async getStatistics(
    request: operations.GetStatisticsRequest,
    options?: RequestOptions,
  ): Promise<models.StatisticCollectionRep> {
    return unwrapAsync(codeReferencesGetStatistics(
      this,
      request,
      options,
    ));
  }
}
