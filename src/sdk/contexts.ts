/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contextsDeleteInstances } from "../funcs/contextsDeleteInstances.js";
import { contextsEvaluateFlags } from "../funcs/contextsEvaluateFlags.js";
import { contextsGet } from "../funcs/contextsGet.js";
import { contextsGetAttributes } from "../funcs/contextsGetAttributes.js";
import { contextsGetAttributeValues } from "../funcs/contextsGetAttributeValues.js";
import { contextsGetInstances } from "../funcs/contextsGetInstances.js";
import { contextsListKinds } from "../funcs/contextsListKinds.js";
import { contextsPerformSearch } from "../funcs/contextsPerformSearch.js";
import { contextsPutKind } from "../funcs/contextsPutKind.js";
import { contextsSearch } from "../funcs/contextsSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Contexts extends ClientSDK {
  /**
   * Get context kinds
   *
   * @remarks
   * Get all context kinds for a given project.
   */
  async listKinds(
    request: operations.GetContextKindsByProjectKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ContextKindsCollectionRep> {
    return unwrapAsync(contextsListKinds(
      this,
      request,
      options,
    ));
  }

  /**
   * Create or update context kind
   *
   * @remarks
   * Create or update a context kind by key. Only the included fields will be updated.
   */
  async putKind(
    request: operations.PutContextKindRequest,
    options?: RequestOptions,
  ): Promise<components.UpsertResponseRep> {
    return unwrapAsync(contextsPutKind(
      this,
      request,
      options,
    ));
  }

  /**
   * Get context attribute names
   *
   * @remarks
   * Get context attribute names.
   */
  async getAttributes(
    request: operations.GetContextAttributeNamesRequest,
    options?: RequestOptions,
  ): Promise<components.ContextAttributeNamesCollection> {
    return unwrapAsync(contextsGetAttributes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get context attribute values
   *
   * @remarks
   * Get context attribute values.
   */
  async getAttributeValues(
    request: operations.GetContextAttributeValuesRequest,
    options?: RequestOptions,
  ): Promise<components.ContextAttributeValuesCollection> {
    return unwrapAsync(contextsGetAttributeValues(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for context instances
   *
   * @remarks
   *
   * Search for context instances.
   *
   * You can use either the query parameters or the request body parameters. If both are provided, there is an error.
   *
   * To learn more about the filter syntax, read [Filtering contexts and context instances](https://launchdarkly.com/docs/ld-docs/api/contexts#filtering-contexts-and-context-instances). To learn more about context instances, read [Context instances](https://launchdarkly.com/docs/home/observability/multi-contexts#context-instances).
   */
  async search(
    request: operations.SearchContextInstancesRequest,
    options?: RequestOptions,
  ): Promise<components.ContextInstances> {
    return unwrapAsync(contextsSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Get context instances
   *
   * @remarks
   * Get context instances by ID.
   */
  async getInstances(
    request: operations.GetContextInstancesRequest,
    options?: RequestOptions,
  ): Promise<components.ContextInstances> {
    return unwrapAsync(contextsGetInstances(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete context instances
   *
   * @remarks
   * Delete context instances by ID.
   */
  async deleteInstances(
    request: operations.DeleteContextInstancesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(contextsDeleteInstances(
      this,
      request,
      options,
    ));
  }

  /**
   * Search for contexts
   *
   * @remarks
   *
   * Search for contexts.
   *
   * You can use either the query parameters or the request body parameters. If both are provided, there is an error.
   *
   * To learn more about the filter syntax, read [Filtering contexts and context instances](https://launchdarkly.com/docs/ld-docs/api/contexts#filtering-contexts-and-context-instances). To learn more about contexts, read [Contexts and context kinds](https://launchdarkly.com/docs/home/observability/contexts#contexts-and-context-kinds).
   */
  async performSearch(
    request: operations.SearchContextsRequest,
    options?: RequestOptions,
  ): Promise<components.Contexts> {
    return unwrapAsync(contextsPerformSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Get contexts
   *
   * @remarks
   * Get contexts based on kind and key.
   */
  async get(
    request: operations.GetContextsRequest,
    options?: RequestOptions,
  ): Promise<components.Contexts> {
    return unwrapAsync(contextsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Evaluate flags for context instance
   *
   * @remarks
   * Evaluate flags for a context instance, for example, to determine the expected flag variation. **Do not use this API instead of an SDK.** The LaunchDarkly SDKs are specialized for the tasks of evaluating feature flags in your application at scale and generating analytics events based on those evaluations. This API is not designed for that use case. Any evaluations you perform with this API will not be reflected in features such as flag statuses and flag insights. Context instances evaluated by this API will not appear in the Contexts list. To learn more, read [Comparing LaunchDarkly's SDKs and REST API](https://launchdarkly.com/docs/guides/api/comparing-sdk-rest-api).
   *
   * ### Filtering
   *
   * LaunchDarkly supports the `filter` query param for filtering, with the following fields:
   *
   * - `query` filters for a string that matches against the flags' keys and names. It is not case sensitive. For example: `filter=query equals dark-mode`.
   * - `tags` filters the list to flags that have all of the tags in the list. For example: `filter=tags contains ["beta","q1"]`.
   *
   * You can also apply multiple filters at once. For example, setting `filter=query equals dark-mode, tags contains ["beta","q1"]` matches flags which match the key or name `dark-mode` and are tagged `beta` and `q1`.
   */
  async evaluateFlags(
    request: operations.EvaluateContextInstanceRequest,
    options?: RequestOptions,
  ): Promise<components.ContextInstanceEvaluations> {
    return unwrapAsync(contextsEvaluateFlags(
      this,
      request,
      options,
    ));
  }
}
