/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountUsageBetaGetDataExportEventsUsage } from "../funcs/accountUsageBetaGetDataExportEventsUsage.js";
import { accountUsageBetaGetEvaluationsUsage } from "../funcs/accountUsageBetaGetEvaluationsUsage.js";
import { accountUsageBetaGetEventsUsage } from "../funcs/accountUsageBetaGetEventsUsage.js";
import { accountUsageBetaGetExperimentationKeysUsage } from "../funcs/accountUsageBetaGetExperimentationKeysUsage.js";
import { accountUsageBetaGetExperimentationUnitsUsage } from "../funcs/accountUsageBetaGetExperimentationUnitsUsage.js";
import { accountUsageBetaGetMauSdksByType } from "../funcs/accountUsageBetaGetMauSdksByType.js";
import { accountUsageBetaGetMauUsage } from "../funcs/accountUsageBetaGetMauUsage.js";
import { accountUsageBetaGetMauUsageByCategory } from "../funcs/accountUsageBetaGetMauUsageByCategory.js";
import { accountUsageBetaGetServiceConnectionUsage } from "../funcs/accountUsageBetaGetServiceConnectionUsage.js";
import { accountUsageBetaGetStreamUsage } from "../funcs/accountUsageBetaGetStreamUsage.js";
import { accountUsageBetaGetStreamUsageBySDKVersion } from "../funcs/accountUsageBetaGetStreamUsageBySDKVersion.js";
import { accountUsageBetaGetStreamUsageSdkversion } from "../funcs/accountUsageBetaGetStreamUsageSdkversion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AccountUsageBeta extends ClientSDK {
  /**
   * Get data export events usage
   *
   * @remarks
   * Get a time-series array of the number of monthly data export events from your account. The granularity is always daily, with a maximum of 31 days.
   */
  async getDataExportEventsUsage(
    request: operations.GetDataExportEventsUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesIntervalsRep> {
    return unwrapAsync(accountUsageBetaGetDataExportEventsUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get evaluations usage
   *
   * @remarks
   * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
   */
  async getEvaluationsUsage(
    request: operations.GetEvaluationsUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetEvaluationsUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get events usage
   *
   * @remarks
   * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
   */
  async getEventsUsage(
    request: operations.GetEventsUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetEventsUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get experimentation keys usage
   *
   * @remarks
   * Get a time-series array of the number of monthly experimentation keys from your account. The granularity is always daily, with a maximum of 31 days.
   */
  async getExperimentationKeysUsage(
    request: operations.GetExperimentationKeysUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesIntervalsRep> {
    return unwrapAsync(accountUsageBetaGetExperimentationKeysUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get experimentation units usage
   *
   * @remarks
   * Get a time-series array of the number of monthly experimentation units from your account. The granularity is always daily, with a maximum of 31 days.
   */
  async getExperimentationUnitsUsage(
    request: operations.GetExperimentationUnitsUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesIntervalsRep> {
    return unwrapAsync(accountUsageBetaGetExperimentationUnitsUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get MAU usage
   *
   * @remarks
   * Get a time-series array of the number of monthly active users (MAU) seen by LaunchDarkly from your account. The granularity is always daily.<br/><br/>Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://launchdarkly.com/docs/home/account/metrics).
   */
  async getMauUsage(
    request: operations.GetMauUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetMauUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get MAU usage by category
   *
   * @remarks
   * Get time-series arrays of the number of monthly active users (MAU) seen by LaunchDarkly from your account, broken down by the category of users. The category is either `browser`, `mobile`, or `backend`.<br/><br/>Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://launchdarkly.com/docs/home/account/metrics).
   */
  async getMauUsageByCategory(
    request: operations.GetMauUsageByCategoryRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetMauUsageByCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get MAU SDKs by type
   *
   * @remarks
   * Get a list of SDKs. These are all of the SDKs that have connected to LaunchDarkly by monthly active users (MAU) in the requested time period.<br/><br/>Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://launchdarkly.com/docs/home/account/metrics).
   */
  async getMauSdksByType(
    request: operations.GetMauSdksByTypeRequest,
    options?: RequestOptions,
  ): Promise<models.SDKListRep> {
    return unwrapAsync(accountUsageBetaGetMauSdksByType(
      this,
      request,
      options,
    ));
  }

  /**
   * Get service connection usage
   *
   * @remarks
   * Get a time-series array of the number of monthly service connections from your account. The granularity is always daily, with a maximum of 31 days.
   */
  async getServiceConnectionUsage(
    request: operations.GetServiceConnectionUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesIntervalsRep> {
    return unwrapAsync(accountUsageBetaGetServiceConnectionUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream usage
   *
   * @remarks
   * Get a time-series array of the number of streaming connections to LaunchDarkly in each time period. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
   */
  async getStreamUsage(
    request: operations.GetStreamUsageRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetStreamUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream usage by SDK version
   *
   * @remarks
   * Get multiple series of the number of streaming connections to LaunchDarkly in each time period, separated by SDK type and version. Information about each series is in the metadata array. The granularity of the data depends on the age of the data requested. If the requested range is within the past 2 hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
   */
  async getStreamUsageBySDKVersion(
    request: operations.GetStreamUsageBySDKVersionRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesListRep> {
    return unwrapAsync(accountUsageBetaGetStreamUsageBySDKVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream usage SDK versions
   *
   * @remarks
   * Get a list of SDK version objects, which contain an SDK name and version. These are all of the SDKs that have connected to LaunchDarkly from your account in the past 60 days.
   */
  async getStreamUsageSdkversion(
    request: operations.GetStreamUsageSdkversionRequest,
    options?: RequestOptions,
  ): Promise<models.SDKVersionListRep> {
    return unwrapAsync(accountUsageBetaGetStreamUsageSdkversion(
      this,
      request,
      options,
    ));
  }
}
