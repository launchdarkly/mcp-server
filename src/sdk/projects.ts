/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsDeleteProject } from "../funcs/projectsDeleteProject.js";
import { projectsGetFlagDefaultsByProject } from "../funcs/projectsGetFlagDefaultsByProject.js";
import { projectsGetProject } from "../funcs/projectsGetProject.js";
import { projectsGetProjects } from "../funcs/projectsGetProjects.js";
import { projectsPatchFlagDefaultsByProject } from "../funcs/projectsPatchFlagDefaultsByProject.js";
import { projectsPatchProject } from "../funcs/projectsPatchProject.js";
import { projectsPostProject } from "../funcs/projectsPostProject.js";
import { projectsPutFlagDefaultsByProject } from "../funcs/projectsPutFlagDefaultsByProject.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
  /**
   * List projects
   *
   * @remarks
   * Return a list of projects.
   *
   * By default, this returns the first 20 projects. Page through this list with the `limit` parameter and by following the `first`, `prev`, `next`, and `last` links in the `_links` field that returns. If those links do not appear, the pages they refer to don't exist. For example, the `first` and `prev` links will be missing from the response on the first page, because there is no previous page and you cannot return to the first page when you are already on the first page.
   *
   * ### Filtering projects
   *
   * LaunchDarkly supports three fields for filters:
   * - `query` is a string that matches against the projects' names and keys. It is not case sensitive.
   * - `tags` is a `+`-separated list of project tags. It filters the list of projects that have all of the tags in the list.
   * - `keys` is a `|` separated list of project keys. It filters the list to projects that have any of the keys in the list.
   *
   * For example, the filter `filter=query:abc,tags:tag-1+tag-2` matches projects with the string `abc` in their name or key and also are tagged with `tag-1` and `tag-2`. The filter is not case-sensitive.
   *
   * The documented values for `filter` query parameters are prior to URL encoding. For example, the `+` in `filter=tags:tag-1+tag-2` must be encoded to `%2B`.
   *
   * ### Sorting projects
   *
   * LaunchDarkly supports two fields for sorting:
   * - `name` sorts by project name.
   * - `createdOn` sorts by the creation date of the project.
   *
   * For example, `sort=name` sorts the response by project name in ascending order.
   *
   * ### Expanding the projects response
   *
   * LaunchDarkly supports one field for expanding the "List projects" response. By default, these fields are **not** included in the response.
   *
   * To expand the response, append the `expand` query parameter and add a comma-separated list with the `environments` field.
   *
   * * `environments` includes a paginated list of the project environments.
   *
   * For example, `expand=environments` includes the `environments` field for each project in the response.
   */
  async getProjects(
    request: operations.GetProjectsRequest,
    options?: RequestOptions,
  ): Promise<models.Projects> {
    return unwrapAsync(projectsGetProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Create project
   *
   * @remarks
   * Create a new project with the given key and name. Project keys must be unique within an account.
   */
  async postProject(
    request: models.ProjectPost,
    options?: RequestOptions,
  ): Promise<models.ProjectRep> {
    return unwrapAsync(projectsPostProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Get project
   *
   * @remarks
   * Get a single project by key.
   *
   * ### Expanding the project response
   *
   * LaunchDarkly supports one field for expanding the "Get project" response. By default, these fields are **not** included in the response.
   *
   * To expand the response, append the `expand` query parameter and add a comma-separated list with any of the following fields:
   * * `environments` includes a paginated list of the project environments.
   *
   * For example, `expand=environments` includes the `environments` field for the project in the response.
   */
  async getProject(
    request: operations.GetProjectRequest,
    options?: RequestOptions,
  ): Promise<models.Project> {
    return unwrapAsync(projectsGetProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete project
   *
   * @remarks
   * Delete a project by key. Use this endpoint with caution. Deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
   */
  async deleteProject(
    request: operations.DeleteProjectRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(projectsDeleteProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update project
   *
   * @remarks
   * Update a project. Updating a project uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).<br/><br/>To add an element to the project fields that are arrays, set the `path` to the name of the field and then append `/<array index>`. Use `/0` to add to the beginning of the array. Use `/-` to add to the end of the array.
   */
  async patchProject(
    request: operations.PatchProjectRequest,
    options?: RequestOptions,
  ): Promise<models.ProjectRep> {
    return unwrapAsync(projectsPatchProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Get flag defaults for project
   *
   * @remarks
   * Get the flag defaults for a specific project.
   */
  async getFlagDefaultsByProject(
    request: operations.GetFlagDefaultsByProjectRequest,
    options?: RequestOptions,
  ): Promise<models.FlagDefaultsRep> {
    return unwrapAsync(projectsGetFlagDefaultsByProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Create or update flag defaults for project
   *
   * @remarks
   * Create or update flag defaults for a project.
   */
  async putFlagDefaultsByProject(
    request: operations.PutFlagDefaultsByProjectRequest,
    options?: RequestOptions,
  ): Promise<models.UpsertPayloadRep> {
    return unwrapAsync(projectsPutFlagDefaultsByProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag default for project
   *
   * @remarks
   * Update a flag default. Updating a flag default uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) or [JSON merge patch](https://datatracker.ietf.org/doc/html/rfc7386) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchFlagDefaultsByProject(
    request: operations.PatchFlagDefaultsByProjectRequest,
    options?: RequestOptions,
  ): Promise<models.UpsertPayloadRep> {
    return unwrapAsync(projectsPatchFlagDefaultsByProject(
      this,
      request,
      options,
    ));
  }
}
