/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsBetaGetDependentFlags } from "../funcs/featureFlagsBetaGetDependentFlags.js";
import { featureFlagsBetaGetDependentFlagsByEnv } from "../funcs/featureFlagsBetaGetDependentFlagsByEnv.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FeatureFlagsBeta extends ClientSDK {
  /**
   * List dependent feature flags by environment
   *
   * @remarks
   * > ### Flag prerequisites is an Enterprise feature
   * >
   * > Flag prerequisites is available to customers on an Enterprise plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact Sales](https://launchdarkly.com/contact-sales/).
   *
   * List dependent flags across all environments for the flag specified in the path parameters. A dependent flag is a flag that uses another flag as a prerequisite. To learn more, read [Flag prerequisites](https://launchdarkly.com/docs/home/flags/prereqs).
   */
  async getDependentFlagsByEnv(
    request: operations.GetDependentFlagsByEnvRequest,
    options?: RequestOptions,
  ): Promise<models.DependentFlagsByEnvironment> {
    return unwrapAsync(featureFlagsBetaGetDependentFlagsByEnv(
      this,
      request,
      options,
    ));
  }

  /**
   * List dependent feature flags
   *
   * @remarks
   * > ### Flag prerequisites is an Enterprise feature
   * >
   * > Flag prerequisites is available to customers on an Enterprise plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact Sales](https://launchdarkly.com/contact-sales/).
   *
   * List dependent flags across all environments for the flag specified in the path parameters. A dependent flag is a flag that uses another flag as a prerequisite. To learn more, read [Flag prerequisites](https://launchdarkly.com/docs/home/flags/prereqs).
   */
  async getDependentFlags(
    request: operations.GetDependentFlagsRequest,
    options?: RequestOptions,
  ): Promise<models.MultiEnvironmentDependentFlags> {
    return unwrapAsync(featureFlagsBetaGetDependentFlags(
      this,
      request,
      options,
    ));
  }
}
