/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentsDeleteEnvironment } from "../funcs/environmentsDeleteEnvironment.js";
import { environmentsGetEnvironment } from "../funcs/environmentsGetEnvironment.js";
import { environmentsGetEnvironmentsByProject } from "../funcs/environmentsGetEnvironmentsByProject.js";
import { environmentsPatchEnvironment } from "../funcs/environmentsPatchEnvironment.js";
import { environmentsPostEnvironment } from "../funcs/environmentsPostEnvironment.js";
import { environmentsResetEnvironmentMobileKey } from "../funcs/environmentsResetEnvironmentMobileKey.js";
import { environmentsResetEnvironmentSDKKey } from "../funcs/environmentsResetEnvironmentSDKKey.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environments extends ClientSDK {
  /**
   * List environments
   *
   * @remarks
   * Return a list of environments for the specified project.
   *
   * By default, this returns the first 20 environments. Page through this list with the `limit` parameter and by following the `first`, `prev`, `next`, and `last` links in the `_links` field that returns. If those links do not appear, the pages they refer to don't exist. For example, the `first` and `prev` links will be missing from the response on the first page, because there is no previous page and you cannot return to the first page when you are already on the first page.
   *
   * ### Filtering environments
   *
   * LaunchDarkly supports two fields for filters:
   * - `query` is a string that matches against the environments' names and keys. It is not case sensitive.
   * - `tags` is a `+`-separated list of environment tags. It filters the list of environments that have all of the tags in the list.
   *
   * For example, the filter `filter=query:abc,tags:tag-1+tag-2` matches environments with the string `abc` in their name or key and also are tagged with `tag-1` and `tag-2`. The filter is not case-sensitive.
   *
   * The documented values for `filter` query parameters are prior to URL encoding. For example, the `+` in `filter=tags:tag-1+tag-2` must be encoded to `%2B`.
   *
   * ### Sorting environments
   *
   * LaunchDarkly supports the following fields for sorting:
   *
   * - `createdOn` sorts by the creation date of the environment.
   * - `critical` sorts by whether the environments are marked as critical.
   * - `name` sorts by environment name.
   *
   * For example, `sort=name` sorts the response by environment name in ascending order.
   */
  async getEnvironmentsByProject(
    request: operations.GetEnvironmentsByProjectRequest,
    options?: RequestOptions,
  ): Promise<models.Environments> {
    return unwrapAsync(environmentsGetEnvironmentsByProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Create environment
   *
   * @remarks
   * > ### Approval settings
   * >
   * > The `approvalSettings` key is only returned when the [approvals](https://launchdarkly.com/docs/home/releases/approvals/) feature is enabled.
   * >
   * > You cannot update approval settings when creating new environments. Update approval settings with the [https://launchdarkly.com/docs/api/environments/patch-environment).
   *
   * Create a new environment in a specified project with a given name, key, swatch color, and default TTL.
   */
  async postEnvironment(
    request: operations.PostEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<models.Environment> {
    return unwrapAsync(environmentsPostEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get environment
   *
   * @remarks
   * > ### Approval settings
   * >
   * > The `approvalSettings` key is only returned when [approvals](https://launchdarkly.com/docs/home/releases/approvals) for flags or segments are enabled.
   *
   * Get an environment given a project and key.
   */
  async getEnvironment(
    request: operations.GetEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<models.Environment> {
    return unwrapAsync(environmentsGetEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete environment
   *
   * @remarks
   * Delete a environment by key.
   */
  async deleteEnvironment(
    request: operations.DeleteEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(environmentsDeleteEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update environment
   *
   * @remarks
   *
   * Update an environment. Updating an environment uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   *
   * To update fields in the environment object that are arrays, set the `path` to the name of the field and then append `/<array index>`. Using `/0` appends to the beginning of the array.
   *
   * ### Approval settings
   *
   * This request only returns the `approvalSettings` key if the [approvals](https://launchdarkly.com/docs/home/releases/approvals/) feature is enabled.
   *
   * Only the `canReviewOwnRequest`, `canApplyDeclinedChanges`, `minNumApprovals`, `required` and `requiredApprovalTagsfields` are editable.
   *
   * If you try to patch the environment by setting both `required` and `requiredApprovalTags`, the request fails and an error appears. You can specify either required approvals for all flags in an environment or those with specific tags, but not both.
   */
  async patchEnvironment(
    request: operations.PatchEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<models.Environment> {
    return unwrapAsync(environmentsPatchEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset environment SDK key
   *
   * @remarks
   * Reset an environment's SDK key with an optional expiry time for the old key.
   */
  async resetEnvironmentSDKKey(
    request: operations.ResetEnvironmentSDKKeyRequest,
    options?: RequestOptions,
  ): Promise<models.Environment> {
    return unwrapAsync(environmentsResetEnvironmentSDKKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset environment mobile SDK key
   *
   * @remarks
   * Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
   */
  async resetEnvironmentMobileKey(
    request: operations.ResetEnvironmentMobileKeyRequest,
    options?: RequestOptions,
  ): Promise<models.Environment> {
    return unwrapAsync(environmentsResetEnvironmentMobileKey(
      this,
      request,
      options,
    ));
  }
}
