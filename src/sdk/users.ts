/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersDeleteUser } from "../funcs/usersDeleteUser.js";
import { usersGetSearchUsers } from "../funcs/usersGetSearchUsers.js";
import { usersGetUser } from "../funcs/usersGetUser.js";
import { usersGetUsers } from "../funcs/usersGetUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * Find users
   *
   * @remarks
   * > ### Use contexts instead
   * >
   * > After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for context instances](https://launchdarkly.com/docs/ld-docs/api/contexts/search-context-instances) instead of this endpoint.
   *
   * Search users in LaunchDarkly based on their last active date, a user attribute filter set, or a search query.
   *
   * An example user attribute filter set is `filter=firstName:Anna,activeTrial:false`. This matches users that have the user attribute `firstName` set to `Anna`, that also have the attribute `activeTrial` set to `false`.
   *
   * To paginate through results, follow the `next` link in the `_links` object. To learn more, read [Representations](https://launchdarkly.com/docs/ld-docs/api#representations).
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getSearchUsers(
    request: operations.GetSearchUsersRequest,
    options?: RequestOptions,
  ): Promise<models.Users> {
    return unwrapAsync(usersGetSearchUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * List users
   *
   * @remarks
   * > ### Use contexts instead
   * >
   * > After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for contexts](https://launchdarkly.com/docs/ld-docs/api/contexts/search-contexts) instead of this endpoint.
   *
   * List all users in the environment. Includes the total count of users. This is useful for exporting all users in the system for further analysis.
   *
   * Each page displays users up to a set `limit`. The default is 20. To page through, follow the `next` link in the `_links` object. To learn more, read [Representations](https://launchdarkly.com/docs/ld-docs/api#representations).
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getUsers(
    request: operations.GetUsersRequest,
    options?: RequestOptions,
  ): Promise<models.UsersRep> {
    return unwrapAsync(usersGetUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   *
   * @remarks
   * > ### Use contexts instead
   * >
   * > After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Get context instances](https://launchdarkly.com/docs/ld-docs/api/contexts/get-context-instances) instead of this endpoint.
   *
   * Get a user by key. The `user` object contains all attributes sent in `variation` calls for that key.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getUser(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<models.UserRecord> {
    return unwrapAsync(usersGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * > ### Use contexts instead
   * >
   * > After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Delete context instances](https://launchdarkly.com/docs/ld-docs/api/contexts/delete-context-instances) instead of this endpoint.
   *
   * Delete a user by key.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async deleteUser(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersDeleteUser(
      this,
      request,
      options,
    ));
  }
}
