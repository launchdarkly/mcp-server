/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsScoresBetaCreateInsightGroup } from "../funcs/insightsScoresBetaCreateInsightGroup.js";
import { insightsScoresBetaDeleteInsightGroup } from "../funcs/insightsScoresBetaDeleteInsightGroup.js";
import { insightsScoresBetaGetInsightGroup } from "../funcs/insightsScoresBetaGetInsightGroup.js";
import { insightsScoresBetaGetInsightGroups } from "../funcs/insightsScoresBetaGetInsightGroups.js";
import { insightsScoresBetaGetInsightsScores } from "../funcs/insightsScoresBetaGetInsightsScores.js";
import { insightsScoresBetaPatchInsightGroup } from "../funcs/insightsScoresBetaPatchInsightGroup.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class InsightsScoresBeta extends ClientSDK {
  /**
   * Create insight group
   *
   * @remarks
   * Create insight group
   */
  async createInsightGroup(
    request: models.PostInsightGroupParams,
    options?: RequestOptions,
  ): Promise<models.InsightGroup> {
    return unwrapAsync(insightsScoresBetaCreateInsightGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * List insight groups
   *
   * @remarks
   * List groups for which you are collecting insights
   *
   * ### Expanding the insight groups collection response
   *
   * LaunchDarkly supports expanding the insight groups collection response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `scores` includes details on all of the scores used in the engineering insights metrics views for each group
   * * `environment` includes details on each environment associated with each group
   * * `metadata` includes counts of the number of insight groups with particular indicators, such as "excellent," "good," "fair," and so on.
   *
   * For example, use `?expand=scores` to include the `scores` field in the response. By default, this field is **not** included in the response.
   */
  async getInsightGroups(
    request: operations.GetInsightGroupsRequest,
    options?: RequestOptions,
  ): Promise<models.InsightGroupCollection> {
    return unwrapAsync(insightsScoresBetaGetInsightGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Get insight group
   *
   * @remarks
   * Get insight group
   *
   * ### Expanding the insight group response
   *
   * LaunchDarkly supports expanding the insight group response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `scores` includes details on all of the scores used in the engineering insights metrics views for this group
   * * `environment` includes details on each environment associated with this group
   *
   * For example, use `?expand=scores` to include the `scores` field in the response. By default, this field is **not** included in the response.
   */
  async getInsightGroup(
    request: operations.GetInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<models.InsightGroup> {
    return unwrapAsync(insightsScoresBetaGetInsightGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete insight group
   *
   * @remarks
   * Delete insight group
   */
  async deleteInsightGroup(
    request: operations.DeleteInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(insightsScoresBetaDeleteInsightGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch insight group
   *
   * @remarks
   * Update an insight group. Updating an insight group uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchInsightGroup(
    request: operations.PatchInsightGroupRequest,
    options?: RequestOptions,
  ): Promise<models.InsightGroup> {
    return unwrapAsync(insightsScoresBetaPatchInsightGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get insight scores
   *
   * @remarks
   * Return insights scores, based on the given parameters. This data is also used in engineering insights metrics views.
   */
  async getInsightsScores(
    request: operations.GetInsightsScoresRequest,
    options?: RequestOptions,
  ): Promise<models.InsightScores> {
    return unwrapAsync(insightsScoresBetaGetInsightsScores(
      this,
      request,
      options,
    ));
  }
}
