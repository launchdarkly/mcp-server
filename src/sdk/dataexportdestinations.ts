/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataExportDestinationsCreate } from "../funcs/dataExportDestinationsCreate.js";
import { dataExportDestinationsDelete } from "../funcs/dataExportDestinationsDelete.js";
import { dataExportDestinationsGenerateWarehouseDestinationKeyPair } from "../funcs/dataExportDestinationsGenerateWarehouseDestinationKeyPair.js";
import { dataExportDestinationsGet } from "../funcs/dataExportDestinationsGet.js";
import { dataExportDestinationsList } from "../funcs/dataExportDestinationsList.js";
import { dataExportDestinationsUpdate } from "../funcs/dataExportDestinationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DataExportDestinations extends ClientSDK {
  /**
   * List destinations
   *
   * @remarks
   * Get a list of Data Export destinations configured across all projects and environments.
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.Destinations> {
    return unwrapAsync(dataExportDestinationsList(
      this,
      options,
    ));
  }

  /**
   * Generate Snowflake destination key pair
   *
   * @remarks
   * Generate key pair to allow Data Export to authenticate into a Snowflake warehouse destination
   */
  async generateWarehouseDestinationKeyPair(
    options?: RequestOptions,
  ): Promise<components.GenerateWarehouseDestinationKeyPairPostRep> {
    return unwrapAsync(
      dataExportDestinationsGenerateWarehouseDestinationKeyPair(
        this,
        options,
      ),
    );
  }

  /**
   * Create Data Export destination
   *
   * @remarks
   *
   * Create a new Data Export destination.
   *
   * In the `config` request body parameter, the fields required depend on the type of Data Export destination.
   *
   * <details>
   * <summary>Click to expand <code>config</code> parameter details</summary>
   *
   * #### Azure Event Hubs
   *
   * To create a Data Export destination with a `kind` of `azure-event-hubs`, the `config` object requires the following fields:
   *
   * * `namespace`: The Event Hub Namespace name
   * * `name`: The Event Hub name
   * * `policyName`: The shared access signature policy name. You can find your policy name in the settings of your Azure Event Hubs Namespace.
   * * `policyKey`: The shared access signature key. You can find your policy key in the settings of your Azure Event Hubs Namespace.
   *
   * #### Google Cloud Pub/Sub
   *
   * To create a Data Export destination with a `kind` of `google-pubsub`, the `config` object requires the following fields:
   *
   * * `project`: The Google PubSub project ID for the project to publish to
   * * `topic`: The Google PubSub topic ID for the topic to publish to
   *
   * #### Amazon Kinesis
   *
   * To create a Data Export destination with a `kind` of `kinesis`, the `config` object requires the following fields:
   *
   * * `region`: The Kinesis stream's AWS region key
   * * `roleArn`: The Amazon Resource Name (ARN) of the AWS role that will be writing to Kinesis
   * * `streamName`: The name of the Kinesis stream that LaunchDarkly is sending events to. This is not the ARN of the stream.
   *
   * #### mParticle
   *
   * To create a Data Export destination with a `kind` of `mparticle`, the `config` object requires the following fields:
   *
   * * `apiKey`: The mParticle API key
   * * `secret`: The mParticle API secret
   * * `userIdentity`: The type of identifier you use to identify your end users in mParticle
   * * `anonymousUserIdentity`: The type of identifier you use to identify your anonymous end users in mParticle
   *
   * #### Segment
   *
   * To create a Data Export destination with a `kind` of `segment`, the `config` object requires the following fields:
   *
   * * `writeKey`: The Segment write key. This is used to authenticate LaunchDarkly's calls to Segment.
   *
   * #### Snowflake
   *
   * To create a Data Export destination with a `kind` of `snowflake-v2`, the `config` object requires the following fields:
   *
   * * `publicKey`: The `publicKey` is returned as part of the [Generate Snowflake destination key pair](https://launchdarkly.com/docs/api/data-export-destinations/post-generate-warehouse-destination-key-pair) response. It is the `public_key` field.
   * * `snowflakeHostAddress`: Your Snowflake account URL.
   *
   * </details>
   */
  async create(
    request: operations.PostDestinationRequest,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(dataExportDestinationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get destination
   *
   * @remarks
   * Get a single Data Export destination by ID.
   */
  async get(
    request: operations.GetDestinationRequest,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(dataExportDestinationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Data Export destination
   *
   * @remarks
   * Update a Data Export destination. Updating a destination uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) or [JSON merge patch](https://datatracker.ietf.org/doc/html/rfc7386) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async update(
    request: operations.PatchDestinationRequest,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(dataExportDestinationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Data Export destination
   *
   * @remarks
   * Delete a Data Export destination by ID.
   */
  async delete(
    request: operations.DeleteDestinationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(dataExportDestinationsDelete(
      this,
      request,
      options,
    ));
  }
}
