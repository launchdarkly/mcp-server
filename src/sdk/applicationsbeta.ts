/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationsBetaDeleteApplication } from "../funcs/applicationsBetaDeleteApplication.js";
import { applicationsBetaDeleteApplicationVersion } from "../funcs/applicationsBetaDeleteApplicationVersion.js";
import { applicationsBetaGetApplication } from "../funcs/applicationsBetaGetApplication.js";
import { applicationsBetaGetApplications } from "../funcs/applicationsBetaGetApplications.js";
import { applicationsBetaGetApplicationVersions } from "../funcs/applicationsBetaGetApplicationVersions.js";
import { applicationsBetaPatchApplication } from "../funcs/applicationsBetaPatchApplication.js";
import { applicationsBetaPatchApplicationVersion } from "../funcs/applicationsBetaPatchApplicationVersion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ApplicationsBeta extends ClientSDK {
  /**
   * Get applications
   *
   * @remarks
   *
   * Get a list of applications.
   *
   * ### Expanding the applications response
   *
   * LaunchDarkly supports expanding the "Get applications" response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `flags` includes details on the flags that have been evaluated by the application
   *
   * For example, use `?expand=flags` to include the `flags` field in the response. By default, this field is **not** included in the response.
   */
  async getApplications(
    request: operations.GetApplicationsRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationCollectionRep> {
    return unwrapAsync(applicationsBetaGetApplications(
      this,
      request,
      options,
    ));
  }

  /**
   * Get application by key
   *
   * @remarks
   *
   * Retrieve an application by the application key.
   *
   * ### Expanding the application response
   *
   * LaunchDarkly supports expanding the "Get application" response to include additional fields.
   *
   * To expand the response, append the `expand` query parameter and include the following:
   *
   * * `flags` includes details on the flags that have been evaluated by the application
   *
   * For example, use `?expand=flags` to include the `flags` field in the response. By default, this field is **not** included in the response.
   */
  async getApplication(
    request: operations.GetApplicationRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationRep> {
    return unwrapAsync(applicationsBetaGetApplication(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete application
   *
   * @remarks
   * Delete an application.
   */
  async deleteApplication(
    request: operations.DeleteApplicationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationsBetaDeleteApplication(
      this,
      request,
      options,
    ));
  }

  /**
   * Update application
   *
   * @remarks
   * Update an application. You can update the `description` and `kind` fields. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchApplication(
    request: operations.PatchApplicationRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationRep> {
    return unwrapAsync(applicationsBetaPatchApplication(
      this,
      request,
      options,
    ));
  }

  /**
   * Get application versions by application key
   *
   * @remarks
   * Get a list of versions for a specific application in an account.
   */
  async getApplicationVersions(
    request: operations.GetApplicationVersionsRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationVersionsCollectionRep> {
    return unwrapAsync(applicationsBetaGetApplicationVersions(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete application version
   *
   * @remarks
   * Delete an application version.
   */
  async deleteApplicationVersion(
    request: operations.DeleteApplicationVersionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationsBetaDeleteApplicationVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Update application version
   *
   * @remarks
   * Update an application version. You can update the `supported` field. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application version. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchApplicationVersion(
    request: operations.PatchApplicationVersionRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationVersionRep> {
    return unwrapAsync(applicationsBetaPatchApplicationVersion(
      this,
      request,
      options,
    ));
  }
}
