/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flagLinksBetaCreateFlagLink } from "../funcs/flagLinksBetaCreateFlagLink.js";
import { flagLinksBetaDeleteFlagLink } from "../funcs/flagLinksBetaDeleteFlagLink.js";
import { flagLinksBetaGetFlagLinks } from "../funcs/flagLinksBetaGetFlagLinks.js";
import { flagLinksBetaUpdateFlagLink } from "../funcs/flagLinksBetaUpdateFlagLink.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FlagLinksBeta extends ClientSDK {
  /**
   * List flag links
   *
   * @remarks
   * Get a list of all flag links.
   */
  async getFlagLinks(
    request: operations.GetFlagLinksRequest,
    options?: RequestOptions,
  ): Promise<models.FlagLinkCollectionRep> {
    return unwrapAsync(flagLinksBetaGetFlagLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create flag link
   *
   * @remarks
   * Create a new flag link. Flag links let you reference external resources and associate them with your flags.
   */
  async createFlagLink(
    request: operations.CreateFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<models.FlagLinkRep> {
    return unwrapAsync(flagLinksBetaCreateFlagLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete flag link
   *
   * @remarks
   * Delete a flag link by ID or key.
   */
  async deleteFlagLink(
    request: operations.DeleteFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(flagLinksBetaDeleteFlagLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag link
   *
   * @remarks
   * Update a flag link. Updating a flag link uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async updateFlagLink(
    request: operations.UpdateFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<models.FlagLinkRep> {
    return unwrapAsync(flagLinksBetaUpdateFlagLink(
      this,
      request,
      options,
    ));
  }
}
