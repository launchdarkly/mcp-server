/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flagLinksCreate } from "../funcs/flagLinksCreate.js";
import { flagLinksDelete } from "../funcs/flagLinksDelete.js";
import { flagLinksList } from "../funcs/flagLinksList.js";
import { flagLinksUpdate } from "../funcs/flagLinksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FlagLinks extends ClientSDK {
  /**
   * List flag links
   *
   * @remarks
   * Get a list of all flag links.
   */
  async list(
    request: operations.GetFlagLinksRequest,
    options?: RequestOptions,
  ): Promise<components.FlagLinkCollectionRep> {
    return unwrapAsync(flagLinksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create flag link
   *
   * @remarks
   * Create a new flag link. Flag links let you reference external resources and associate them with your flags.
   */
  async create(
    request: operations.CreateFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<components.FlagLinkRep> {
    return unwrapAsync(flagLinksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag link
   *
   * @remarks
   * Update a flag link. Updating a flag link uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async update(
    request: operations.UpdateFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<components.FlagLinkRep> {
    return unwrapAsync(flagLinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete flag link
   *
   * @remarks
   * Delete a flag link by ID or key.
   */
  async delete(
    request: operations.DeleteFlagLinkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(flagLinksDelete(
      this,
      request,
      options,
    ));
  }
}
