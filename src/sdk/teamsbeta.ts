/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { teamsBetaPatchTeams } from "../funcs/teamsBetaPatchTeams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TeamsBeta extends ClientSDK {
  /**
   * Update teams
   *
   * @remarks
   * Perform a partial update to multiple teams. Updating teams uses the semantic patch format.
   *
   * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instructions for updating teams.
   *
   * <details>
   * <summary>Click to expand instructions for <strong>updating teams</strong></summary>
   *
   * #### addMembersToTeams
   *
   * Add the members to teams.
   *
   * ##### Parameters
   *
   * - `memberIDs`: List of member IDs to add.
   * - `teamKeys`: List of teams to update.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{
   *     "kind": "addMembersToTeams",
   *     "memberIDs": [
   *       "1234a56b7c89d012345e678f"
   *     ],
   *     "teamKeys": [
   *       "example-team-1",
   *       "example-team-2"
   *     ]
   *   }]
   * }
   * ```
   *
   * #### addAllMembersToTeams
   *
   * Add all members to the team. Members that match any of the filters are **excluded** from the update.
   *
   * ##### Parameters
   *
   * - `teamKeys`: List of teams to update.
   * - `filterLastSeen`: (Optional) A JSON object with one of the following formats:
   *   - `{"never": true}` - Members that have never been active, such as those who have not accepted their invitation to LaunchDarkly, or have not logged in after being provisioned via SCIM.
   *   - `{"noData": true}` - Members that have not been active since LaunchDarkly began recording last seen timestamps.
   *   - `{"before": 1608672063611}` - Members that have not been active since the provided value, which should be a timestamp in Unix epoch milliseconds.
   * - `filterQuery`: (Optional) A string that matches against the members' emails and names. It is not case sensitive.
   * - `filterRoles`: (Optional) A `|` separated list of roles and custom roles. For the purposes of this filtering, `Owner` counts as `Admin`.
   * - `filterTeamKey`: (Optional) A string that matches against the key of the team the members belong to. It is not case sensitive.
   * - `ignoredMemberIDs`: (Optional) A list of member IDs.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{
   *     "kind": "addAllMembersToTeams",
   *     "teamKeys": [
   *       "example-team-1",
   *       "example-team-2"
   *     ],
   *     "filterLastSeen": { "never": true }
   *   }]
   * }
   * ```
   *
   * </details>
   */
  async patchTeams(
    request: models.TeamsPatchInput,
    options?: RequestOptions,
  ): Promise<models.BulkEditTeamsRep> {
    return unwrapAsync(teamsBetaPatchTeams(
      this,
      request,
      options,
    ));
  }
}
