/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksDeleteWebhook } from "../funcs/webhooksDeleteWebhook.js";
import { webhooksGetAllWebhooks } from "../funcs/webhooksGetAllWebhooks.js";
import { webhooksGetWebhook } from "../funcs/webhooksGetWebhook.js";
import { webhooksPatchWebhook } from "../funcs/webhooksPatchWebhook.js";
import { webhooksPostWebhook } from "../funcs/webhooksPostWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhooks
   *
   * @remarks
   * Fetch a list of all webhooks.
   */
  async getAllWebhooks(
    options?: RequestOptions,
  ): Promise<models.Webhooks> {
    return unwrapAsync(webhooksGetAllWebhooks(
      this,
      options,
    ));
  }

  /**
   * Creates a webhook
   *
   * @remarks
   * Create a new webhook.
   */
  async postWebhook(
    request: models.WebhookPost,
    options?: RequestOptions,
  ): Promise<models.Webhook> {
    return unwrapAsync(webhooksPostWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Get webhook
   *
   * @remarks
   * Get a single webhook by ID.
   */
  async getWebhook(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.Webhook> {
    return unwrapAsync(webhooksGetWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete webhook
   *
   * @remarks
   * Delete a webhook by ID.
   */
  async deleteWebhook(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Update webhook
   *
   * @remarks
   * Update a webhook's settings. Updating webhook settings uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async patchWebhook(
    request: operations.PatchWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.Webhook> {
    return unwrapAsync(webhooksPatchWebhook(
      this,
      request,
      options,
    ));
  }
}
