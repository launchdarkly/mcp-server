/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowsCreate } from "../funcs/workflowsCreate.js";
import { workflowsDelete } from "../funcs/workflowsDelete.js";
import { workflowsFetchById } from "../funcs/workflowsFetchById.js";
import { workflowsGet } from "../funcs/workflowsGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workflows extends ClientSDK {
  /**
   * Get workflows
   *
   * @remarks
   * Display workflows associated with a feature flag.
   */
  async get(
    request: operations.GetWorkflowsRequest,
    options?: RequestOptions,
  ): Promise<components.CustomWorkflowsListingOutput> {
    return unwrapAsync(workflowsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow
   *
   * @remarks
   * Create a workflow for a feature flag. You can create a workflow directly, or you can apply a template to create a new workflow.
   *
   * ### Creating a workflow
   *
   * You can use the create workflow endpoint to create a workflow directly by adding a `stages` array to the request body.
   *
   * For each stage, define the `name`, `conditions` when the stage should be executed, and `action` that describes the stage.
   *
   * <details>
   * <summary>Click to expand example</summary>
   *
   * _Example request body_
   * ```json
   * {
   *   "name": "Progressive rollout starting in two days",
   *   "description": "Turn flag targeting on and increase feature rollout in 10% increments each day",
   *   "stages": [
   *     {
   *       "name": "10% rollout on day 1",
   *       "conditions": [
   *         {
   *           "kind": "schedule",
   *           "scheduleKind": "relative", // or "absolute"
   *               //  If "scheduleKind" is "absolute", set "executionDate";
   *               // "waitDuration" and "waitDurationUnit" will be ignored
   *           "waitDuration": 2,
   *           "waitDurationUnit": "calendarDay"
   *         },
   *         {
   *           "kind": "ld-approval",
   *           "notifyMemberIds": [ "507f1f77bcf86cd799439011" ],
   *           "notifyTeamKeys": [ "team-key-123abc" ]
   *         }
   *       ],
   *       "action": {
   *         "instructions": [
   *           {
   *             "kind": "turnFlagOn"
   *           },
   *           {
   *             "kind": "updateFallthroughVariationOrRollout",
   *             "rolloutWeights": {
   *               "452f5fb5-7320-4ba3-81a1-8f4324f79d49": 90000,
   *               "fc15f6a4-05d3-4aa4-a997-446be461345d": 10000
   *             }
   *           }
   *         ]
   *       }
   *     }
   *   ]
   * }
   * ```
   * </details>
   *
   * ### Creating a workflow by applying a workflow template
   *
   * You can also create a workflow by applying a workflow template. If you pass a valid workflow template key as the `templateKey` query parameter with the request, the API will attempt to create a new workflow with the stages defined in the workflow template with the corresponding key.
   *
   * #### Applicability of stages
   * Templates are created in the context of a particular flag in a particular environment in a particular project. However, because workflows created from a template can be applied to any project, environment, and flag, some steps of the workflow may need to be updated in order to be applicable for the target resource.
   *
   * You can pass a `dryRun` query parameter to tell the API to return a report of which steps of the workflow template are applicable in the target project/environment/flag, and which will need to be updated. When the `dryRun` query parameter is present the response body includes a `meta` property that holds a list of parameters that could potentially be inapplicable for the target resource. Each of these parameters will include a `valid` field. You will need to update any invalid parameters in order to create the new workflow. You can do this using the `parameters` property, which overrides the workflow template parameters.
   *
   * #### Overriding template parameters
   * You can use the `parameters` property in the request body to tell the API to override the specified workflow template parameters with new values that are specific to your target project/environment/flag.
   *
   * <details>
   * <summary>Click to expand example</summary>
   *
   * _Example request body_
   * ```json
   * {
   * 	"name": "workflow created from my-template",
   * 	"description": "description of my workflow",
   * 	"parameters": [
   * 		{
   * 			"_id": "62cf2bc4cadbeb7697943f3b",
   * 			"path": "/clauses/0/values",
   * 			"default": {
   * 				"value": ["updated-segment"]
   * 			}
   * 		},
   * 		{
   * 			"_id": "62cf2bc4cadbeb7697943f3d",
   * 			"path": "/variationId",
   * 			"default": {
   * 				"value": "abcd1234-abcd-1234-abcd-1234abcd12"
   * 			}
   * 		}
   * 	]
   * }
   * ```
   * </details>
   *
   * If there are any steps in the template that are not applicable to the target resource, the workflow will not be created, and the `meta` property will be included in the response body detailing which parameters need to be updated.
   */
  async create(
    request: operations.PostWorkflowRequest,
    options?: RequestOptions,
  ): Promise<components.CustomWorkflowOutput> {
    return unwrapAsync(workflowsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get custom workflow
   *
   * @remarks
   * Get a specific workflow by ID.
   */
  async fetchById(
    request: operations.GetCustomWorkflowRequest,
    options?: RequestOptions,
  ): Promise<components.CustomWorkflowOutput> {
    return unwrapAsync(workflowsFetchById(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete workflow
   *
   * @remarks
   * Delete a workflow from a feature flag.
   */
  async delete(
    request: operations.DeleteWorkflowRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(workflowsDelete(
      this,
      request,
      options,
    ));
  }
}
