/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { followFlagsAddFollower } from "../funcs/followFlagsAddFollower.js";
import { followFlagsDeleteFollower } from "../funcs/followFlagsDeleteFollower.js";
import { followFlagsGetFollowers } from "../funcs/followFlagsGetFollowers.js";
import { followFlagsListFollowers } from "../funcs/followFlagsListFollowers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FollowFlags extends ClientSDK {
  /**
   * Get followers of all flags in a given project and environment
   *
   * @remarks
   * Get followers of all flags in a given environment and project
   */
  async getFollowers(
    request: operations.GetFollowersByProjEnvRequest,
    options?: RequestOptions,
  ): Promise<components.FlagFollowersByProjEnvGetRep> {
    return unwrapAsync(followFlagsGetFollowers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get followers of a flag in a project and environment
   *
   * @remarks
   * Get a list of members following a flag in a project and environment
   */
  async listFollowers(
    request: operations.GetFlagFollowersRequest,
    options?: RequestOptions,
  ): Promise<components.FlagFollowersGetRep> {
    return unwrapAsync(followFlagsListFollowers(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a member as a follower of a flag in a project and environment
   *
   * @remarks
   * Add a member as a follower to a flag in a project and environment
   */
  async addFollower(
    request: operations.PutFlagFollowerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(followFlagsAddFollower(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a member as a follower of a flag in a project and environment
   *
   * @remarks
   * Remove a member as a follower to a flag in a project and environment
   */
  async deleteFollower(
    request: operations.DeleteFlagFollowerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(followFlagsDeleteFollower(
      this,
      request,
      options,
    ));
  }
}
