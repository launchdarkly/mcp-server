/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { followFlagsDeleteFlagFollower } from "../funcs/followFlagsDeleteFlagFollower.js";
import { followFlagsGetFlagFollowers } from "../funcs/followFlagsGetFlagFollowers.js";
import { followFlagsGetFollowersByProjEnv } from "../funcs/followFlagsGetFollowersByProjEnv.js";
import { followFlagsPutFlagFollower } from "../funcs/followFlagsPutFlagFollower.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FollowFlags extends ClientSDK {
  /**
   * Get followers of all flags in a given project and environment
   *
   * @remarks
   * Get followers of all flags in a given environment and project
   */
  async getFollowersByProjEnv(
    request: operations.GetFollowersByProjEnvRequest,
    options?: RequestOptions,
  ): Promise<models.FlagFollowersByProjEnvGetRep> {
    return unwrapAsync(followFlagsGetFollowersByProjEnv(
      this,
      request,
      options,
    ));
  }

  /**
   * Get followers of a flag in a project and environment
   *
   * @remarks
   * Get a list of members following a flag in a project and environment
   */
  async getFlagFollowers(
    request: operations.GetFlagFollowersRequest,
    options?: RequestOptions,
  ): Promise<models.FlagFollowersGetRep> {
    return unwrapAsync(followFlagsGetFlagFollowers(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a member as a follower of a flag in a project and environment
   *
   * @remarks
   * Add a member as a follower to a flag in a project and environment
   */
  async putFlagFollower(
    request: operations.PutFlagFollowerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(followFlagsPutFlagFollower(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a member as a follower of a flag in a project and environment
   *
   * @remarks
   * Remove a member as a follower to a flag in a project and environment
   */
  async deleteFlagFollower(
    request: operations.DeleteFlagFollowerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(followFlagsDeleteFlagFollower(
      this,
      request,
      options,
    ));
  }
}
