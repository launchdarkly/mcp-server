/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { releasePipelinesCreate } from "../funcs/releasePipelinesCreate.js";
import { releasePipelinesDelete } from "../funcs/releasePipelinesDelete.js";
import { releasePipelinesGetAll } from "../funcs/releasePipelinesGetAll.js";
import { releasePipelinesGetAllReleaseProgressions } from "../funcs/releasePipelinesGetAllReleaseProgressions.js";
import { releasePipelinesGetByKey } from "../funcs/releasePipelinesGetByKey.js";
import { releasePipelinesUpdate } from "../funcs/releasePipelinesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ReleasePipelines extends ClientSDK {
  /**
   * Get all release pipelines
   *
   * @remarks
   * Get all release pipelines for a project.
   *
   * ### Filtering release pipelines
   *
   * LaunchDarkly supports the following fields for filters:
   *
   * - `query` is a string that matches against the release pipeline `key`, `name`, and `description`. It is not case sensitive. For example: `?filter=query:examplePipeline`.
   *
   * - `env` is a string that matches an environment key. For example: `?filter=env:production`.
   */
  async getAll(
    request: operations.GetAllReleasePipelinesRequest,
    options?: RequestOptions,
  ): Promise<components.ReleasePipelineCollection> {
    return unwrapAsync(releasePipelinesGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a release pipeline
   *
   * @remarks
   * Creates a new release pipeline.
   *
   * The first release pipeline you create is automatically set as the default release pipeline for your project. To change the default release pipeline, use the [Update project](https://launchdarkly.com/docs/ld-docs/api/projects/patch-project) API to set the `defaultReleasePipelineKey`.
   *
   * You can create up to 20 release pipelines per project.
   */
  async create(
    request: operations.PostReleasePipelineRequest,
    options?: RequestOptions,
  ): Promise<components.ReleasePipeline> {
    return unwrapAsync(releasePipelinesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get release pipeline by key
   *
   * @remarks
   * Get a release pipeline by key
   */
  async getByKey(
    request: operations.GetReleasePipelineByKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ReleasePipeline> {
    return unwrapAsync(releasePipelinesGetByKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a release pipeline
   *
   * @remarks
   * Updates a release pipeline.
   */
  async update(
    request: operations.PutReleasePipelineRequest,
    options?: RequestOptions,
  ): Promise<components.ReleasePipeline> {
    return unwrapAsync(releasePipelinesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete release pipeline
   *
   * @remarks
   * Deletes a release pipeline.
   *
   * You cannot delete the default release pipeline.
   *
   * If you want to delete a release pipeline that is currently the default, create a second release pipeline and set it as the default. Then delete the first release pipeline. To change the default release pipeline, use the [Update project](https://launchdarkly.com/docs/ld-docs/api/projects/patch-project) API to set the `defaultReleasePipelineKey`.
   */
  async delete(
    request: operations.DeleteReleasePipelineRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(releasePipelinesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get release progressions for release pipeline
   *
   * @remarks
   * Get details on the progression of all releases, across all flags, for a release pipeline
   */
  async getAllReleaseProgressions(
    request: operations.GetAllReleaseProgressionsForReleasePipelineRequest,
    options?: RequestOptions,
  ): Promise<components.ReleaseProgressionCollection> {
    return unwrapAsync(releasePipelinesGetAllReleaseProgressions(
      this,
      request,
      options,
    ));
  }
}
