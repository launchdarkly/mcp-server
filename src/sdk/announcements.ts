/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { announcementsCreateAnnouncementPublic } from "../funcs/announcementsCreateAnnouncementPublic.js";
import { announcementsDeleteAnnouncementPublic } from "../funcs/announcementsDeleteAnnouncementPublic.js";
import { announcementsGetAnnouncementsPublic } from "../funcs/announcementsGetAnnouncementsPublic.js";
import { announcementsUpdateAnnouncementPublic } from "../funcs/announcementsUpdateAnnouncementPublic.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Announcements extends ClientSDK {
  /**
   * Get announcements
   *
   * @remarks
   * Get announcements
   */
  async getAnnouncementsPublic(
    request: operations.GetAnnouncementsPublicRequest,
    options?: RequestOptions,
  ): Promise<models.GetAnnouncementsPublic200Response> {
    return unwrapAsync(announcementsGetAnnouncementsPublic(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an announcement
   *
   * @remarks
   * Create an announcement
   */
  async createAnnouncementPublic(
    request: models.CreateAnnouncementBody,
    options?: RequestOptions,
  ): Promise<models.AnnouncementResponse> {
    return unwrapAsync(announcementsCreateAnnouncementPublic(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an announcement
   *
   * @remarks
   * Delete an announcement
   */
  async deleteAnnouncementPublic(
    request: operations.DeleteAnnouncementPublicRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(announcementsDeleteAnnouncementPublic(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an announcement
   *
   * @remarks
   * Update an announcement
   */
  async updateAnnouncementPublic(
    request: operations.UpdateAnnouncementPublicRequest,
    options?: RequestOptions,
  ): Promise<models.AnnouncementResponse> {
    return unwrapAsync(announcementsUpdateAnnouncementPublic(
      this,
      request,
      options,
    ));
  }
}
