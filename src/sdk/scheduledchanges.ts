/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scheduledChangesCreate } from "../funcs/scheduledChangesCreate.js";
import { scheduledChangesDelete } from "../funcs/scheduledChangesDelete.js";
import { scheduledChangesGet } from "../funcs/scheduledChangesGet.js";
import { scheduledChangesList } from "../funcs/scheduledChangesList.js";
import { scheduledChangesUpdate } from "../funcs/scheduledChangesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ScheduledChanges extends ClientSDK {
  /**
   * List scheduled changes
   *
   * @remarks
   * Get a list of scheduled changes that will be applied to the feature flag.
   */
  async list(
    request: operations.GetFlagConfigScheduledChangesRequest,
    options?: RequestOptions,
  ): Promise<components.FeatureFlagScheduledChanges> {
    return unwrapAsync(scheduledChangesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create scheduled changes workflow
   *
   * @remarks
   * Create scheduled changes for a feature flag. If the `ignoreConficts` query parameter is false and there are conflicts between these instructions and existing scheduled changes, the request will fail. If the parameter is true and there are conflicts, the request will succeed.
   */
  async create(
    request: operations.PostFlagConfigScheduledChangesRequest,
    options?: RequestOptions,
  ): Promise<components.FeatureFlagScheduledChange> {
    return unwrapAsync(scheduledChangesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a scheduled change
   *
   * @remarks
   * Get a scheduled change that will be applied to the feature flag by ID.
   */
  async get(
    request: operations.GetFeatureFlagScheduledChangeRequest,
    options?: RequestOptions,
  ): Promise<components.FeatureFlagScheduledChange> {
    return unwrapAsync(scheduledChangesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update scheduled changes workflow
   *
   * @remarks
   *
   * Update a scheduled change, overriding existing instructions with the new ones. Updating a scheduled change uses the semantic patch format.
   *
   * To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instructions for updating scheduled changes.
   *
   * <details>
   * <summary>Click to expand instructions for <strong>updating scheduled changes</strong></summary>
   *
   * #### deleteScheduledChange
   *
   * Removes the scheduled change.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [{ "kind": "deleteScheduledChange" }]
   * }
   * ```
   *
   * #### replaceScheduledChangesInstructions
   *
   * Removes the existing scheduled changes and replaces them with the new instructions.
   *
   * ##### Parameters
   *
   * - `value`: An array of the new actions to perform when the execution date for these scheduled changes arrives. Supported scheduled actions are `turnFlagOn` and `turnFlagOff`.
   *
   * Here's an example that replaces the scheduled changes with new instructions to turn flag targeting off:
   *
   * ```json
   * {
   *   "instructions": [
   *     {
   *       "kind": "replaceScheduledChangesInstructions",
   *       "value": [ {"kind": "turnFlagOff"} ]
   *     }
   *   ]
   * }
   * ```
   *
   * #### updateScheduledChangesExecutionDate
   *
   * Updates the execution date for the scheduled changes.
   *
   * ##### Parameters
   *
   * - `value`: the new execution date, in Unix milliseconds.
   *
   * Here's an example:
   *
   * ```json
   * {
   *   "instructions": [
   *     {
   *       "kind": "updateScheduledChangesExecutionDate",
   *       "value": 1754092860000
   *     }
   *   ]
   * }
   * ```
   *
   * </details>
   */
  async update(
    request: operations.PatchFlagConfigScheduledChangeRequest,
    options?: RequestOptions,
  ): Promise<components.FeatureFlagScheduledChange> {
    return unwrapAsync(scheduledChangesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete scheduled changes workflow
   *
   * @remarks
   * Delete a scheduled changes workflow.
   */
  async delete(
    request: operations.DeleteFlagConfigScheduledChangesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scheduledChangesDelete(
      this,
      request,
      options,
    ));
  }
}
