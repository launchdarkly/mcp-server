/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aiConfigsBetaDeleteAIConfig } from "../funcs/aiConfigsBetaDeleteAIConfig.js";
import { aiConfigsBetaDeleteAIConfigVariation } from "../funcs/aiConfigsBetaDeleteAIConfigVariation.js";
import { aiConfigsBetaDeleteModelConfig } from "../funcs/aiConfigsBetaDeleteModelConfig.js";
import { aiConfigsBetaDeleteRestrictedModels } from "../funcs/aiConfigsBetaDeleteRestrictedModels.js";
import { aiConfigsBetaGetAIConfig } from "../funcs/aiConfigsBetaGetAIConfig.js";
import { aiConfigsBetaGetAIConfigMetrics } from "../funcs/aiConfigsBetaGetAIConfigMetrics.js";
import { aiConfigsBetaGetAIConfigMetricsByVariation } from "../funcs/aiConfigsBetaGetAIConfigMetricsByVariation.js";
import { aiConfigsBetaGetAIConfigs } from "../funcs/aiConfigsBetaGetAIConfigs.js";
import { aiConfigsBetaGetAIConfigVariation } from "../funcs/aiConfigsBetaGetAIConfigVariation.js";
import { aiConfigsBetaGetModelConfig } from "../funcs/aiConfigsBetaGetModelConfig.js";
import { aiConfigsBetaListModelConfigs } from "../funcs/aiConfigsBetaListModelConfigs.js";
import { aiConfigsBetaPatchAIConfig } from "../funcs/aiConfigsBetaPatchAIConfig.js";
import { aiConfigsBetaPatchAIConfigVariation } from "../funcs/aiConfigsBetaPatchAIConfigVariation.js";
import { aiConfigsBetaPostAIConfig } from "../funcs/aiConfigsBetaPostAIConfig.js";
import { aiConfigsBetaPostAIConfigVariation } from "../funcs/aiConfigsBetaPostAIConfigVariation.js";
import { aiConfigsBetaPostModelConfig } from "../funcs/aiConfigsBetaPostModelConfig.js";
import { aiConfigsBetaPostRestrictedModels } from "../funcs/aiConfigsBetaPostRestrictedModels.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AIConfigsBeta extends ClientSDK {
  /**
   * List AI Configs
   *
   * @remarks
   * Get a list of all AI Configs in the given project.
   */
  async getAIConfigs(
    request: operations.GetAIConfigsRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfigs> {
    return unwrapAsync(aiConfigsBetaGetAIConfigs(
      this,
      request,
      options,
    ));
  }

  /**
   * Create new AI Config
   *
   * @remarks
   * Create a new AI Config within the given project.
   */
  async postAIConfig(
    request: operations.PostAIConfigRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfig> {
    return unwrapAsync(aiConfigsBetaPostAIConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config
   *
   * @remarks
   * Retrieve a specific AI Config by its key.
   */
  async getAIConfig(
    request: operations.GetAIConfigRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfig> {
    return unwrapAsync(aiConfigsBetaGetAIConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete AI Config
   *
   * @remarks
   * Delete an existing AI Config.
   */
  async deleteAIConfig(
    request: operations.DeleteAIConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsBetaDeleteAIConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Update AI Config
   *
   * @remarks
   * Edit an existing AI Config.
   *
   * The request body must be a JSON object of the fields to update. The values you include replace the existing values for the fields.
   *
   * Here's an example:
   *   ```
   *     {
   *       "description": "Example updated description",
   *       "tags": ["new-tag"]
   *     }
   *   ```
   */
  async patchAIConfig(
    request: operations.PatchAIConfigRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfig> {
    return unwrapAsync(aiConfigsBetaPatchAIConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Create AI Config variation
   *
   * @remarks
   * Create a new variation for a given AI Config.
   *
   * The <code>model</code> in the request body requires a <code>modelName</code> and <code>parameters</code>, for example:
   *
   * ```
   *   "model": {
   *     "modelName": "claude-3-opus-20240229",
   *     "parameters": {
   *       "max_tokens": 1024
   *     }
   *   }
   * ```
   */
  async postAIConfigVariation(
    request: operations.PostAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfigVariation> {
    return unwrapAsync(aiConfigsBetaPostAIConfigVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config variation
   *
   * @remarks
   * Get an AI Config variation by key. The response includes all variation versions for the given variation key.
   */
  async getAIConfigVariation(
    request: operations.GetAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfigVariationsResponse> {
    return unwrapAsync(aiConfigsBetaGetAIConfigVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete AI Config variation
   *
   * @remarks
   * Delete a specific variation of an AI Config by config key and variation key.
   */
  async deleteAIConfigVariation(
    request: operations.DeleteAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsBetaDeleteAIConfigVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Update AI Config variation
   *
   * @remarks
   * Edit an existing variation of an AI Config. This creates a new version of the variation.
   *
   * The request body must be a JSON object of the fields to update. The values you include replace the existing values for the fields.
   *
   * Here's an example:
   * ```
   *   {
   *     "messages": [
   *       {
   *         "role": "system",
   *         "content": "The new message"
   *       }
   *     ]
   *   }
   * ```
   */
  async patchAIConfigVariation(
    request: operations.PatchAIConfigVariationRequest,
    options?: RequestOptions,
  ): Promise<models.AIConfigVariation> {
    return unwrapAsync(aiConfigsBetaPatchAIConfigVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config metrics
   *
   * @remarks
   * Retrieve usage metrics for an AI Config by config key.
   */
  async getAIConfigMetrics(
    request: operations.GetAIConfigMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.Metrics> {
    return unwrapAsync(aiConfigsBetaGetAIConfigMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI Config metrics by variation
   *
   * @remarks
   * Retrieve usage metrics for an AI Config by config key, with results split by variation.
   */
  async getAIConfigMetricsByVariation(
    request: operations.GetAIConfigMetricsByVariationRequest,
    options?: RequestOptions,
  ): Promise<Array<models.MetricByVariation>> {
    return unwrapAsync(aiConfigsBetaGetAIConfigMetricsByVariation(
      this,
      request,
      options,
    ));
  }

  /**
   * Add AI models to the restricted list
   *
   * @remarks
   * Add AI models, by key, to the restricted list. Keys are included in the response from the [List AI model configs](https://launchdarkly.com/docs/api/ai-configs-beta/list-model-configs) endpoint.
   */
  async postRestrictedModels(
    request: operations.PostRestrictedModelsRequest,
    options?: RequestOptions,
  ): Promise<models.RestrictedModelsResponse> {
    return unwrapAsync(aiConfigsBetaPostRestrictedModels(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove AI models from the restricted list
   *
   * @remarks
   * Remove AI models, by key, from the restricted list.
   */
  async deleteRestrictedModels(
    request: operations.DeleteRestrictedModelsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsBetaDeleteRestrictedModels(
      this,
      request,
      options,
    ));
  }

  /**
   * List AI model configs
   *
   * @remarks
   * Get all AI model configs for a project.
   */
  async listModelConfigs(
    request: operations.ListModelConfigsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.ModelConfig>> {
    return unwrapAsync(aiConfigsBetaListModelConfigs(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an AI model config
   *
   * @remarks
   * Create an AI model config. You can use this in any variation for any AI Config in your project.
   */
  async postModelConfig(
    request: operations.PostModelConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ModelConfig> {
    return unwrapAsync(aiConfigsBetaPostModelConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get AI model config
   *
   * @remarks
   * Get an AI model config by key.
   */
  async getModelConfig(
    request: operations.GetModelConfigRequest,
    options?: RequestOptions,
  ): Promise<models.ModelConfig> {
    return unwrapAsync(aiConfigsBetaGetModelConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an AI model config
   *
   * @remarks
   * Delete an AI model config.
   */
  async deleteModelConfig(
    request: operations.DeleteModelConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(aiConfigsBetaDeleteModelConfig(
      this,
      request,
      options,
    ));
  }
}
