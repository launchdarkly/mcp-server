/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { integrationDeliveryConfigurationsCreate } from "../funcs/integrationDeliveryConfigurationsCreate.js";
import { integrationDeliveryConfigurationsDelete } from "../funcs/integrationDeliveryConfigurationsDelete.js";
import { integrationDeliveryConfigurationsGetByEnvironment } from "../funcs/integrationDeliveryConfigurationsGetByEnvironment.js";
import { integrationDeliveryConfigurationsGetById } from "../funcs/integrationDeliveryConfigurationsGetById.js";
import { integrationDeliveryConfigurationsList } from "../funcs/integrationDeliveryConfigurationsList.js";
import { integrationDeliveryConfigurationsUpdate } from "../funcs/integrationDeliveryConfigurationsUpdate.js";
import { integrationDeliveryConfigurationsValidate } from "../funcs/integrationDeliveryConfigurationsValidate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IntegrationDeliveryConfigurations extends ClientSDK {
  /**
   * List all delivery configurations
   *
   * @remarks
   * List all delivery configurations.
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfigurationCollection> {
    return unwrapAsync(integrationDeliveryConfigurationsList(
      this,
      options,
    ));
  }

  /**
   * Get delivery configurations by environment
   *
   * @remarks
   * Get delivery configurations by environment.
   */
  async getByEnvironment(
    request: operations.GetIntegrationDeliveryConfigurationByEnvironmentRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfigurationCollection> {
    return unwrapAsync(integrationDeliveryConfigurationsGetByEnvironment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create delivery configuration
   *
   * @remarks
   * Create a delivery configuration.
   */
  async create(
    request: operations.CreateIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfiguration> {
    return unwrapAsync(integrationDeliveryConfigurationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get delivery configuration by ID
   *
   * @remarks
   * Get delivery configuration by ID.
   */
  async getById(
    request: operations.GetIntegrationDeliveryConfigurationByIdRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfiguration> {
    return unwrapAsync(integrationDeliveryConfigurationsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update delivery configuration
   *
   * @remarks
   * Update an integration delivery configuration. Updating an integration delivery configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   */
  async update(
    request: operations.PatchIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfiguration> {
    return unwrapAsync(integrationDeliveryConfigurationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete delivery configuration
   *
   * @remarks
   * Delete a delivery configuration.
   */
  async delete(
    request: operations.DeleteIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationDeliveryConfigurationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate delivery configuration
   *
   * @remarks
   * Validate the saved delivery configuration, using the `validationRequest` in the integration's `manifest.json` file.
   */
  async validate(
    request: operations.ValidateIntegrationDeliveryConfigurationRequest,
    options?: RequestOptions,
  ): Promise<components.IntegrationDeliveryConfigurationResponse> {
    return unwrapAsync(integrationDeliveryConfigurationsValidate(
      this,
      request,
      options,
    ));
  }
}
