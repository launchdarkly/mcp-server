/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsBetaCreateMetricGroup } from "../funcs/metricsBetaCreateMetricGroup.js";
import { metricsBetaDeleteMetricGroup } from "../funcs/metricsBetaDeleteMetricGroup.js";
import { metricsBetaGetMetricGroup } from "../funcs/metricsBetaGetMetricGroup.js";
import { metricsBetaGetMetricGroups } from "../funcs/metricsBetaGetMetricGroups.js";
import { metricsBetaPatchMetricGroup } from "../funcs/metricsBetaPatchMetricGroup.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetricsBeta extends ClientSDK {
  /**
   * List metric groups
   *
   * @remarks
   * Get a list of all metric groups for the specified project.
   *
   * ### Expanding the metric groups response
   * LaunchDarkly supports one field for expanding the "Get metric groups" response. By default, these fields are **not** included in the response.
   *
   * To expand the response, append the `expand` query parameter and add a comma-separated list with the following field:
   *
   * - `experiments` includes all experiments from the specific project that use the metric group
   *
   * For example, `expand=experiments` includes the `experiments` field in the response.
   *
   * ### Filtering metric groups
   *
   * The `filter` parameter supports the following operators: `contains`, `equals`, `anyOf`.
   *
   * #### Supported fields and operators
   *
   * You can only filter certain fields in metrics when using the `filter` parameter. Additionally, you can only filter some fields with certain operators.
   *
   * When you search for metrics, the `filter` parameter supports the following fields and operators:
   *
   * |<div style="width:120px">Field</div> |Description |Supported operators |
   * |---|---|---|
   * | `experimentStatus` | The experiment's status. One of `not_started`, `running`, `stopped`, `started`. | `equals` |
   * | `hasConnections` | Whether the metric group has connections to experiments or guarded rollouts. One of `true`, `false`. | `equals` |
   * | `kind` | The metric group kind. One of `funnel`, `standard`. | `equals` |
   * | `maintainerIds` | The metric maintainer IDs. | `anyOf` |
   * | `maintainerTeamKey` | The metric maintainer team key. | `equals` |
   * | `query` | A "fuzzy" search across metric group key and name. Supply a string or list of strings to the operator. | `equals` |
   *
   * ### Sorting metric groups
   *
   * LaunchDarkly supports the following fields for sorting:
   *
   * - `name` sorts by metric group name.
   * - `createdAt` sorts by the creation date of the metric group.
   * - `connectionCount` sorts by the number of connections to experiments the metric group has.
   *
   * By default, the sort is in ascending order. Use `-` to sort in descending order. For example, `?sort=name` sorts the response by metric group name in ascending order, and `?sort=-name` sorts in descending order.
   *
   * #### Sample query
   *
   * `filter=experimentStatus equals 'not_started' and query equals 'metric name'`
   */
  async getMetricGroups(
    request: operations.GetMetricGroupsRequest,
    options?: RequestOptions,
  ): Promise<models.MetricGroupCollectionRep> {
    return unwrapAsync(metricsBetaGetMetricGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Create metric group
   *
   * @remarks
   * Create a new metric group in the specified project
   */
  async createMetricGroup(
    request: operations.CreateMetricGroupRequest,
    options?: RequestOptions,
  ): Promise<models.MetricGroupRep> {
    return unwrapAsync(metricsBetaCreateMetricGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metric group
   *
   * @remarks
   * Get information for a single metric group from the specific project.
   *
   * ### Expanding the metric group response
   * LaunchDarkly supports two fields for expanding the "Get metric group" response. By default, these fields are **not** included in the response.
   *
   * To expand the response, append the `expand` query parameter and add a comma-separated list with either or both of the following fields:
   *
   * - `experiments` includes all experiments from the specific project that use the metric group
   * - `experimentCount` includes the number of experiments from the specific project that use the metric group
   *
   * For example, `expand=experiments` includes the `experiments` field in the response.
   */
  async getMetricGroup(
    request: operations.GetMetricGroupRequest,
    options?: RequestOptions,
  ): Promise<models.MetricGroupRep> {
    return unwrapAsync(metricsBetaGetMetricGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete metric group
   *
   * @remarks
   * Delete a metric group by key.
   */
  async deleteMetricGroup(
    request: operations.DeleteMetricGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(metricsBetaDeleteMetricGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch metric group
   *
   * @remarks
   * Patch a metric group by key. Updating a metric group uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes.
   */
  async patchMetricGroup(
    request: operations.PatchMetricGroupRequest,
    options?: RequestOptions,
  ): Promise<models.MetricGroupRep> {
    return unwrapAsync(metricsBetaPatchMetricGroup(
      this,
      request,
      options,
    ));
  }
}
