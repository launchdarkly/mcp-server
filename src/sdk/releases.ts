/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { releasesCreate } from "../funcs/releasesCreate.js";
import { releasesDeleteByFlagKey } from "../funcs/releasesDeleteByFlagKey.js";
import { releasesGetByFlagKey } from "../funcs/releasesGetByFlagKey.js";
import { releasesPatchByFlagKey } from "../funcs/releasesPatchByFlagKey.js";
import { releasesUpdatePhaseStatus } from "../funcs/releasesUpdatePhaseStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Releases extends ClientSDK {
  /**
   * Get release for flag
   *
   * @remarks
   * Get currently active release for a flag
   */
  async getByFlagKey(
    request: operations.GetReleaseByFlagKeyRequest,
    options?: RequestOptions,
  ): Promise<components.Release> {
    return unwrapAsync(releasesGetByFlagKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Patch release for flag
   *
   * @remarks
   * This endpoint is only available for releases that are part of a legacy release pipeline. Releases for new release pipelines should use the [Update phase status for release](https://launchdarkly.com/docs/api/releases-beta/update-phase-status) endpoint. To learn more about migrating from legacy release pipelines to fully automated release pipelines, read the [Release pipeline migration guide](https://launchdarkly.com/docs/guides/flags/release-pipeline-migration).
   *
   * Update currently active release for a flag. Updating releases requires the [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) format. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).
   *
   * You can only use this endpoint to mark a release phase complete or incomplete. To indicate which phase to update, use the array index in the `path`. For example, to mark the first phase of a release as complete, use the following request body:
   *
   * ```
   *   [
   *     {
   *       "op": "replace",
   *       "path": "/phase/0/complete",
   *       "value": true
   *     }
   *   ]
   * ```
   */
  async patchByFlagKey(
    request: operations.PatchReleaseByFlagKeyRequest,
    options?: RequestOptions,
  ): Promise<components.Release> {
    return unwrapAsync(releasesPatchByFlagKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a release for flag
   *
   * @remarks
   * Deletes a release from a flag
   */
  async deleteByFlagKey(
    request: operations.DeleteReleaseByFlagKeyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(releasesDeleteByFlagKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new release for flag
   *
   * @remarks
   * Creates a release by adding a flag to a release pipeline
   */
  async create(
    request: operations.CreateReleaseForFlagRequest,
    options?: RequestOptions,
  ): Promise<components.Release> {
    return unwrapAsync(releasesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update phase status for release
   *
   * @remarks
   * Updates the execution status of a phase of a release
   */
  async updatePhaseStatus(
    request: operations.UpdatePhaseStatusRequest,
    options?: RequestOptions,
  ): Promise<components.Release> {
    return unwrapAsync(releasesUpdatePhaseStatus(
      this,
      request,
      options,
    ));
  }
}
