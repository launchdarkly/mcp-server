/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flagImportConfigurationsBetaCreateFlagImportConfiguration } from "../funcs/flagImportConfigurationsBetaCreateFlagImportConfiguration.js";
import { flagImportConfigurationsBetaDeleteFlagImportConfiguration } from "../funcs/flagImportConfigurationsBetaDeleteFlagImportConfiguration.js";
import { flagImportConfigurationsBetaGetFlagImportConfiguration } from "../funcs/flagImportConfigurationsBetaGetFlagImportConfiguration.js";
import { flagImportConfigurationsBetaGetFlagImportConfigurations } from "../funcs/flagImportConfigurationsBetaGetFlagImportConfigurations.js";
import { flagImportConfigurationsBetaPatchFlagImportConfiguration } from "../funcs/flagImportConfigurationsBetaPatchFlagImportConfiguration.js";
import { flagImportConfigurationsBetaTriggerFlagImportJob } from "../funcs/flagImportConfigurationsBetaTriggerFlagImportJob.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FlagImportConfigurationsBeta extends ClientSDK {
  /**
   * List all flag import configurations
   *
   * @remarks
   * List all flag import configurations.
   */
  async getFlagImportConfigurations(
    options?: RequestOptions,
  ): Promise<models.FlagImportIntegrationCollection> {
    return unwrapAsync(flagImportConfigurationsBetaGetFlagImportConfigurations(
      this,
      options,
    ));
  }

  /**
   * Create a flag import configuration
   *
   * @remarks
   * Create a new flag import configuration. The `integrationKey` path parameter identifies the feature management system from which the import occurs, for example, `split`. The `config` object in the request body schema is described by the global integration settings, as specified by the <code>formVariables</code> in the <code>manifest.json</code> for this integration. It varies slightly based on the `integrationKey`.
   */
  async createFlagImportConfiguration(
    request: operations.CreateFlagImportConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.FlagImportIntegration> {
    return unwrapAsync(
      flagImportConfigurationsBetaCreateFlagImportConfiguration(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get a single flag import configuration
   *
   * @remarks
   * Get a single flag import configuration by ID. The `integrationKey` path parameter identifies the feature management system from which the import occurs, for example, `split`.
   */
  async getFlagImportConfiguration(
    request: operations.GetFlagImportConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.FlagImportIntegration> {
    return unwrapAsync(flagImportConfigurationsBetaGetFlagImportConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a flag import configuration
   *
   * @remarks
   * Delete a flag import configuration by ID. The `integrationKey` path parameter identifies the feature management system from which the import occurs, for example, `split`.
   */
  async deleteFlagImportConfiguration(
    request: operations.DeleteFlagImportConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      flagImportConfigurationsBetaDeleteFlagImportConfiguration(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update a flag import configuration
   *
   * @remarks
   * Updating a flag import configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](https://launchdarkly.com/docs/api#updates).<br/><br/>To add an element to the import configuration fields that are arrays, set the `path` to the name of the field and then append `/<array index>`. Use `/0` to add to the beginning of the array. Use `/-` to add to the end of the array.<br/><br/>You can update the `config`, `tags`, and `name` of the flag import configuration.
   */
  async patchFlagImportConfiguration(
    request: operations.PatchFlagImportConfigurationRequest,
    options?: RequestOptions,
  ): Promise<models.FlagImportIntegration> {
    return unwrapAsync(flagImportConfigurationsBetaPatchFlagImportConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Trigger a single flag import run
   *
   * @remarks
   * Trigger a single flag import run for an existing flag import configuration. The `integrationKey` path parameter identifies the feature management system from which the import occurs, for example, `split`.
   */
  async triggerFlagImportJob(
    request: operations.TriggerFlagImportJobRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(flagImportConfigurationsBetaTriggerFlagImportJob(
      this,
      request,
      options,
    ));
  }
}
