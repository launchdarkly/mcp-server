/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userSettingsGetExpiringFlagsForUser } from "../funcs/userSettingsGetExpiringFlagsForUser.js";
import { userSettingsGetFlagSetting } from "../funcs/userSettingsGetFlagSetting.js";
import { userSettingsListFlags } from "../funcs/userSettingsListFlags.js";
import { userSettingsUpdateExpiringTargets } from "../funcs/userSettingsUpdateExpiringTargets.js";
import { userSettingsUpdateFlagSetting } from "../funcs/userSettingsUpdateFlagSetting.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UserSettings extends ClientSDK {
  /**
   * List flag settings for user
   *
   * @remarks
   * Get the current flag settings for a given user. <br /><br />The `_value` is the flag variation that the user receives. The `setting` indicates whether you've explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be `false`. The example response indicates that the user `Abbie_Braun` has the `sort.order` flag enabled and the `alternate.page` flag disabled, and that the user has not been explicitly targeted to receive a particular variation.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async listFlags(
    request: operations.GetUserFlagSettingsRequest,
    options?: RequestOptions,
  ): Promise<components.UserFlagSettings> {
    return unwrapAsync(userSettingsListFlags(
      this,
      request,
      options,
    ));
  }

  /**
   * Get flag setting for user
   *
   * @remarks
   * Get a single flag setting for a user by flag key. <br /><br />The `_value` is the flag variation that the user receives. The `setting` indicates whether you've explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be `false`. The example response indicates that the user `Abbie_Braun` has the `sort.order` flag enabled.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getFlagSetting(
    request: operations.GetUserFlagSettingRequest,
    options?: RequestOptions,
  ): Promise<components.UserFlagSetting> {
    return unwrapAsync(userSettingsGetFlagSetting(
      this,
      request,
      options,
    ));
  }

  /**
   * Update flag settings for user
   *
   * @remarks
   * Enable or disable a feature flag for a user based on their key.
   *
   * Omitting the `setting` attribute from the request body, or including a `setting` of `null`, erases the current setting for a user.
   *
   * If you previously patched the flag, and the patch included the user's data, LaunchDarkly continues to use that data. If LaunchDarkly has never encountered the user's key before, it calculates the flag values based on the user key alone.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async updateFlagSetting(
    request: operations.PutFlagSettingRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userSettingsUpdateFlagSetting(
      this,
      request,
      options,
    ));
  }

  /**
   * Get expiring dates on flags for user
   *
   * @remarks
   * Get a list of flags for which the given user is scheduled for removal.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getExpiringFlagsForUser(
    request: operations.GetExpiringFlagsForUserRequest,
    options?: RequestOptions,
  ): Promise<components.ExpiringUserTargetGetResponse> {
    return unwrapAsync(userSettingsGetExpiringFlagsForUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Update expiring user target for flags
   *
   * @remarks
   * Schedule the specified user for removal from individual targeting on one or more flags. The user must already be individually targeted for each flag.
   *
   * You can add, update, or remove a scheduled removal date. You can only schedule a user for removal on a single variation per flag.
   *
   * Updating an expiring target uses the semantic patch format. To make a semantic patch request, you must append `domain-model=launchdarkly.semanticpatch` to your `Content-Type` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).
   *
   * ### Instructions
   *
   * Semantic patch requests support the following `kind` instructions for updating expiring user targets.
   *
   * <details>
   * <summary>Click to expand instructions for <strong>updating expiring user targets</strong></summary>
   *
   * #### addExpireUserTargetDate
   *
   * Adds a date and time that LaunchDarkly will remove the user from the flag's individual targeting.
   *
   * ##### Parameters
   *
   * * `flagKey`: The flag key
   * * `variationId`: ID of a variation on the flag
   * * `value`: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.
   *
   * #### updateExpireUserTargetDate
   *
   * Updates the date and time that LaunchDarkly will remove the user from the flag's individual targeting.
   *
   * ##### Parameters
   *
   * * `flagKey`: The flag key
   * * `variationId`: ID of a variation on the flag
   * * `value`: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.
   * * `version`: The version of the expiring user target to update. If included, update will fail if version doesn't match current version of the expiring user target.
   *
   * #### removeExpireUserTargetDate
   *
   * Removes the scheduled removal of the user from the flag's individual targeting. The user will remain part of the flag's individual targeting until explicitly removed, or until another removal is scheduled.
   *
   * ##### Parameters
   *
   * * `flagKey`: The flag key
   * * `variationId`: ID of a variation on the flag
   *
   * </details>
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async updateExpiringTargets(
    request: operations.PatchExpiringFlagsForUserRequest,
    options?: RequestOptions,
  ): Promise<components.ExpiringUserTargetPatchResponse> {
    return unwrapAsync(userSettingsUpdateExpiringTargets(
      this,
      request,
      options,
    ));
  }
}
