/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userSettingsPatchExpiringFlagsForUser } from "../../funcs/userSettingsPatchExpiringFlagsForUser.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchExpiringFlagsForUserRequest$inboundSchema,
};

export const tool$userSettingsPatchExpiringFlagsForUser: ToolDefinition<
  typeof args
> = {
  name: "user-settings-patch-expiring-flags-for-user",
  description: `Update expiring user target for flags

Schedule the specified user for removal from individual targeting on one or more flags. The user must already be individually targeted for each flag.

You can add, update, or remove a scheduled removal date. You can only schedule a user for removal on a single variation per flag.

Updating an expiring target uses the semantic patch format. To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

### Instructions

Semantic patch requests support the following \`kind\` instructions for updating expiring user targets.

<details>
<summary>Click to expand instructions for <strong>updating expiring user targets</strong></summary>

#### addExpireUserTargetDate

Adds a date and time that LaunchDarkly will remove the user from the flag's individual targeting.

##### Parameters

* \`flagKey\`: The flag key
* \`variationId\`: ID of a variation on the flag
* \`value\`: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.

#### updateExpireUserTargetDate

Updates the date and time that LaunchDarkly will remove the user from the flag's individual targeting.

##### Parameters

* \`flagKey\`: The flag key
* \`variationId\`: ID of a variation on the flag
* \`value\`: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.
* \`version\`: The version of the expiring user target to update. If included, update will fail if version doesn't match current version of the expiring user target.

#### removeExpireUserTargetDate

Removes the scheduled removal of the user from the flag's individual targeting. The user will remain part of the flag's individual targeting until explicitly removed, or until another removal is scheduled.

##### Parameters

* \`flagKey\`: The flag key
* \`variationId\`: ID of a variation on the flag

</details>
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await userSettingsPatchExpiringFlagsForUser(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
