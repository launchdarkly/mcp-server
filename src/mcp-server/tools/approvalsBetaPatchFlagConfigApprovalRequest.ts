/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { approvalsBetaPatchFlagConfigApprovalRequest } from "../../funcs/approvalsBetaPatchFlagConfigApprovalRequest.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchFlagConfigApprovalRequestRequest$inboundSchema,
};

export const tool$approvalsBetaPatchFlagConfigApprovalRequest: ToolDefinition<
  typeof args
> = {
  name: "approvals-(beta)-patch-flag-config-approval-request",
  description: `Update flag approval request

Perform a partial update to an approval request. Updating an approval request uses the semantic patch format. This endpoint requires a feature flag key, and can only be used for updating approval requests for flags.

To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

### Instructions

Semantic patch requests support the following \`kind\` instruction for updating an approval request.

#### addReviewers

Adds the specified members and teams to the existing list of reviewers. You must include at least one of \`notifyMemberIds\` and \`notifyTeamKeys\`.

##### Parameters

- \`notifyMemberIds\`: (Optional) List of member IDs.
- \`notifyTeamKeys\`: (Optional) List of team keys.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await approvalsBetaPatchFlagConfigApprovalRequest(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
