/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scheduledChangesPostFlagConfigScheduledChanges } from "../../funcs/scheduledChangesPostFlagConfigScheduledChanges.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PostFlagConfigScheduledChangesRequest$inboundSchema,
};

export const tool$scheduledChangesPostFlagConfigScheduledChanges:
  ToolDefinition<typeof args> = {
    name: "scheduled-changes-post-flag-config-scheduled-changes",
    description: `Create scheduled changes workflow

Create scheduled changes for a feature flag. If the \`ignoreConficts\` query parameter is false and there are conflicts between these instructions and existing scheduled changes, the request will fail. If the parameter is true and there are conflicts, the request will succeed.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await scheduledChangesPostFlagConfigScheduledChanges(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
