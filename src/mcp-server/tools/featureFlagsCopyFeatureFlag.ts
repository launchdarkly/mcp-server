/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsCopyFeatureFlag } from "../../funcs/featureFlagsCopyFeatureFlag.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CopyFeatureFlagRequest$inboundSchema,
};

export const tool$featureFlagsCopyFeatureFlag: ToolDefinition<typeof args> = {
  name: "feature-flags-copy-feature-flag",
  description: `Copy feature flag


> ### Copying flag settings is an Enterprise feature
>
> Copying flag settings is available to customers on an Enterprise plan. To learn more, [read about our pricing](https://launchdarkly.com/pricing/). To upgrade your plan, [contact Sales](https://launchdarkly.com/contact-sales/).

Copy flag settings from a source environment to a target environment.

By default, this operation copies the entire flag configuration. You can use the \`includedActions\` or \`excludedActions\` to specify that only part of the flag configuration is copied.

If you provide the optional \`currentVersion\` of a flag, this operation tests to ensure that the current flag version in the environment matches the version you've specified. The operation rejects attempts to copy flag settings if the environment's current version  of the flag does not match the version you've specified. You can use this to enforce optimistic locking on copy attempts.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsCopyFeatureFlag(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
