/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { segmentsPatchExpiringUserTargetsForSegment } from "../../funcs/segmentsPatchExpiringUserTargetsForSegment.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchExpiringUserTargetsForSegmentRequest$inboundSchema,
};

export const tool$segmentsPatchExpiringUserTargetsForSegment: ToolDefinition<
  typeof args
> = {
  name: "segments-patch-expiring-user-targets-for-segment",
  description: `Update expiring user targets for segment


> ### Contexts are now available
>
> After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Update expiring targets for segment](https://launchdarkly.com/docs/ld-docs/api/segments/patch-expiring-targets-for-segment) instead of this endpoint. To learn more, read [Contexts](https://launchdarkly.com/docs/home/observability/contexts).

Update expiring user targets for a segment. Updating a user target expiration uses the semantic patch format.

To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

If the request is well-formed but any of its instructions failed to process, this operation returns status code \`200\`. In this case, the response \`errors\` array will be non-empty.

### Instructions

Semantic patch requests support the following \`kind\` instructions for updating expiring user targets.

<details>
<summary>Click to expand instructions for <strong>updating expiring user targets</strong></summary>

#### addExpireUserTargetDate

Schedules a date and time when LaunchDarkly will remove a user from segment targeting.

##### Parameters

- \`targetType\`: A segment's target type, must be either \`included\` or \`excluded\`.
- \`userKey\`: The user key.
- \`value\`: The date when the user should expire from the segment targeting, in Unix milliseconds.

#### updateExpireUserTargetDate

Updates the date and time when LaunchDarkly will remove a user from segment targeting.

##### Parameters

- \`targetType\`: A segment's target type, must be either \`included\` or \`excluded\`.
- \`userKey\`: The user key.
- \`value\`: The new date when the user should expire from the segment targeting, in Unix milliseconds.
- \`version\`: The segment version.

#### removeExpireUserTargetDate

Removes the scheduled expiration for the user in the segment.

##### Parameters

- \`targetType\`: A segment's target type, must be either \`included\` or \`excluded\`.
- \`userKey\`: The user key.

</details>
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await segmentsPatchExpiringUserTargetsForSegment(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
