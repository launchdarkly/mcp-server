/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsGetExpiringContextTargets } from "../../funcs/featureFlagsGetExpiringContextTargets.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetExpiringContextTargetsRequest$inboundSchema,
};

export const tool$featureFlagsGetExpiringContextTargets: ToolDefinition<
  typeof args
> = {
  name: "feature-flags-get-expiring-context-targets",
  description: `Get expiring context targets for feature flag

Get a list of context targets on a feature flag that are scheduled for removal.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsGetExpiringContextTargets(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
