/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { segmentsGetSegmentMembershipForUser } from "../../funcs/segmentsGetSegmentMembershipForUser.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetSegmentMembershipForUserRequest$inboundSchema,
};

export const tool$segmentsGetSegmentMembershipForUser: ToolDefinition<
  typeof args
> = {
  name: "segments-get-segment-membership-for-user",
  description: `Get big segment membership for user

> ### Contexts are now available
>
> After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Get expiring targets for segment](https://launchdarkly.com/docs/ld-docs/api/segments/get-expiring-targets-for-segment) instead of this endpoint. To learn more, read [Contexts](https://launchdarkly.com/docs/home/observability/contexts).

Get the membership status (included/excluded) for a given user in this big segment. This operation does not support standard segments.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await segmentsGetSegmentMembershipForUser(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
