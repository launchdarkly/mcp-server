/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userSettingsGetUserFlagSetting } from "../../funcs/userSettingsGetUserFlagSetting.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetUserFlagSettingRequest$inboundSchema,
};

export const tool$userSettingsGetUserFlagSetting: ToolDefinition<typeof args> =
  {
    name: "user-settings-get-user-flag-setting",
    description: `Get flag setting for user

Get a single flag setting for a user by flag key. <br /><br />The \`_value\` is the flag variation that the user receives. The \`setting\` indicates whether you've explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be \`false\`. The example response indicates that the user \`Abbie_Braun\` has the \`sort.order\` flag enabled.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await userSettingsGetUserFlagSetting(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
