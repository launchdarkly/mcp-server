/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { experimentsGetExperiments } from "../../funcs/experimentsGetExperiments.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetExperimentsRequest$inboundSchema,
};

export const tool$experimentsGetExperiments: ToolDefinition<typeof args> = {
  name: "experiments-get-experiments",
  description: `Get experiments

Get details about all experiments in an environment.

### Filtering experiments

LaunchDarkly supports the \`filter\` query param for filtering, with the following fields:

- \`flagKey\` filters for only experiments that use the flag with the given key.
- \`metricKey\` filters for only experiments that use the metric with the given key.
- \`status\` filters for only experiments with an iteration with the given status. An iteration can have the status \`not_started\`, \`running\` or \`stopped\`.

For example, \`filter=flagKey:my-flag,status:running,metricKey:page-load-ms\` filters for experiments for the given flag key and the given metric key which have a currently running iteration.

### Expanding the experiments response

LaunchDarkly supports four fields for expanding the "Get experiments" response. By default, these fields are **not** included in the response.

To expand the response, append the \`expand\` query parameter and add a comma-separated list with any of the following fields:

- \`previousIterations\` includes all iterations prior to the current iteration. By default only the current iteration is included in the response.
- \`draftIteration\` includes the iteration which has not been started yet, if any.
- \`secondaryMetrics\` includes secondary metrics. By default only the primary metric is included in the response.
- \`treatments\` includes all treatment and parameter details. By default treatment data is not included in the response.

For example, \`expand=draftIteration,treatments\` includes the \`draftIteration\` and \`treatments\` fields in the response. If fields that you request with the \`expand\` query parameter are empty, they are not included in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await experimentsGetExperiments(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
