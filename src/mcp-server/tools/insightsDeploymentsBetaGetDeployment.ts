/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsDeploymentsBetaGetDeployment } from "../../funcs/insightsDeploymentsBetaGetDeployment.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetDeploymentRequest$inboundSchema,
};

export const tool$insightsDeploymentsBetaGetDeployment: ToolDefinition<
  typeof args
> = {
  name: "insights-deployments-(beta)-get-deployment",
  description: `Get deployment

Get a deployment by ID.

The deployment ID is returned as part of the [List deployments](https://launchdarkly.com/docs/api/insights-deployments-beta/get-deployments) response. It is the \`id\` field of each element in the \`items\` array.

### Expanding the deployment response

LaunchDarkly supports expanding the deployment response to include additional fields.

To expand the response, append the \`expand\` query parameter and include the following:

* \`pullRequests\` includes details on all of the pull requests associated with each deployment
* \`flagReferences\` includes details on all of the references to flags in each deployment

For example, use \`?expand=pullRequests\` to include the \`pullRequests\` field in the response. By default, this field is **not** included in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await insightsDeploymentsBetaGetDeployment(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
