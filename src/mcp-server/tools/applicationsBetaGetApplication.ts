/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationsBetaGetApplication } from "../../funcs/applicationsBetaGetApplication.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetApplicationRequest$inboundSchema,
};

export const tool$applicationsBetaGetApplication: ToolDefinition<typeof args> =
  {
    name: "applications-(beta)-get-application",
    description: `Get application by key


Retrieve an application by the application key.

### Expanding the application response

LaunchDarkly supports expanding the "Get application" response to include additional fields.

To expand the response, append the \`expand\` query parameter and include the following:

* \`flags\` includes details on the flags that have been evaluated by the application

For example, use \`?expand=flags\` to include the \`flags\` field in the response. By default, this field is **not** included in the response.
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await applicationsBetaGetApplication(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
