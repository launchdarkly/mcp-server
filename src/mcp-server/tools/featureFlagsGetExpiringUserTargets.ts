/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsGetExpiringUserTargets } from "../../funcs/featureFlagsGetExpiringUserTargets.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetExpiringUserTargetsRequest$inboundSchema,
};

export const tool$featureFlagsGetExpiringUserTargets: ToolDefinition<
  typeof args
> = {
  name: "feature-flags-get-expiring-user-targets",
  description: `Get expiring user targets for feature flag


> ### Contexts are now available
>
> After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Get expiring context targets for feature flag](https://launchdarkly.com/docs/api/feature-flags/get-expiring-context-targets) instead of this endpoint. To learn more, read [Contexts](https://launchdarkly.com/docs/home/observability/contexts).

Get a list of user targets on a feature flag that are scheduled for removal.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsGetExpiringUserTargets(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
