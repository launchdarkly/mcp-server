/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { releasePipelinesBetaGetAllReleasePipelines } from "../../funcs/releasePipelinesBetaGetAllReleasePipelines.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetAllReleasePipelinesRequest$inboundSchema,
};

export const tool$releasePipelinesBetaGetAllReleasePipelines: ToolDefinition<
  typeof args
> = {
  name: "release-pipelines-(beta)-get-all-release-pipelines",
  description: `Get all release pipelines

Get all release pipelines for a project.

### Filtering release pipelines

LaunchDarkly supports the following fields for filters:

- \`query\` is a string that matches against the release pipeline \`key\`, \`name\`, and \`description\`. It is not case sensitive. For example: \`?filter=query:examplePipeline\`.

- \`env\` is a string that matches an environment key. For example: \`?filter=env:production\`.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await releasePipelinesBetaGetAllReleasePipelines(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
