/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsGetProjects } from "../../funcs/projectsGetProjects.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetProjectsRequest$inboundSchema,
};

export const tool$projectsGetProjects: ToolDefinition<typeof args> = {
  name: "projects-get-projects",
  description: `List projects

Return a list of projects.

By default, this returns the first 20 projects. Page through this list with the \`limit\` parameter and by following the \`first\`, \`prev\`, \`next\`, and \`last\` links in the \`_links\` field that returns. If those links do not appear, the pages they refer to don't exist. For example, the \`first\` and \`prev\` links will be missing from the response on the first page, because there is no previous page and you cannot return to the first page when you are already on the first page.

### Filtering projects

LaunchDarkly supports three fields for filters:
- \`query\` is a string that matches against the projects' names and keys. It is not case sensitive.
- \`tags\` is a \`+\`-separated list of project tags. It filters the list of projects that have all of the tags in the list.
- \`keys\` is a \`|\` separated list of project keys. It filters the list to projects that have any of the keys in the list.

For example, the filter \`filter=query:abc,tags:tag-1+tag-2\` matches projects with the string \`abc\` in their name or key and also are tagged with \`tag-1\` and \`tag-2\`. The filter is not case-sensitive.

The documented values for \`filter\` query parameters are prior to URL encoding. For example, the \`+\` in \`filter=tags:tag-1+tag-2\` must be encoded to \`%2B\`.

### Sorting projects

LaunchDarkly supports two fields for sorting:
- \`name\` sorts by project name.
- \`createdOn\` sorts by the creation date of the project.

For example, \`sort=name\` sorts the response by project name in ascending order.

### Expanding the projects response

LaunchDarkly supports one field for expanding the "List projects" response. By default, these fields are **not** included in the response.

To expand the response, append the \`expand\` query parameter and add a comma-separated list with the \`environments\` field.

* \`environments\` includes a paginated list of the project environments.

For example, \`expand=environments\` includes the \`environments\` field for each project in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await projectsGetProjects(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
