/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { approvalsPostApprovalRequest } from "../../funcs/approvalsPostApprovalRequest.js";
import * as models from "../../models/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: models.CreateApprovalRequestRequest$inboundSchema,
};

export const tool$approvalsPostApprovalRequest: ToolDefinition<typeof args> = {
  name: "approvals-post-approval-request",
  description: `Create approval request

Create an approval request.

This endpoint requires a list of \`instructions\`, in semantic patch format, that will be applied when the approval request is approved and applied.

If you are creating an approval request for a flag, you can use the following \`instructions\`:

- \`addVariation\`
- \`removeVariation\`
- \`updateVariation\`
- \`updateDefaultVariation\`

For details on using these instructions, read [Update feature flag](https://launchdarkly.com/docs/api/feature-flags/patch-feature-flag).

To create an approval for a flag specific to an environment, use [Create approval request for a flag](https://launchdarkly.com/docs/api/approvals/post-approval-request-for-flag).

If you are creating an approval request for a segment, you can use the following read [Patch segment](https://launchdarkly.com/docs/api/segments/patch-segment) for details on the available \`instructions\`.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await approvalsPostApprovalRequest(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
