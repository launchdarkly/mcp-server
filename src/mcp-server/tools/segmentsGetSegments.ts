/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { segmentsGetSegments } from "../../funcs/segmentsGetSegments.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetSegmentsRequest$inboundSchema,
};

export const tool$segmentsGetSegments: ToolDefinition<typeof args> = {
  name: "segments-get-segments",
  description: `List segments

Get a list of all segments in the given project.

Segments can be rule-based, list-based, or synced. Big segments include larger list-based segments and synced segments. Some fields in the response only apply to big segments.

### Filtering segments

The \`filter\` parameter supports the following operators: \`equals\`, \`anyOf\`, and \`exists\`.

You can also combine filters in the following ways:

- Use a comma (\`,\`) as an AND operator
- Use a vertical bar (\`|\`) as an OR operator
- Use parentheses (\`()\`) to group filters

#### Supported fields and operators

You can only filter certain fields in segments when using the \`filter\` parameter. Additionally, you can only filter some fields with certain operators.

When you search for segments, the \`filter\` parameter supports the following fields and operators:

|<div style="width:120px">Field</div> |Description |Supported operators |
|---|---|---|
| \`excludedKeys\` | The segment keys of segments to exclude from the results. | \`anyOf\` |
| \`external\` | Whether the segment is a synced segment. | \`exists\` |
| \`includedKeys\` | The segment keys of segments to include in the results. | \`anyOf\` |
| \`query\` | A "fuzzy" search across segment key, name, and description. Supply a string or list of strings to the operator. | \`equals\` |
| \`tags\` | The segment tags. | \`anyOf\` |
| \`unbounded\` | Whether the segment is a standard segment (\`false\`) or a big segment (\`true\`). Standard segments include rule-based segments and smaller list-based segments. Big segments include larger list-based segments and synced segments. | \`equals\` |

Here are a few examples:

* The filter \`?filter=tags anyOf ["enterprise", "beta"],query equals "toggle"\` matches segments with "toggle" in their key, name, or description that also have "enterprise" or "beta" as a tag.
* The filter \`?filter=excludedKeys anyOf ["segmentKey1", "segmentKey2"]\` excludes the segments with those keys from the results.
* The filter \`?filter=unbounded equals true\` matches larger list-based segments and synced segments.

The documented values for \`filter\` query parameters are prior to URL encoding. For example, the \`[\` in \`?filter=tags anyOf ["enterprise", "beta"]\` must be encoded to \`%5B\`.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await segmentsGetSegments(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
