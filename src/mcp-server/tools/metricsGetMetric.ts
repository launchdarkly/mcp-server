/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsGetMetric } from "../../funcs/metricsGetMetric.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetMetricRequest$inboundSchema,
};

export const tool$metricsGetMetric: ToolDefinition<typeof args> = {
  name: "metrics-get-metric",
  description: `Get metric

Get information for a single metric from the specific project.

### Expanding the metric response
LaunchDarkly supports four fields for expanding the "Get metric" response. By default, these fields are **not** included in the response.

To expand the response, append the \`expand\` query parameter and add a comma-separated list with any of the following fields:

- \`experiments\` includes all experiments from the specific project that use the metric
- \`experimentCount\` includes the number of experiments from the specific project that use the metric
- \`metricGroups\` includes all metric groups from the specific project that use the metric
- \`metricGroupCount\` includes the number of metric groups from the specific project that use the metric

For example, \`expand=experiments\` includes the \`experiments\` field in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metricsGetMetric(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
