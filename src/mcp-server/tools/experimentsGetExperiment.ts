/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { experimentsGetExperiment } from "../../funcs/experimentsGetExperiment.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetExperimentRequest$inboundSchema,
};

export const tool$experimentsGetExperiment: ToolDefinition<typeof args> = {
  name: "experiments-get-experiment",
  description: `Get experiment

Get details about an experiment.

### Expanding the experiment response

LaunchDarkly supports four fields for expanding the "Get experiment" response. By default, these fields are **not** included in the response.

To expand the response, append the \`expand\` query parameter and add a comma-separated list with any of the following fields:

- \`previousIterations\` includes all iterations prior to the current iteration. By default only the current iteration is included in the response.
- \`draftIteration\` includes the iteration which has not been started yet, if any.
- \`secondaryMetrics\` includes secondary metrics. By default only the primary metric is included in the response.
- \`treatments\` includes all treatment and parameter details. By default treatment data is not included in the response.

For example, \`expand=draftIteration,treatments\` includes the \`draftIteration\` and \`treatments\` fields in the response. If fields that you request with the \`expand\` query parameter are empty, they are not included in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await experimentsGetExperiment(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
