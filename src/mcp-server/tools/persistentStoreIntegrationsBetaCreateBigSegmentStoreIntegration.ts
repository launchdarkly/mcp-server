/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { persistentStoreIntegrationsBetaCreateBigSegmentStoreIntegration } from "../../funcs/persistentStoreIntegrationsBetaCreateBigSegmentStoreIntegration.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateBigSegmentStoreIntegrationRequest$inboundSchema,
};

export const tool$persistentStoreIntegrationsBetaCreateBigSegmentStoreIntegration:
  ToolDefinition<typeof args> = {
    name:
      "persistent-store-integrations-(beta)-create-big-segment-store-integration",
    description: `Create big segment store integration


Create a persistent store integration.

If you are using server-side SDKs, segments synced from external tools and larger list-based segments require a persistent store within your infrastructure. LaunchDarkly keeps the persistent store up to date and consults it during flag evaluation.

You can use either Redis or DynamoDB as your persistent store. When you create a persistent store integration, the fields in the \`config\` object in the request vary depending on which persistent store you use.

If you are using Redis to create your persistent store integration, you will need to know:

* Your Redis host
* Your Redis port
* Your Redis username
* Your Redis password
* Whether or not LaunchDarkly should connect using TLS

If you are using DynamoDB to create your persistent store integration, you will need to know:

* Your DynamoDB table name. The table must have the following schema:
  * Partition key: \`namespace\` (string)
  * Sort key: \`key\` (string)
* Your DynamoDB Amazon Web Services (AWS) region.
* Your AWS role Amazon Resource Name (ARN). This is the role that LaunchDarkly will assume to manage your DynamoDB table.
* The External ID you specified when creating your Amazon Resource Name (ARN).

To learn more, read [Segment configuration](https://launchdarkly.com/docs/home/flags/segment-config).
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await persistentStoreIntegrationsBetaCreateBigSegmentStoreIntegration(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
