/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { approvalsGetApprovalRequest } from "../../funcs/approvalsGetApprovalRequest.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetApprovalRequestRequest$inboundSchema,
};

export const tool$approvalsGetApprovalRequest: ToolDefinition<typeof args> = {
  name: "approvals-get-approval-request",
  description: `Get approval request

Get an approval request by approval request ID.

### Expanding approval response

LaunchDarkly supports the \`expand\` query param to include additional fields in the response, with the following fields:

- \`environments\` includes the environments the approval request relates to
- \`flag\` includes the flag the approval request belongs to
- \`project\` includes the project the approval request belongs to
- \`resource\` includes details on the resource (flag or segment) the approval request relates to

For example, \`expand=project,flag\` includes the \`project\` and \`flag\` fields in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await approvalsGetApprovalRequest(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
