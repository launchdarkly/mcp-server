/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsGetFeatureFlag } from "../../funcs/featureFlagsGetFeatureFlag.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetFeatureFlagRequest$inboundSchema,
};

export const tool$featureFlagsGetFeatureFlag: ToolDefinition<typeof args> = {
  name: "feature-flags-get-feature-flag",
  description: `Get feature flag

Get a single feature flag by key. By default, this returns the configurations for all environments. You can filter environments with the \`env\` query parameter. For example, setting \`env=production\` restricts the returned configurations to just the \`production\` environment.

> #### Recommended use
>
> This endpoint can return a large amount of information. Specifying one or multiple environments with the \`env\` parameter can decrease response time and overall payload size. We recommend using this parameter to return only the environments relevant to your query.

### Expanding response

LaunchDarkly supports the \`expand\` query param to include additional fields in the response, with the following fields:

- \`evaluation\` includes evaluation information within returned environments, including which context kinds the flag has been evaluated for in the past 30 days 
- \`migrationSettings\` includes migration settings information within the flag and within returned environments. These settings are only included for migration flags, that is, where \`purpose\` is \`migration\`.

For example, \`expand=evaluation\` includes the \`evaluation\` field in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsGetFeatureFlag(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
