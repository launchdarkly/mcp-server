/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userSettingsGetUserFlagSettings } from "../../funcs/userSettingsGetUserFlagSettings.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetUserFlagSettingsRequest$inboundSchema,
};

export const tool$userSettingsGetUserFlagSettings: ToolDefinition<typeof args> =
  {
    name: "user-settings-get-user-flag-settings",
    description: `List flag settings for user

Get the current flag settings for a given user. <br /><br />The \`_value\` is the flag variation that the user receives. The \`setting\` indicates whether you've explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be \`false\`. The example response indicates that the user \`Abbie_Braun\` has the \`sort.order\` flag enabled and the \`alternate.page\` flag disabled, and that the user has not been explicitly targeted to receive a particular variation.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await userSettingsGetUserFlagSettings(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
