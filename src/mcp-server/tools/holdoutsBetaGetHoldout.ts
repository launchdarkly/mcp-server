/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { holdoutsBetaGetHoldout } from "../../funcs/holdoutsBetaGetHoldout.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetHoldoutRequest$inboundSchema,
};

export const tool$holdoutsBetaGetHoldout: ToolDefinition<typeof args> = {
  name: "holdouts-(beta)-get-holdout",
  description: `Get holdout

Get details about a holdout.

### Expanding the holdout response

LaunchDarkly supports the following fields for expanding the "Get holdout" response. By default, these fields are **not** included in the response.

To expand the response, append the \`expand\` query parameter and add a comma-separated list with any of the following fields:

- \`draftIteration\` includes the iteration which has not been started yet, if any, for this holdout.
- \`previousIterations\` includes all iterations prior to the current iteration, for this holdout. By default only the current iteration is included in the response.
- \`rel-draftIteration\` includes the iteration which has not been started yet, if any, for the experiments related to this holdout.
- \`rel-metrics\` includes metrics for experiments related to this holdout.
- \`rel-previousIterations\` includes all iterations prior to the current iteration, for the experiments related to this holdout.
- \`rel-secondaryMetrics\` includes secondary metrics for experiments related to this holdout.
- \`rel-treatments\` includes all treatment and parameter details for experiments related to this holdout.
- \`secondaryMetrics\` includes secondary metrics for this holdout. By default only the primary metric is included in the response.
- \`treatments\` includes all treatment and parameter details for this holdout. By default treatment data is not included in the response.

For example, \`expand=draftIteration,rel-draftIteration\` includes the \`draftIteration\` and \`rel-draftIteration\` fields in the response. If fields that you request with the \`expand\` query parameter are empty, they are not included in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await holdoutsBetaGetHoldout(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
