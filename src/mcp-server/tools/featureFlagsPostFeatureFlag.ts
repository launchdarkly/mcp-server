/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsPostFeatureFlag } from "../../funcs/featureFlagsPostFeatureFlag.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PostFeatureFlagRequest$inboundSchema,
};

export const tool$featureFlagsPostFeatureFlag: ToolDefinition<typeof args> = {
  name: "feature-flags-post-feature-flag",
  description: `Create a feature flag

Create a feature flag with the given name, key, and variations.

<details>
<summary>Click to expand instructions for <strong>creating a migration flag</strong></summary>

### Creating a migration flag

When you create a migration flag, the variations are pre-determined based on the number of stages in the migration.

To create a migration flag, omit the \`variations\` and \`defaults\` information. Instead, provide a \`purpose\` of \`migration\`, and \`migrationSettings\`. If you create a migration flag with six stages, \`contextKind\` is required. Otherwise, it should be omitted.

Here's an example:

\`\`\`json
{
  "key": "flag-key-123",
  "purpose": "migration",
  "migrationSettings": {
    "stageCount": 6,
    "contextKind": "account"
  }
}
\`\`\`

To learn more, read [Migration Flags](https://launchdarkly.com/docs/home/flags/migration).

</details>
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsPostFeatureFlag(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
