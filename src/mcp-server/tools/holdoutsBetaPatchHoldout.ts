/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { holdoutsBetaPatchHoldout } from "../../funcs/holdoutsBetaPatchHoldout.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchHoldoutRequest$inboundSchema,
};

export const tool$holdoutsBetaPatchHoldout: ToolDefinition<typeof args> = {
  name: "holdouts-(beta)-patch-holdout",
  description: `Patch holdout

Updates an existing holdout, and returns the updated holdout. Updating holdouts uses the semantic patch format.

To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

### Instructions

Semantic patch requests support the following \`kind\` instructions for updating holdouts.

<details>
<summary>Click to expand instructions for <strong>updating holdouts</strong></summary>

#### endHoldout

Ends a holdout.

##### Parameters

None.

Here's an example:

\`\`\`json
{
  "comment": "Optional comment describing why the holdout is ending",
  "instructions": [{
    "kind": "endHoldout"
  }]
}
\`\`\`

#### removeExperiment

Removes an experiment from a holdout.

##### Parameters

- \`value\`: The key of the experiment to remove

Here's an example:

\`\`\`json
{
  "comment": "Optional comment describing the change",
  "instructions": [{
    "kind": "removeExperiment",
    "value": "experiment-key"
  }]
}
\`\`\`

#### updateDescription

Updates the description of the holdout.

##### Parameters

- \`value\`: The new description.

Here's an example:

\`\`\`json
{
  "comment": "Optional comment describing the update",
  "instructions": [{
    "kind": "updateDescription",
    "value": "Updated holdout description"
  }]
}
\`\`\`

#### updateName

Updates the name of the holdout.

##### Parameters

- \`value\`: The new name.

Here's an example:

\`\`\`json
{
  "comment": "Optional comment describing the update",
  "instructions": [{
    "kind": "updateName",
    "value": "Updated holdout name"
  }]
}
\`\`\`

</details>
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await holdoutsBetaPatchHoldout(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
