/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scheduledChangesPatchFlagConfigScheduledChange } from "../../funcs/scheduledChangesPatchFlagConfigScheduledChange.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchFlagConfigScheduledChangeRequest$inboundSchema,
};

export const tool$scheduledChangesPatchFlagConfigScheduledChange:
  ToolDefinition<typeof args> = {
    name: "scheduled-changes-patch-flag-config-scheduled-change",
    description: `Update scheduled changes workflow


Update a scheduled change, overriding existing instructions with the new ones. Updating a scheduled change uses the semantic patch format.

To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

### Instructions

Semantic patch requests support the following \`kind\` instructions for updating scheduled changes.

<details>
<summary>Click to expand instructions for <strong>updating scheduled changes</strong></summary>

#### deleteScheduledChange

Removes the scheduled change.

Here's an example:

\`\`\`json
{
  "instructions": [{ "kind": "deleteScheduledChange" }]
}
\`\`\`

#### replaceScheduledChangesInstructions

Removes the existing scheduled changes and replaces them with the new instructions.

##### Parameters

- \`value\`: An array of the new actions to perform when the execution date for these scheduled changes arrives. Supported scheduled actions are \`turnFlagOn\` and \`turnFlagOff\`.

Here's an example that replaces the scheduled changes with new instructions to turn flag targeting off:

\`\`\`json
{
  "instructions": [
    {
      "kind": "replaceScheduledChangesInstructions",
      "value": [ {"kind": "turnFlagOff"} ]
    }
  ]
}
\`\`\`

#### updateScheduledChangesExecutionDate

Updates the execution date for the scheduled changes.

##### Parameters

- \`value\`: the new execution date, in Unix milliseconds.

Here's an example:

\`\`\`json
{
  "instructions": [
    {
      "kind": "updateScheduledChangesExecutionDate",
      "value": 1754092860000
    }
  ]
}
\`\`\`

</details>
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await scheduledChangesPatchFlagConfigScheduledChange(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
