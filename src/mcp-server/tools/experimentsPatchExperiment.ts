/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { experimentsPatchExperiment } from "../../funcs/experimentsPatchExperiment.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PatchExperimentRequest$inboundSchema,
};

export const tool$experimentsPatchExperiment: ToolDefinition<typeof args> = {
  name: "experiments-patch-experiment",
  description: `Patch experiment

Update an experiment. Updating an experiment uses the semantic patch format.

To make a semantic patch request, you must append \`domain-model=launchdarkly.semanticpatch\` to your \`Content-Type\` header. To learn more, read [Updates using semantic patch](https://launchdarkly.com/docs/api#updates-using-semantic-patch).

### Instructions

Semantic patch requests support the following \`kind\` instructions for updating experiments.

#### updateName

Updates the experiment name.

##### Parameters

- \`value\`: The new name.

Here's an example:

\`\`\`json
{
  "instructions": [{
    "kind": "updateName",
    "value": "Example updated experiment name"
  }]
}
\`\`\`

#### updateDescription

Updates the experiment description.

##### Parameters

- \`value\`: The new description.

Here's an example:

\`\`\`json
{
  "instructions": [{
    "kind": "updateDescription",
    "value": "Example updated description"
  }]
}
\`\`\`

#### startIteration

Starts a new iteration for this experiment. You must [create a new iteration](https://launchdarkly.com/docs/ld-docs/api/experiments/create-iteration) before calling this instruction.

An iteration may not be started until it meets the following criteria:

* Its associated flag is toggled on and is not archived
* Its \`randomizationUnit\` is set
* At least one of its \`treatments\` has a non-zero \`allocationPercent\`

##### Parameters

- \`changeJustification\`: The reason for starting a new iteration. Required when you call \`startIteration\` on an already running experiment, otherwise optional.

Here's an example:

\`\`\`json
{
  "instructions": [{
    "kind": "startIteration",
    "changeJustification": "It's time to start a new iteration"
  }]
}
\`\`\`

#### stopIteration

Stops the current iteration for this experiment.

##### Parameters

- \`winningTreatmentId\`: The ID of the winning treatment. Treatment IDs are returned as part of the [Get experiment](https://launchdarkly.com/docs/ld-docs/api/experiments/get-experiment) response. They are the \`_id\` of each element in the \`treatments\` array.
- \`winningReason\`: The reason for the winner

Here's an example:

\`\`\`json
{
  "instructions": [{
    "kind": "stopIteration",
    "winningTreatmentId": "3a548ec2-72ac-4e59-8518-5c24f5609ccf",
    "winningReason": "Example reason to stop the iteration"
  }]
}
\`\`\`

#### archiveExperiment

Archives this experiment. Archived experiments are hidden by default in the LaunchDarkly user interface. You cannot start new iterations for archived experiments.

Here's an example:

\`\`\`json
{
  "instructions": [{ "kind": "archiveExperiment" }]
}
\`\`\`

#### restoreExperiment

Restores an archived experiment. After restoring an experiment, you can start new iterations for it again.

Here's an example:

\`\`\`json
{
  "instructions": [{ "kind": "restoreExperiment" }]
}
\`\`\`
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await experimentsPatchExperiment(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
