/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userSettingsPutFlagSetting } from "../../funcs/userSettingsPutFlagSetting.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PutFlagSettingRequest$inboundSchema,
};

export const tool$userSettingsPutFlagSetting: ToolDefinition<typeof args> = {
  name: "user-settings-put-flag-setting",
  description: `Update flag settings for user

Enable or disable a feature flag for a user based on their key.

Omitting the \`setting\` attribute from the request body, or including a \`setting\` of \`null\`, erases the current setting for a user.

If you previously patched the flag, and the patch included the user's data, LaunchDarkly continues to use that data. If LaunchDarkly has never encountered the user's key before, it calculates the flag values based on the user key alone.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await userSettingsPutFlagSetting(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
