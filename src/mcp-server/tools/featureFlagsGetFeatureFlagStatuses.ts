/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { featureFlagsGetFeatureFlagStatuses } from "../../funcs/featureFlagsGetFeatureFlagStatuses.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetFeatureFlagStatusesRequest$inboundSchema,
};

export const tool$featureFlagsGetFeatureFlagStatuses: ToolDefinition<
  typeof args
> = {
  name: "feature-flags-get-feature-flag-statuses",
  description: `List feature flag statuses

Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as a state, which is one of the following:

- \`new\`: You created the flag fewer than seven days ago and it has never been requested.
- \`active\`: LaunchDarkly is receiving requests for this flag, but there are either multiple variations configured, or it is toggled off, or there have been changes to configuration in the past seven days.
- \`inactive\`: You created the feature flag more than seven days ago, and hasn't been requested within the past seven days.
- \`launched\`: LaunchDarkly is receiving requests for this flag, it is toggled on, there is only one variation configured, and there have been no changes to configuration in the past seven days.

To learn more, read [Flag statuses](https://launchdarkly.com/docs/home/observability/flag-status).
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await featureFlagsGetFeatureFlagStatuses(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
