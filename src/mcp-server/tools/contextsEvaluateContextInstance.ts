/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contextsEvaluateContextInstance } from "../../funcs/contextsEvaluateContextInstance.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.EvaluateContextInstanceRequest$inboundSchema,
};

export const tool$contextsEvaluateContextInstance: ToolDefinition<typeof args> =
  {
    name: "contexts-evaluate-context-instance",
    description: `Evaluate flags for context instance

Evaluate flags for a context instance, for example, to determine the expected flag variation. **Do not use this API instead of an SDK.** The LaunchDarkly SDKs are specialized for the tasks of evaluating feature flags in your application at scale and generating analytics events based on those evaluations. This API is not designed for that use case. Any evaluations you perform with this API will not be reflected in features such as flag statuses and flag insights. Context instances evaluated by this API will not appear in the Contexts list. To learn more, read [Comparing LaunchDarkly's SDKs and REST API](https://launchdarkly.com/docs/guides/api/comparing-sdk-rest-api).

### Filtering

LaunchDarkly supports the \`filter\` query param for filtering, with the following fields:

- \`query\` filters for a string that matches against the flags' keys and names. It is not case sensitive. For example: \`filter=query equals dark-mode\`.
- \`tags\` filters the list to flags that have all of the tags in the list. For example: \`filter=tags contains ["beta","q1"]\`.

You can also apply multiple filters at once. For example, setting \`filter=query equals dark-mode, tags contains ["beta","q1"]\` matches flags which match the key or name \`dark-mode\` and are tagged \`beta\` and \`q1\`.
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await contextsEvaluateContextInstance(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
