/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsGetMetrics } from "../../funcs/metricsGetMetrics.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetMetricsRequest$inboundSchema,
};

export const tool$metricsGetMetrics: ToolDefinition<typeof args> = {
  name: "metrics-get-metrics",
  description: `List metrics

Get a list of all metrics for the specified project.

### Filtering metrics

The \`filter\` parameter supports the following operators: \`contains\`, \`equals\`, \`anyOf\`.

#### Supported fields and operators

You can only filter certain fields in metrics when using the \`filter\` parameter. Additionally, you can only filter some fields with certain operators.

When you search for metrics, the \`filter\` parameter supports the following fields and operators:

|<div style="width:120px">Field</div> |Description |Supported operators |
|---|---|---|
| \`eventKind\` | The metric event kind. One of \`custom\`, \`pageview\`, \`click\`. | \`equals\` |
| \`hasConnections\` | Whether the metric has connections to experiments or guarded rollouts. One of \`true\`, \`false\`. | \`equals\` |
| \`isNumeric\` | Whether the metric is numeric. One of \`true\`, \`false\`. | \`equals\` |
| \`maintainerIds\` | A comma-separated list of metric maintainer IDs. | \`anyOf\` |
| \`maintainerTeamKey\` | The metric maintainer team key. | \`equals\` |
| \`query\` | A "fuzzy" search across metric key and name. Supply a string or list of strings to the operator. | \`equals\` |
| \`tags\` | The metric tags. | \`contains\` |
| \`unitAggregationType\` | The metric's unit aggregation type. One of \`sum\`, \`average\`. | \`equals\` |

For example, the filter \`?filter=tags contains ["tag1", "tag2", "tag3"]\` matches metrics that have all three tags.

The documented values for \`filter\` query parameters are prior to URL encoding. For example, the \`[\` in \`?filter=tags contains ["tag1", "tag2", "tag3"]\` must be encoded to \`%5B\`.

### Expanding the metric list response

LaunchDarkly supports expanding the "List metrics" response. By default, the expandable field is **not** included in the response.

To expand the response, append the \`expand\` query parameter and add the following supported field:

- \`experimentCount\` includes the number of experiments from the specific project that use the metric

For example, \`expand=experimentCount\` includes the \`experimentCount\` field for each metric in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metricsGetMetrics(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
