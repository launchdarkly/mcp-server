/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountUsageBetaGetEventsUsage } from "../../funcs/accountUsageBetaGetEventsUsage.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetEventsUsageRequest$inboundSchema,
};

export const tool$accountUsageBetaGetEventsUsage: ToolDefinition<typeof args> =
  {
    name: "account-usage-(beta)-get-events-usage",
    description: `Get events usage

Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await accountUsageBetaGetEventsUsage(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
