/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { insightsFlagEventsBetaGetFlagEvents } from "../../funcs/insightsFlagEventsBetaGetFlagEvents.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetFlagEventsRequest$inboundSchema,
};

export const tool$insightsFlagEventsBetaGetFlagEvents: ToolDefinition<
  typeof args
> = {
  name: "insights-flag-events-(beta)-get-flag-events",
  description: `List flag events

Get a list of flag events

### Expanding the flag event collection response

LaunchDarkly supports expanding the flag event collection response to include additional fields.

To expand the response, append the \`expand\` query parameter and include the following:

* \`experiments\` includes details on all of the experiments run on each flag

For example, use \`?expand=experiments\` to include the \`experiments\` field in the response. By default, this field is **not** included in the response.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await insightsFlagEventsBetaGetFlagEvents(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
